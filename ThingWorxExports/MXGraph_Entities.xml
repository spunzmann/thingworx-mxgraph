<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<Entities build="b2319" majorVersion="8" minorVersion="4" modelPersistenceProviderPackage="PostgresPersistenceProviderPackage" revision="4" schemaVersion="1041" universal="">
	<StyleDefinitions/>
	<Networks/>
	<PersistenceProviderPackages/>
	<Mashups>
		<Mashup aspect.isResponsive="true" aspect.mashupType="mashup" columns="0.0" description="" documentationContent="" homeMashup="" lastModifiedDate="2019-08-16T16:16:55.521+03:00" name="MTPImport.Vladimir.Mashup" projectName="MTP" rows="0.0" tags="">
			<Owner name="Administrator" type="User"/>
			<avatar/>
			<DesignTimePermissions>
				<Create/>
				<Read/>
				<Update/>
				<Delete/>
				<Metadata/>
			</DesignTimePermissions>
			<RunTimePermissions/>
			<VisibilityPermissions>
				<Visibility/>
			</VisibilityPermissions>
			<ConfigurationTableDefinitions/>
			<ConfigurationTables/>
			<ParameterDefinitions/>
			<Things>
				<Thing>MtpMxgraphUtilities</Thing>
				<Thing>MtpThingModelOptions</Thing>
				<Thing>MtpFileRepository</Thing>
			</Things>
			<ThingShapes/>
			<ThingTemplates/>
			<mashupContent><![CDATA[
			{
				"ConfigurationTables": {},
				"CustomMashupCss": ".green-btn > .widget-navigation,\n.green-btn > .widget-navigation.roundedCorners {\n    border-radius: 0 !important;\n    overflow: visible !important;\n}\n\n.green-btn > .widget-navigation.focus,\n.green-btn > .widget-navigation.roundedCorners.focus {\n    border: none !important;\n    border-radius: 3px !important;\n}\n\n.green-btn > .widget-navigation > button.navigation_element,\n.green-btn > .widget-navigation.roundedCorners > button.navigation_element {\n    border-radius: 3px !important;\n}\n\n.green-btn > .widget-navigation > button.navigation_element:hover > span,\n.green-btn > .widget-navigation.roundedCorners > button.navigation_element:hover > span {\n    color: #FFFFFF !important;\n}\n\n.green-btn > .widget-navigation > button.navigation_element:active > span,\n.green-btn > .widget-navigation.roundedCorners > button.navigation_element:active > span {\n    color: #FFFFFF !important;\n}\n \n.green-btn > .widget-navigation > button.navigation_element {\n    background: #3469B3 !important;\n    border: none !important;\n    transition: all 0.2s ease-out;\n    box-shadow: none !important;\n    -webkit-tap-highlight-color: transparent !important;\n    -webkit-user-select: none !important;\n    -moz-user-select: none !important;\n    -ms-user-select: none !important;\n    \n}\n\n.green-btn > .widget-navigation > button.navigation_element:hover {\n    background: #63A1BF !important;\n    box-shadow: none !important;\n    border: none !important;\n}\n\n.green-btn > .widget-navigation > button.navigation_element:active {\n    background: #34B345 !important;\n    box-shadow: none !important;\n    border: none !important;\n}\n    \n.green-btn > .widget-navigation > button:disabled{\n    background: #d9dadf !important;\n    box-shadow: none !important;\n    border: none !important;\n    cursor: default;\n}\n\n.green-btn > .widget-navigation > button:disabled:hover {\n    background: #d9dadf !important;\n    box-shadow: none !important;\n    border: none !important;\n}\n\n.green-btn > .widget-navigation > button:disabled > span.widget-navigation-text,\n.green-btn > .widget-navigation > button:disabled:hover > span.widget-navigation-text {\n    color: #9d9ea3 !important\n}\n    \n.green-btn > .widget-navigation img {\n    padding-right: 8px !important;\n    margin-left: -4px;\n}",
				"Data": {
					"Session": {
						"DataName": "Session",
						"EntityName": "",
						"EntityType": "Session",
						"Id": "session",
						"Services": [{
								"APIMethod": "post",
								"Characteristic": "Services",
								"Id": "SessionInterface",
								"Name": "GetGlobalSessionValues",
								"Parameters": {},
								"RefreshInterval": 0,
								"Target": "GetGlobalSessionValues"
							}
						]
					},
					"Things_MtpFileRepository": {
						"DataName": "Things_MtpFileRepository",
						"EntityName": "MtpFileRepository",
						"EntityType": "Things",
						"Id": "fa9fc09f-5b6f-4eae-99ad-3f0cadb13cb4",
						"Services": [{
								"APIMethod": "post",
								"Characteristic": "Services",
								"Id": "47d4bf87-f5a9-4df0-b0c2-e03ba777d04f",
								"Name": "GetFileListing",
								"Parameters": {},
								"RefreshInterval": 0,
								"Target": "GetFileListing"
							}
						]
					},
					"Things_MtpMxgraphUtilities": {
						"DataName": "Things_MtpMxgraphUtilities",
						"EntityName": "MtpMxgraphUtilities",
						"EntityType": "Things",
						"Id": "7d91f3db-f8de-4583-b34c-47d8b88219b8",
						"Services": [{
								"APIMethod": "get",
								"Characteristic": "Services",
								"Id": "54289561-5dc6-4f1b-9258-0545d8155f4c",
								"Name": "GetProperties",
								"Parameters": {},
								"RefreshInterval": 0,
								"Target": "GetProperties"
							}
						]
					},
					"Things_MtpThingModelOptions": {
						"DataName": "Things_MtpThingModelOptions",
						"EntityName": "MtpThingModelOptions",
						"EntityType": "Things",
						"Id": "94b0b9b8-44de-4057-a893-093ef11e639b",
						"Services": [{
								"APIMethod": "post",
								"Characteristic": "Services",
								"Id": "741fc213-1d79-49e7-8968-8fc85624bafa",
								"Name": "JsonMtpToThingModel",
								"Parameters": {},
								"RefreshInterval": 0,
								"Target": "JsonMtpToThingModel"
							}, {
								"APIMethod": "post",
								"Characteristic": "Services",
								"Id": "c3d288d1-57df-49a2-a971-b1ca65f9b8a7",
								"Name": "CollectDataForMtp",
								"Parameters": {},
								"RefreshInterval": 0,
								"Target": "CollectDataForMtp"
							}, {
								"APIMethod": "post",
								"Characteristic": "Services",
								"Id": "f8b302a8-486a-4f44-aeff-7a2953dd9ea2",
								"Name": "SaveMtpModule",
								"Parameters": {},
								"Properties": {
									"CustomSuccessMessage": "Saved mtp defintion",
									"ShowSuccessMessage": true
								},
								"RefreshInterval": 0,
								"Target": "SaveMtpModule"
							}
						]
					},
					"UserExtensions": {
						"DataName": "UserExtensions",
						"EntityName": "",
						"EntityType": "UserExtensions",
						"Id": "UserExtensions",
						"Services": [{
								"APIMethod": "post",
								"Characteristic": "Services",
								"Id": "UserExtensionInterface",
								"Name": "GetCurrentUserExtensionProperties",
								"Parameters": {},
								"RefreshInterval": 0,
								"Target": "GetCurrentUserExtensionProperties"
							}
						]
					}
				},
				"DataBindings": [{
						"Id": "7eaee812-e8cd-4f27-b91f-1ed8a94d04db",
						"PropertyMaps": [{
								"SourceProperty": "",
								"SourcePropertyBaseType": "INFOTABLE",
								"SourcePropertyType": "InfoTable",
								"TargetProperty": "Data",
								"TargetPropertyBaseType": "INFOTABLE",
								"TargetPropertyType": "property"
							}
						],
						"SourceArea": "Data",
						"SourceDetails": "AllData",
						"SourceId": "GetFileListing",
						"SourceSection": "Things_MtpFileRepository",
						"TargetArea": "UI",
						"TargetId": "dhxlist-25",
						"TargetSection": ""
					}, {
						"Id": "5c1d8486-90df-400f-9073-447d37340481",
						"PropertyMaps": [{
								"SourceProperty": "",
								"SourcePropertyBaseType": "INFOTABLE",
								"SourcePropertyType": "InfoTable",
								"TargetProperty": "Data",
								"TargetPropertyBaseType": "INFOTABLE",
								"TargetPropertyType": "property"
							}
						],
						"SourceArea": "Data",
						"SourceDetails": "AllData",
						"SourceId": "JsonMtpToThingModel",
						"SourceSection": "Things_MtpThingModelOptions",
						"TargetArea": "UI",
						"TargetId": "dhxgrid-48",
						"TargetSection": ""
					}, {
						"Id": "cdefd230-2387-475f-9e80-c2ff23fc0a43",
						"PropertyMaps": [{
								"SourceProperty": "Entity",
								"SourcePropertyBaseType": "THINGTEMPLATENAME",
								"TargetProperty": "template",
								"TargetPropertyBaseType": "THINGTEMPLATENAME",
								"TargetPropertyType": "Parameter"
							}
						],
						"SourceArea": "UI",
						"SourceId": "entitypicker-50",
						"SourceSection": "",
						"TargetArea": "Data",
						"TargetId": "JsonMtpToThingModel",
						"TargetSection": "Things_MtpThingModelOptions"
					}, {
						"Id": "120524fe-e063-4a25-90e1-486afd2648c0",
						"PropertyMaps": [{
								"SourceProperty": "Entity",
								"SourcePropertyBaseType": "THINGNAME",
								"TargetProperty": "industrialGateway",
								"TargetPropertyBaseType": "THINGNAME",
								"TargetPropertyType": "Parameter"
							}
						],
						"SourceArea": "UI",
						"SourceId": "entitypicker-51",
						"SourceSection": "",
						"TargetArea": "Data",
						"TargetId": "JsonMtpToThingModel",
						"TargetSection": "Things_MtpThingModelOptions"
					}, {
						"Id": "4a9719e7-e5f8-47ff-9886-3c228f9b8de8",
						"PropertyMaps": [{
								"SourceProperty": "Tags",
								"SourcePropertyBaseType": "TAGS",
								"TargetProperty": "tags",
								"TargetPropertyBaseType": "TAGS",
								"TargetPropertyType": "Parameter"
							}
						],
						"SourceArea": "UI",
						"SourceId": "tagpicker-54",
						"SourceSection": "",
						"TargetArea": "Data",
						"TargetId": "JsonMtpToThingModel",
						"TargetSection": "Things_MtpThingModelOptions"
					}, {
						"Id": "7e45d22e-7ae6-44fe-91c8-d82532b576e6",
						"PropertyMaps": [{
								"SourceProperty": "Text",
								"SourcePropertyBaseType": "STRING",
								"TargetProperty": "prefix",
								"TargetPropertyBaseType": "STRING",
								"TargetPropertyType": "Parameter"
							}
						],
						"SourceArea": "UI",
						"SourceId": "textbox-52",
						"SourceSection": "",
						"TargetArea": "Data",
						"TargetId": "JsonMtpToThingModel",
						"TargetSection": "Things_MtpThingModelOptions"
					}, {
						"Id": "923ff440-3d11-4b82-a228-7dd1120c7425",
						"PropertyMaps": [{
								"SourceProperty": "Text",
								"SourcePropertyBaseType": "STRING",
								"TargetProperty": "prefix",
								"TargetPropertyBaseType": "STRING",
								"TargetPropertyType": "Parameter"
							}
						],
						"SourceArea": "UI",
						"SourceId": "textbox-52",
						"SourceSection": "",
						"TargetArea": "Data",
						"TargetId": "CollectDataForMtp",
						"TargetSection": "Things_MtpThingModelOptions"
					}, {
						"Id": "6cc8feb5-b5b4-4eae-8ffe-71c467f9c195",
						"PropertyMaps": [{
								"SourceProperty": "Text",
								"SourcePropertyBaseType": "STRING",
								"TargetProperty": "prefix",
								"TargetPropertyBaseType": "STRING",
								"TargetPropertyType": "Parameter"
							}
						],
						"SourceArea": "UI",
						"SourceId": "textbox-52",
						"SourceSection": "",
						"TargetArea": "Data",
						"TargetId": "SaveMtpModule",
						"TargetSection": "Things_MtpThingModelOptions"
					}, {
						"Id": "02821e19-613f-400d-b15e-e8b7b5720905",
						"PropertyMaps": [{
								"SourceProperty": "name",
								"SourcePropertyBaseType": "STRING",
								"SourcePropertyType": "Field",
								"TargetProperty": "MTPFilePath",
								"TargetPropertyBaseType": "STRING",
								"TargetPropertyType": "property"
							}
						],
						"SourceArea": "Data",
						"SourceDetails": "SelectedRows",
						"SourceId": "GetFileListing",
						"SourceSection": "Things_MtpFileRepository",
						"TargetArea": "UI",
						"TargetId": "mxdiagram-4",
						"TargetSection": ""
					}, {
						"Id": "d928532b-27e4-4efc-ac8c-1ccc02297478",
						"PropertyMaps": [{
								"SourceProperty": "XMLDiagram",
								"SourcePropertyBaseType": "TEXT",
								"SourcePropertyType": "Property",
								"TargetProperty": "Text",
								"TargetPropertyBaseType": "STRING",
								"TargetPropertyType": "property"
							}
						],
						"SourceArea": "UI",
						"SourceId": "mxdiagram-4",
						"SourceSection": "",
						"TargetArea": "UI",
						"TargetId": "textarea-58",
						"TargetSection": ""
					}, {
						"Id": "f4c0509a-e54c-4480-859f-2142968bd45a",
						"PropertyMaps": [{
								"SourceProperty": "mtpJson",
								"SourcePropertyBaseType": "STRING",
								"TargetProperty": "jsonMtp",
								"TargetPropertyBaseType": "STRING",
								"TargetPropertyType": "Parameter"
							}
						],
						"SourceArea": "UI",
						"SourceId": "mxdiagram-4",
						"SourceSection": "",
						"TargetArea": "Data",
						"TargetId": "JsonMtpToThingModel",
						"TargetSection": "Things_MtpThingModelOptions"
					}, {
						"Id": "f54f44c1-a16b-4789-9cf2-f3a5a17ec821",
						"PropertyMaps": [{
								"SourceProperty": "mtpJson",
								"SourcePropertyBaseType": "STRING",
								"TargetProperty": "jsonMtp",
								"TargetPropertyBaseType": "STRING",
								"TargetPropertyType": "Parameter"
							}
						],
						"SourceArea": "UI",
						"SourceId": "mxdiagram-4",
						"SourceSection": "",
						"TargetArea": "Data",
						"TargetId": "CollectDataForMtp",
						"TargetSection": "Things_MtpThingModelOptions"
					}, {
						"Id": "48101ddf-f90b-493c-8a53-329a17c1ace7",
						"PropertyMaps": [{
								"SourceProperty": "mtpJson",
								"SourcePropertyBaseType": "STRING",
								"TargetProperty": "mtpJson",
								"TargetPropertyBaseType": "STRING",
								"TargetPropertyType": "Parameter"
							}
						],
						"SourceArea": "UI",
						"SourceId": "mxdiagram-4",
						"SourceSection": "",
						"TargetArea": "Data",
						"TargetId": "SaveMtpModule",
						"TargetSection": "Things_MtpThingModelOptions"
					}, {
						"Id": "63f7135a-ec1c-4010-9609-457d14a8b254",
						"PropertyMaps": [{
								"SourceProperty": "mapping",
								"SourcePropertyBaseType": "INFOTABLE",
								"SourcePropertyType": "Property",
								"TargetProperty": "ShapeMapping",
								"TargetPropertyBaseType": "INFOTABLE",
								"TargetPropertyType": "property"
							}
						],
						"SourceArea": "Data",
						"SourceDetails": "AllData",
						"SourceId": "GetProperties",
						"SourceSection": "Things_MtpMxgraphUtilities",
						"TargetArea": "UI",
						"TargetId": "mxdiagram-4",
						"TargetSection": ""
					}, {
						"Id": "d2256046-a820-4e0c-bb83-f361d96d698c",
						"PropertyMaps": [{
								"SourceProperty": "",
								"SourcePropertyBaseType": "INFOTABLE",
								"SourcePropertyType": "InfoTable",
								"TargetProperty": "MTPData",
								"TargetPropertyBaseType": "INFOTABLE",
								"TargetPropertyType": "property"
							}
						],
						"SourceArea": "Data",
						"SourceDetails": "AllData",
						"SourceId": "CollectDataForMtp",
						"SourceSection": "Things_MtpThingModelOptions",
						"TargetArea": "UI",
						"TargetId": "mxdiagram-4",
						"TargetSection": ""
					}, {
						"Id": "1d724d7b-e764-4422-812b-fa766acbca56",
						"PropertyMaps": [{
								"SourceProperty": "MXGraphShapeList",
								"SourcePropertyBaseType": "INFOTABLE",
								"SourcePropertyType": "Property",
								"TargetProperty": "MappingList",
								"TargetPropertyBaseType": "INFOTABLE",
								"TargetPropertyType": "property"
							}
						],
						"SourceArea": "UI",
						"SourceId": "mxdiagram-4",
						"SourceSection": "",
						"TargetArea": "UI",
						"TargetId": "navigation-60",
						"TargetSection": ""
					}, {
						"Id": "1b09cfb5-78e8-4456-a605-367958ba7b85",
						"PropertyMaps": [{
								"SourceProperty": "SelectedCellId",
								"SourcePropertyBaseType": "STRING",
								"SourcePropertyType": "Property",
								"TargetProperty": "Text",
								"TargetPropertyBaseType": "STRING",
								"TargetPropertyType": "property"
							}
						],
						"SourceArea": "UI",
						"SourceId": "mxdiagram-4",
						"SourceSection": "",
						"TargetArea": "UI",
						"TargetId": "label-62",
						"TargetSection": ""
					}
				],
				"DesignTimePermissions": {
					"Create": [],
					"Delete": [],
					"Metadata": [],
					"Read": [],
					"Update": []
				},
				"Events": [{
						"EventHandlerArea": "Data",
						"EventHandlerId": "Things_MtpMxgraphUtilities",
						"EventHandlerService": "GetProperties",
						"EventTriggerArea": "Mashup",
						"EventTriggerEvent": "Loaded",
						"EventTriggerId": "mashup-root",
						"EventTriggerSection": "",
						"Id": "39816aea-76d7-4e8f-aefb-e77a9db915fc"
					}, {
						"EventHandlerArea": "Data",
						"EventHandlerId": "Things_MtpFileRepository",
						"EventHandlerService": "GetFileListing",
						"EventTriggerArea": "Mashup",
						"EventTriggerEvent": "Loaded",
						"EventTriggerId": "mashup-root",
						"EventTriggerSection": "",
						"Id": "51dd8751-ea0e-4ee2-92a7-3ebbb672a8c9"
					}, {
						"EventHandlerArea": "UI",
						"EventHandlerId": "mxdiagram-4",
						"EventHandlerService": "GenerateXML",
						"EventTriggerArea": "UI",
						"EventTriggerEvent": "Clicked",
						"EventTriggerId": "button-28",
						"EventTriggerSection": "",
						"Id": "13d5c3b4-2a1f-4da2-8672-86d98e25c4d6"
					}, {
						"EventHandlerArea": "Data",
						"EventHandlerId": "Things_MtpThingModelOptions",
						"EventHandlerService": "JsonMtpToThingModel",
						"EventTriggerArea": "UI",
						"EventTriggerEvent": "Clicked",
						"EventTriggerId": "button-55",
						"EventTriggerSection": "",
						"Id": "6e7a1499-c47c-4b49-a150-9eb6b1ad1c80"
					}, {
						"EventHandlerArea": "Data",
						"EventHandlerId": "Things_MtpThingModelOptions",
						"EventHandlerService": "CollectDataForMtp",
						"EventTriggerArea": "UI",
						"EventTriggerEvent": "Refresh",
						"EventTriggerId": "autorefresh-56",
						"EventTriggerSection": "",
						"Id": "59a0b41f-a46c-4f65-be88-ac84db6f2a58"
					}, {
						"EventHandlerArea": "Data",
						"EventHandlerId": "Things_MtpThingModelOptions",
						"EventHandlerService": "SaveMtpModule",
						"EventTriggerArea": "UI",
						"EventTriggerEvent": "Clicked",
						"EventTriggerId": "button-57",
						"EventTriggerSection": "",
						"Id": "47af40e8-9e28-4e8b-85c4-d8f58f0cd735"
					}, {
						"EventHandlerArea": "UI",
						"EventHandlerId": "mxdiagram-4",
						"EventHandlerService": "UpdateGraph",
						"EventTriggerArea": "UI",
						"EventTriggerEvent": "Clicked",
						"EventTriggerId": "button-44",
						"EventTriggerSection": "",
						"Id": "33674b86-60d1-486e-acff-d96dbe3743b0"
					}, {
						"EventHandlerArea": "UI",
						"EventHandlerId": "navigation-60",
						"EventHandlerService": "Navigate",
						"EventTriggerArea": "UI",
						"EventTriggerEvent": "CellDoubleClicked",
						"EventTriggerId": "mxdiagram-4",
						"EventTriggerSection": "",
						"Id": "507a4f54-d0a2-4b76-b1dc-649180d33d81"
					}
				],
				"RunTimePermissions": {
					"permissions": []
				},
				"UI": {
					"Properties": {
						"AddToDashboardButton": "SimplePlus",
						"AddToDashboardButtonStyle": "DefaultAddToDashboardButtonStyle",
						"Area": "Mashup",
						"BGImage": "",
						"BGImageRepeat": "no-repeat",
						"BGImageSize": "auto",
						"Columns": 0,
						"ConfigureGadgetButton": "SimpleGear",
						"ConfigureGadgetButtonStyle": "DefaultConfigureGadgetButtonStyle",
						"DisplayName": "Mashup",
						"EnableParameterEditing": false,
						"Height": 618,
						"Id": "mashup-root",
						"IgnoreWarningsInViewMashup": false,
						"IsPrintLayout": false,
						"Left": 0,
						"MashupToEditGadget": "DefaultMashupToEditGadget",
						"MinHeight": 0,
						"MinWidth": 0,
						"ResponsiveLayout": true,
						"Rows": 0,
						"ShowDataLoading": true,
						"Style": "DefaultMashupStyle",
						"StyleTheme": "Base Theme",
						"Title": "",
						"TitleBar": false,
						"TitleBarStyle": "DefaultTitleBarStyle",
						"TitleBarText": "Gadget Title Here",
						"Top": 0,
						"Type": "mashup",
						"UseTheme": false,
						"UseThemeForHybrids": false,
						"Visible": true,
						"Width": 1024,
						"Z-index": 10,
						"__TypeDisplayName": "Mashup",
						"flex-grow": 0,
						"flex-shrink": 0,
						"id_index": 62,
						"supportsAutoResize": true
					},
					"Widgets": [{
							"Properties": {
								"Area": "UI",
								"Columns": 0,
								"DisplayName": "layout-1",
								"Footer": false,
								"FooterHeight": 0,
								"Header": true,
								"HeaderHeight": 100,
								"Id": "layout-1",
								"IncludeSpacingInFixedAreas": false,
								"IsPrintLayout": false,
								"Left": 500,
								"LeftSidebar": false,
								"LeftSidebarWidth": 0,
								"Orientation": "vertical",
								"PctColumn1": 50,
								"PctColumn2": 50,
								"PctColumn3": 1,
								"PctColumn4": 1,
								"PctColumn5": 1,
								"PctColumn6": 1,
								"PctColumn7": 1,
								"PctColumn8": 1,
								"PctRow1": 100,
								"PctRow2": 0,
								"PctRow3": 0,
								"PctRow4": 0,
								"PctRow5": 0,
								"PctRow6": 0,
								"PctRow7": 0,
								"PctRow8": 0,
								"PrintMarginLeftRight": 0.5,
								"PrintMarginTopBottom": 0.5,
								"PrintWidth": 650,
								"ResponsiveLayout": true,
								"RightSidebar": false,
								"RightSidebarWidth": 0,
								"Rows": 1,
								"ShowDataLoading": true,
								"Spacing": 2,
								"Top": 160,
								"Type": "layout",
								"Visible": true,
								"Z-index": 10,
								"__TypeDisplayName": "Layout",
								"flex-grow": 0,
								"flex-shrink": 0
							},
							"Widgets": [{
									"Properties": {
										"AnimateExpandCollapse": true,
										"Area": "UI",
										"BGImageRepeat": "no-repeat",
										"BGImageSize": "auto",
										"DisplayName": "Header",
										"ExpandCollapseTabLocation": "outside",
										"Expanded": false,
										"Id": "container-2",
										"MinHeight": 0,
										"MinWidth": 0,
										"Overlay": true,
										"OverlayIsTransparent": true,
										"ResponsiveLayout": true,
										"ShowDataLoading": true,
										"ShowExpandCollapseTab": false,
										"Style": "DefaultContainerStyle",
										"TabCollapseStyle": "DefaultTabCollapseStyle",
										"TabExpandStyle": "DefaultTabExpandStyle",
										"TabHeight": 36,
										"TabLocation": "center",
										"TabOffset": 0,
										"TabWidth": 36,
										"Type": "container",
										"Visible": true,
										"Z-index": 10,
										"__TypeDisplayName": "Container",
										"userCannotRemove": true
									},
									"Widgets": [{
											"Properties": {
												"Area": "UI",
												"DisplayName": "panel-6",
												"Height": 200,
												"HideScrollbars": false,
												"HorizontalAnchor": "left",
												"Id": "panel-6",
												"Left": 185,
												"ResponsiveLayout": true,
												"ShowDataLoading": true,
												"Style": "DefaultContainerStyle",
												"Top": 75,
												"Type": "panel",
												"VerticalAnchor": "top",
												"Visible": true,
												"Width": 300,
												"Z-index": 10,
												"__TypeDisplayName": "Panel"
											},
											"Widgets": []
										}
									]
								}, {
									"Properties": {
										"AnimateExpandCollapse": true,
										"Area": "UI",
										"BGImageRepeat": "no-repeat",
										"BGImageSize": "auto",
										"DisplayName": "Row 1",
										"ExpandCollapseTabLocation": "outside",
										"Expanded": true,
										"Id": "container-3",
										"MinHeight": 0,
										"MinWidth": 0,
										"Overlay": false,
										"OverlayIsTransparent": false,
										"ResponsiveLayout": true,
										"ShowDataLoading": true,
										"ShowExpandCollapseTab": false,
										"Style": "DefaultContainerStyle",
										"TabCollapseStyle": "DefaultTabCollapseStyle",
										"TabExpandStyle": "DefaultTabExpandStyle",
										"TabHeight": 36,
										"TabLocation": "center",
										"TabOffset": 0,
										"TabWidth": 36,
										"Type": "container",
										"Visible": true,
										"Z-index": 10,
										"__TypeDisplayName": "Container",
										"userCannotRemove": true
									},
									"Widgets": [{
											"Properties": {
												"Area": "UI",
												"Columns": 2,
												"DisplayName": "layout-17",
												"Footer": false,
												"FooterHeight": 0,
												"Header": false,
												"HeaderHeight": 0,
												"Id": "layout-17",
												"IncludeSpacingInFixedAreas": false,
												"IsPrintLayout": false,
												"Left": 435,
												"LeftSidebar": true,
												"LeftSidebarWidth": 100,
												"Orientation": "horizontal",
												"PctColumn1": 50,
												"PctColumn2": 50,
												"PctColumn3": 1,
												"PctColumn4": 1,
												"PctColumn5": 1,
												"PctColumn6": 1,
												"PctColumn7": 1,
												"PctColumn8": 1,
												"PctRow1": 50,
												"PctRow2": 50,
												"PctRow3": 0,
												"PctRow4": 0,
												"PctRow5": 0,
												"PctRow6": 0,
												"PctRow7": 0,
												"PctRow8": 0,
												"PrintMarginLeftRight": 0.5,
												"PrintMarginTopBottom": 0.5,
												"PrintWidth": 650,
												"ResponsiveLayout": true,
												"RightSidebar": false,
												"RightSidebarWidth": 0,
												"Rows": 0,
												"ShowDataLoading": true,
												"Spacing": 2,
												"Top": 145,
												"Type": "layout",
												"Visible": true,
												"Z-index": 10,
												"__TypeDisplayName": "Layout"
											},
											"Widgets": [{
													"Properties": {
														"AnimateExpandCollapse": true,
														"Area": "UI",
														"BGImageRepeat": "no-repeat",
														"BGImageSize": "auto",
														"DisplayName": "Left Sidebar",
														"ExpandCollapseTabLocation": "outside",
														"Expanded": true,
														"Id": "container-24",
														"MinHeight": 0,
														"MinWidth": 0,
														"Overlay": false,
														"OverlayIsTransparent": false,
														"ResponsiveLayout": true,
														"ShowDataLoading": true,
														"ShowExpandCollapseTab": false,
														"Style": "DefaultContainerStyle",
														"TabCollapseStyle": "DefaultTabCollapseStyle",
														"TabExpandStyle": "DefaultTabExpandStyle",
														"TabHeight": 36,
														"TabLocation": "center",
														"TabOffset": 0,
														"TabWidth": 36,
														"Type": "container",
														"Visible": true,
														"Z-index": 10,
														"__TypeDisplayName": "Container",
														"userCannotRemove": true
													},
													"Widgets": [{
															"Properties": {
																"Alignment": "left",
																"Area": "UI",
																"AutoSelectFirstRow": false,
																"ClearIfNoSelection": false,
																"ComboDropdownButtonStyle": "DefaultComboDropdownButtonStyle",
																"ComboEnableCheckbox": false,
																"ComboItemHighlightedStyle": "DefaultComboItemHighlightedStyle",
																"ComboTextboxStyle": "DefaultComboTextboxStyle",
																"DisableSelectedStyle": false,
																"DisplayField": "name",
																"DisplayName": "dhxlist-25",
																"DropdownButtonStyle": "DefaultDropdownButtonStyle",
																"DropdownSelectedStyle": "DefaultDropdownSelectedStyle",
																"DropdownStyle": "DefaultDropdownStyle",
																"EnableKeyboardSelections": true,
																"EnableToolTips": true,
																"Height": 170,
																"HeightOfDropdownView": 170,
																"Id": "dhxlist-25",
																"Label": "",
																"LabelAlignment": "left",
																"Left": 40,
																"ListBackgroundStyle": "DefaultListBackgroundStyle",
																"ListFocusStyle": "DefaultFocusStyle",
																"ListItemAlternateStyle": "DefaultListItemAlternateStyle",
																"ListItemHoverStyle": "DefaultListItemHoverStyle",
																"ListItemSelectedStyle": "DefaultListItemSelectedStyle",
																"ListItemStyle": "DefaultListItemStyle",
																"ListLabelStyle": "DefaultWidgetLabelStyle",
																"MultiSelect": false,
																"NumberOfItemsInDropdownView": 6,
																"NumberOfItemsPerPage": 500,
																"ResponsiveLayout": true,
																"RowHeight": 28,
																"ShowDataLoading": true,
																"SingleClickSelectOnTablets": false,
																"TabSequence": -1,
																"TextIfNoSelectionType": "editable",
																"TextVerticalAlignment": 28,
																"ToolTipStyle": "DefaultTooltipStyle",
																"Top": 95,
																"Type": "dhxlist",
																"ValueField": "name",
																"View": "list",
																"Visible": true,
																"Width": 110,
																"WidthOfDropdownView": 110,
																"Z-index": 10,
																"__TypeDisplayName": "List",
																"__supportsLabel": true,
																"__supportsTooltip": true
															},
															"Widgets": []
														}
													]
												}, {
													"Properties": {
														"AnimateExpandCollapse": true,
														"Area": "UI",
														"BGImageRepeat": "no-repeat",
														"BGImageSize": "auto",
														"DisplayName": "Column 1",
														"ExpandCollapseTabLocation": "outside",
														"Expanded": true,
														"Id": "container-18",
														"MinHeight": 0,
														"MinWidth": 0,
														"Overlay": false,
														"OverlayIsTransparent": false,
														"ResponsiveLayout": true,
														"ShowDataLoading": true,
														"ShowExpandCollapseTab": false,
														"Style": "DefaultContainerStyle",
														"TabCollapseStyle": "DefaultTabCollapseStyle",
														"TabExpandStyle": "DefaultTabExpandStyle",
														"TabHeight": 36,
														"TabLocation": "center",
														"TabOffset": 0,
														"TabWidth": 36,
														"Type": "container",
														"Visible": true,
														"Z-index": 10,
														"__TypeDisplayName": "Container",
														"userCannotRemove": true
													},
													"Widgets": [{
															"Properties": {
																"Area": "UI",
																"Columns": 0,
																"DisplayName": "layout-30",
																"Footer": true,
																"FooterHeight": 150,
																"Header": false,
																"HeaderHeight": 0,
																"Id": "layout-30",
																"IncludeSpacingInFixedAreas": false,
																"IsPrintLayout": false,
																"Left": 125,
																"LeftSidebar": false,
																"LeftSidebarWidth": 0,
																"Orientation": "vertical",
																"PctColumn1": 50,
																"PctColumn2": 50,
																"PctColumn3": 1,
																"PctColumn4": 1,
																"PctColumn5": 1,
																"PctColumn6": 1,
																"PctColumn7": 1,
																"PctColumn8": 1,
																"PctRow1": 100,
																"PctRow2": 50,
																"PctRow3": 0,
																"PctRow4": 0,
																"PctRow5": 0,
																"PctRow6": 0,
																"PctRow7": 0,
																"PctRow8": 0,
																"PrintMarginLeftRight": 0.5,
																"PrintMarginTopBottom": 0.5,
																"PrintWidth": 650,
																"ResponsiveLayout": true,
																"RightSidebar": false,
																"RightSidebarWidth": 0,
																"Rows": 1,
																"ShowDataLoading": true,
																"Spacing": 0,
																"Top": 95,
																"Type": "layout",
																"Visible": true,
																"Z-index": 10,
																"__TypeDisplayName": "Layout"
															},
															"Widgets": [{
																	"Properties": {
																		"AnimateExpandCollapse": true,
																		"Area": "UI",
																		"BGImageRepeat": "no-repeat",
																		"BGImageSize": "auto",
																		"DisplayName": "Row 1",
																		"ExpandCollapseTabLocation": "outside",
																		"Expanded": true,
																		"Id": "container-31",
																		"MinHeight": 0,
																		"MinWidth": 0,
																		"Overlay": false,
																		"OverlayIsTransparent": false,
																		"ResponsiveLayout": true,
																		"ShowDataLoading": true,
																		"ShowExpandCollapseTab": false,
																		"Style": "DefaultContainerStyle",
																		"TabCollapseStyle": "DefaultTabCollapseStyle",
																		"TabExpandStyle": "DefaultTabExpandStyle",
																		"TabHeight": 36,
																		"TabLocation": "center",
																		"TabOffset": 0,
																		"TabWidth": 36,
																		"Type": "container",
																		"Visible": true,
																		"Z-index": 10,
																		"__TypeDisplayName": "Container",
																		"userCannotRemove": true
																	},
																	"Widgets": [{
																			"Properties": {
																				"Area": "UI",
																				"AutoFit": true,
																				"AutoLayout": "None",
																				"DisplayName": "mtpHMIDiagram",
																				"EdgeStyle": "None",
																				"Height": 800,
																				"Id": "mxdiagram-4",
																				"JSONArrayGraphCells": "{}",
																				"Left": 0,
																				"MTPFilePath": "{}",
																				"ResponsiveLayout": true,
																				"ShowDataLoading": true,
																				"ShowOutline": false,
																				"ShowTools": false,
																				"Top": 0,
																				"Type": "mxdiagram",
																				"ValueDiagram": {},
																				"Visible": true,
																				"Width": 640,
																				"XMLDiagram": "{}",
																				"Z-index": 10,
																				"__TypeDisplayName": "mxGraph Diagram",
																				"mtpJson": "{}"
																			},
																			"Widgets": []
																		}
																	]
																}, {
																	"Properties": {
																		"AnimateExpandCollapse": true,
																		"Area": "UI",
																		"BGImageRepeat": "no-repeat",
																		"BGImageSize": "auto",
																		"DisplayName": "Footer",
																		"ExpandCollapseTabLocation": "outside",
																		"Expanded": true,
																		"Id": "container-33",
																		"MinHeight": 0,
																		"MinWidth": 0,
																		"Overlay": false,
																		"OverlayIsTransparent": false,
																		"ResponsiveLayout": true,
																		"ShowDataLoading": true,
																		"ShowExpandCollapseTab": false,
																		"Style": "DefaultContainerStyle",
																		"TabCollapseStyle": "DefaultTabCollapseStyle",
																		"TabExpandStyle": "DefaultTabExpandStyle",
																		"TabHeight": 36,
																		"TabLocation": "center",
																		"TabOffset": 0,
																		"TabWidth": 36,
																		"Type": "container",
																		"Visible": true,
																		"Z-index": 10,
																		"__TypeDisplayName": "Container",
																		"userCannotRemove": true
																	},
																	"Widgets": [{
																			"Properties": {
																				"Area": "UI",
																				"Columns": 2,
																				"DisplayName": "layout-20",
																				"Footer": false,
																				"FooterHeight": 0,
																				"Header": false,
																				"HeaderHeight": 0,
																				"Id": "layout-20",
																				"IncludeSpacingInFixedAreas": false,
																				"IsPrintLayout": false,
																				"Left": 25,
																				"LeftSidebar": false,
																				"LeftSidebarWidth": 0,
																				"Orientation": "horizontal",
																				"PctColumn1": 50,
																				"PctColumn2": 50,
																				"PctColumn3": 1,
																				"PctColumn4": 1,
																				"PctColumn5": 1,
																				"PctColumn6": 1,
																				"PctColumn7": 1,
																				"PctColumn8": 1,
																				"PctRow1": 50,
																				"PctRow2": 50,
																				"PctRow3": 0,
																				"PctRow4": 0,
																				"PctRow5": 0,
																				"PctRow6": 0,
																				"PctRow7": 0,
																				"PctRow8": 0,
																				"PrintMarginLeftRight": 0.5,
																				"PrintMarginTopBottom": 0.5,
																				"PrintWidth": 650,
																				"ResponsiveLayout": true,
																				"RightSidebar": false,
																				"RightSidebarWidth": 0,
																				"Rows": 2,
																				"ShowDataLoading": true,
																				"Spacing": 2,
																				"Top": 160,
																				"Type": "layout",
																				"Visible": true,
																				"Z-index": 10,
																				"__TypeDisplayName": "Layout"
																			},
																			"Widgets": [{
																					"Properties": {
																						"AnimateExpandCollapse": true,
																						"Area": "UI",
																						"BGImageRepeat": "no-repeat",
																						"BGImageSize": "auto",
																						"DisplayName": "Row",
																						"ExpandCollapseTabLocation": "outside",
																						"Expanded": true,
																						"Id": "container-21",
																						"MinHeight": 0,
																						"MinWidth": 0,
																						"Overlay": false,
																						"OverlayIsTransparent": false,
																						"ResponsiveLayout": true,
																						"ShowDataLoading": true,
																						"ShowExpandCollapseTab": false,
																						"Style": "DefaultContainerStyle",
																						"TabCollapseStyle": "DefaultTabCollapseStyle",
																						"TabExpandStyle": "DefaultTabExpandStyle",
																						"TabHeight": 36,
																						"TabLocation": "center",
																						"TabOffset": 0,
																						"TabWidth": 36,
																						"Type": "container",
																						"Visible": true,
																						"Z-index": 10,
																						"__TypeDisplayName": "Container",
																						"userCannotRemove": true
																					},
																					"Widgets": [{
																							"Properties": {
																								"Area": "UI",
																								"Columns": 0,
																								"DisplayName": "layout-34",
																								"Footer": false,
																								"FooterHeight": 0,
																								"Header": true,
																								"HeaderHeight": 15,
																								"Id": "layout-34",
																								"IncludeSpacingInFixedAreas": false,
																								"IsPrintLayout": false,
																								"Left": 185,
																								"LeftSidebar": false,
																								"LeftSidebarWidth": 0,
																								"Orientation": "vertical",
																								"PctColumn1": 50,
																								"PctColumn2": 50,
																								"PctColumn3": 1,
																								"PctColumn4": 1,
																								"PctColumn5": 1,
																								"PctColumn6": 1,
																								"PctColumn7": 1,
																								"PctColumn8": 1,
																								"PctRow1": 100,
																								"PctRow2": 0,
																								"PctRow3": 0,
																								"PctRow4": 0,
																								"PctRow5": 0,
																								"PctRow6": 0,
																								"PctRow7": 0,
																								"PctRow8": 0,
																								"PrintMarginLeftRight": 0.5,
																								"PrintMarginTopBottom": 0.5,
																								"PrintWidth": 650,
																								"ResponsiveLayout": true,
																								"RightSidebar": false,
																								"RightSidebarWidth": 0,
																								"Rows": 1,
																								"ShowDataLoading": true,
																								"Spacing": 0,
																								"Top": 25,
																								"Type": "layout",
																								"Visible": true,
																								"Z-index": 10,
																								"__TypeDisplayName": "Layout"
																							},
																							"Widgets": [{
																									"Properties": {
																										"AnimateExpandCollapse": true,
																										"Area": "UI",
																										"BGImageRepeat": "no-repeat",
																										"BGImageSize": "auto",
																										"DisplayName": "Header",
																										"ExpandCollapseTabLocation": "outside",
																										"Expanded": true,
																										"Id": "container-35",
																										"MinHeight": 0,
																										"MinWidth": 0,
																										"Overlay": false,
																										"OverlayIsTransparent": false,
																										"ResponsiveLayout": true,
																										"ShowDataLoading": true,
																										"ShowExpandCollapseTab": false,
																										"Style": "DefaultContainerStyle",
																										"TabCollapseStyle": "DefaultTabCollapseStyle",
																										"TabExpandStyle": "DefaultTabExpandStyle",
																										"TabHeight": 36,
																										"TabLocation": "center",
																										"TabOffset": 0,
																										"TabWidth": 36,
																										"Type": "container",
																										"Visible": true,
																										"Z-index": 10,
																										"__TypeDisplayName": "Container",
																										"userCannotRemove": true
																									},
																									"Widgets": []
																								}, {
																									"Properties": {
																										"AnimateExpandCollapse": true,
																										"Area": "UI",
																										"BGImageRepeat": "no-repeat",
																										"BGImageSize": "auto",
																										"DisplayName": "Row",
																										"ExpandCollapseTabLocation": "outside",
																										"Expanded": true,
																										"Id": "container-36",
																										"MinHeight": 0,
																										"MinWidth": 0,
																										"Overlay": false,
																										"OverlayIsTransparent": false,
																										"ResponsiveLayout": true,
																										"ShowDataLoading": true,
																										"ShowExpandCollapseTab": false,
																										"Style": "DefaultContainerStyle",
																										"TabCollapseStyle": "DefaultTabCollapseStyle",
																										"TabExpandStyle": "DefaultTabExpandStyle",
																										"TabHeight": 36,
																										"TabLocation": "center",
																										"TabOffset": 0,
																										"TabWidth": 36,
																										"Type": "container",
																										"Visible": true,
																										"Z-index": 10,
																										"__TypeDisplayName": "Container",
																										"userCannotRemove": true
																									},
																									"Widgets": [{
																											"Properties": {
																												"Area": "UI",
																												"DisplayName": "panel-61",
																												"Height": 200,
																												"HideScrollbars": false,
																												"HorizontalAnchor": "left",
																												"Id": "panel-61",
																												"Left": 95,
																												"ResponsiveLayout": true,
																												"ShowDataLoading": true,
																												"Style": "DefaultPanelStyle",
																												"Top": 35,
																												"Type": "panel",
																												"VerticalAnchor": "top",
																												"Visible": true,
																												"Width": 300,
																												"Z-index": 10,
																												"__TypeDisplayName": "Panel"
																											},
																											"Widgets": [{
																													"Properties": {
																														"Alignment": "left",
																														"AllowEllipsis": false,
																														"Area": "UI",
																														"DisplayName": "label-62",
																														"Height": 22,
																														"Id": "label-62",
																														"Left": 20,
																														"ResponsiveLayout": false,
																														"ShowDataLoading": true,
																														"Style": "DefaultLabelStyle",
																														"ToolTipField": "",
																														"ToolTipStyle": "DefaultTooltipStyle",
																														"Top": 35,
																														"Type": "label",
																														"Visible": true,
																														"Width": 270,
																														"Z-index": 10,
																														"__TypeDisplayName": "Label",
																														"__supportsTooltip": true
																													},
																													"Widgets": []
																												}
																											]
																										}
																									]
																								}
																							]
																						}
																					]
																				}, {
																					"Properties": {
																						"AnimateExpandCollapse": true,
																						"Area": "UI",
																						"BGImageRepeat": "no-repeat",
																						"BGImageSize": "auto",
																						"DisplayName": "Row",
																						"ExpandCollapseTabLocation": "outside",
																						"Expanded": true,
																						"Id": "container-22",
																						"MinHeight": 0,
																						"MinWidth": 0,
																						"Overlay": false,
																						"OverlayIsTransparent": false,
																						"ResponsiveLayout": true,
																						"ShowDataLoading": true,
																						"ShowExpandCollapseTab": false,
																						"Style": "DefaultContainerStyle",
																						"TabCollapseStyle": "DefaultTabCollapseStyle",
																						"TabExpandStyle": "DefaultTabExpandStyle",
																						"TabHeight": 36,
																						"TabLocation": "center",
																						"TabOffset": 0,
																						"TabWidth": 36,
																						"Type": "container",
																						"Visible": true,
																						"Z-index": 10,
																						"__TypeDisplayName": "Container",
																						"userCannotRemove": true
																					},
																					"Widgets": [{
																							"Properties": {
																								"Area": "UI",
																								"Columns": 0,
																								"DisplayName": "layout-38",
																								"Footer": false,
																								"FooterHeight": 0,
																								"Header": true,
																								"HeaderHeight": 20,
																								"Id": "layout-38",
																								"IncludeSpacingInFixedAreas": false,
																								"IsPrintLayout": false,
																								"Left": 185,
																								"LeftSidebar": false,
																								"LeftSidebarWidth": 0,
																								"Orientation": "vertical",
																								"PctColumn1": 50,
																								"PctColumn2": 50,
																								"PctColumn3": 1,
																								"PctColumn4": 1,
																								"PctColumn5": 1,
																								"PctColumn6": 1,
																								"PctColumn7": 1,
																								"PctColumn8": 1,
																								"PctRow1": 100,
																								"PctRow2": 0,
																								"PctRow3": 0,
																								"PctRow4": 0,
																								"PctRow5": 0,
																								"PctRow6": 0,
																								"PctRow7": 0,
																								"PctRow8": 0,
																								"PrintMarginLeftRight": 0.5,
																								"PrintMarginTopBottom": 0.5,
																								"PrintWidth": 650,
																								"ResponsiveLayout": true,
																								"RightSidebar": false,
																								"RightSidebarWidth": 0,
																								"Rows": 1,
																								"ShowDataLoading": true,
																								"Spacing": 0,
																								"Top": 25,
																								"Type": "layout",
																								"Visible": true,
																								"Z-index": 10,
																								"__TypeDisplayName": "Layout"
																							},
																							"Widgets": [{
																									"Properties": {
																										"AnimateExpandCollapse": true,
																										"Area": "UI",
																										"BGImageRepeat": "no-repeat",
																										"BGImageSize": "auto",
																										"DisplayName": "Header",
																										"ExpandCollapseTabLocation": "outside",
																										"Expanded": true,
																										"Id": "container-39",
																										"MinHeight": 0,
																										"MinWidth": 0,
																										"Overlay": false,
																										"OverlayIsTransparent": false,
																										"ResponsiveLayout": true,
																										"ShowDataLoading": true,
																										"ShowExpandCollapseTab": false,
																										"Style": "DefaultContainerStyle",
																										"TabCollapseStyle": "DefaultTabCollapseStyle",
																										"TabExpandStyle": "DefaultTabExpandStyle",
																										"TabHeight": 36,
																										"TabLocation": "center",
																										"TabOffset": 0,
																										"TabWidth": 36,
																										"Type": "container",
																										"Visible": true,
																										"Z-index": 10,
																										"__TypeDisplayName": "Container",
																										"userCannotRemove": true
																									},
																									"Widgets": [{
																											"Properties": {
																												"Area": "UI",
																												"DisplayName": "panel-43",
																												"Height": 200,
																												"HideScrollbars": false,
																												"HorizontalAnchor": "left",
																												"Id": "panel-43",
																												"Left": 100,
																												"ResponsiveLayout": true,
																												"ShowDataLoading": true,
																												"Style": "DefaultContainerStyle",
																												"Top": 5,
																												"Type": "panel",
																												"VerticalAnchor": "top",
																												"Visible": true,
																												"Width": 300,
																												"Z-index": 10,
																												"__TypeDisplayName": "Panel"
																											},
																											"Widgets": [{
																													"Properties": {
																														"ActiveStyle": "DefaultButtonActiveStyle",
																														"Area": "UI",
																														"CancelConfirmationButton": "button2",
																														"ConfirmationButton1Label": "Yes",
																														"ConfirmationButton2Label": "No",
																														"ConfirmationPrompt": "Do Action?",
																														"ConfirmationRequired": false,
																														"ConfirmationTitle": "Confirm Action",
																														"ContextId": "",
																														"DefaultConfirmationButton": "button1",
																														"Disabled": false,
																														"DisabledStyle": "DefaultButtonDisabledStyle",
																														"DisplayName": "button-28",
																														"FocusStyle": "DefaultButtonFocusStyle",
																														"Height": 20,
																														"HoverStyle": "DefaultButtonHoverStyle",
																														"IconAlignment": "left",
																														"Id": "button-28",
																														"Label": "↓",
																														"Left": 210,
																														"ResponsiveLayout": false,
																														"RoundedCorners": true,
																														"ShowDataLoading": true,
																														"SingleClickSelectOnTablets": true,
																														"Style": "DefaultButtonStyle",
																														"TabSequence": 0,
																														"ToolTipField": "",
																														"ToolTipStyle": "DefaultTooltipStyle",
																														"Top": 0,
																														"Type": "button",
																														"Visible": true,
																														"Width": 45,
																														"Z-index": 10,
																														"__TypeDisplayName": "Button",
																														"__supportsTooltip": true
																													},
																													"Widgets": []
																												}, {
																													"Properties": {
																														"ActiveStyle": "DefaultButtonActiveStyle",
																														"Area": "UI",
																														"CancelConfirmationButton": "button2",
																														"ConfirmationButton1Label": "Yes",
																														"ConfirmationButton2Label": "No",
																														"ConfirmationPrompt": "Do Action?",
																														"ConfirmationRequired": false,
																														"ConfirmationTitle": "Confirm Action",
																														"ContextId": "",
																														"DefaultConfirmationButton": "button1",
																														"Disabled": false,
																														"DisabledStyle": "DefaultButtonDisabledStyle",
																														"DisplayName": "Update graph",
																														"FocusStyle": "DefaultButtonFocusStyle",
																														"Height": 20,
																														"HoverStyle": "DefaultButtonHoverStyle",
																														"IconAlignment": "left",
																														"Id": "button-44",
																														"Label": "↑",
																														"Left": 160,
																														"ResponsiveLayout": false,
																														"RoundedCorners": true,
																														"ShowDataLoading": true,
																														"SingleClickSelectOnTablets": true,
																														"Style": "DefaultButtonStyle",
																														"TabSequence": 0,
																														"ToolTipField": "",
																														"ToolTipStyle": "DefaultTooltipStyle",
																														"Top": 0,
																														"Type": "button",
																														"Visible": true,
																														"Width": 45,
																														"Z-index": 10,
																														"__TypeDisplayName": "Button",
																														"__supportsTooltip": true
																													},
																													"Widgets": []
																												}
																											]
																										}
																									]
																								}, {
																									"Properties": {
																										"AnimateExpandCollapse": true,
																										"Area": "UI",
																										"BGImageRepeat": "no-repeat",
																										"BGImageSize": "auto",
																										"DisplayName": "Row",
																										"ExpandCollapseTabLocation": "outside",
																										"Expanded": true,
																										"Id": "container-41",
																										"MinHeight": 0,
																										"MinWidth": 0,
																										"Overlay": false,
																										"OverlayIsTransparent": false,
																										"ResponsiveLayout": true,
																										"ShowDataLoading": true,
																										"ShowExpandCollapseTab": false,
																										"Style": "DefaultContainerStyle",
																										"TabCollapseStyle": "DefaultTabCollapseStyle",
																										"TabExpandStyle": "DefaultTabExpandStyle",
																										"TabHeight": 36,
																										"TabLocation": "center",
																										"TabOffset": 0,
																										"TabWidth": 36,
																										"Type": "container",
																										"Visible": true,
																										"Z-index": 10,
																										"__TypeDisplayName": "Container",
																										"userCannotRemove": true
																									},
																									"Widgets": [{
																											"Properties": {
																												"Area": "UI",
																												"DisplayName": "textarea-58",
																												"Height": 200,
																												"Id": "textarea-58",
																												"InnerShadow": false,
																												"Label": "",
																												"LabelAlignment": "left",
																												"Left": 210,
																												"ReadOnly": true,
																												"ResponsiveLayout": true,
																												"ShowDataLoading": true,
																												"Style": "DefaultTextAreaStyle",
																												"TabSequence": 0,
																												"Text": "",
																												"TextareaFocusStyle": "DefaultFocusStyle",
																												"TextareaLabelStyle": "DefaultWidgetLabelStyle",
																												"ToolTipField": "",
																												"ToolTipStyle": "DefaultTooltipStyle",
																												"Top": 0,
																												"Type": "textarea",
																												"Visible": true,
																												"Width": 300,
																												"Z-index": 10,
																												"__TypeDisplayName": "TextArea",
																												"__supportsLabel": true,
																												"__supportsTooltip": true
																											},
																											"Widgets": []
																										}
																									]
																								}
																							]
																						}
																					]
																				}
																			]
																		}
																	]
																}
															]
														}
													]
												}, {
													"Properties": {
														"AnimateExpandCollapse": true,
														"Area": "UI",
														"BGImageRepeat": "no-repeat",
														"BGImageSize": "auto",
														"DisplayName": "Column",
														"ExpandCollapseTabLocation": "outside",
														"Expanded": true,
														"Id": "container-26",
														"MinHeight": 0,
														"MinWidth": 0,
														"Overlay": false,
														"OverlayIsTransparent": false,
														"ResponsiveLayout": true,
														"ShowDataLoading": true,
														"ShowExpandCollapseTab": false,
														"Style": "DefaultContainerStyle",
														"TabCollapseStyle": "DefaultTabCollapseStyle",
														"TabExpandStyle": "DefaultTabExpandStyle",
														"TabHeight": 36,
														"TabLocation": "center",
														"TabOffset": 0,
														"TabWidth": 36,
														"Type": "container",
														"Visible": true,
														"Z-index": 10,
														"__TypeDisplayName": "Container",
														"userCannotRemove": true
													},
													"Widgets": [{
															"Properties": {
																"Area": "UI",
																"Columns": 0,
																"DisplayName": "layout-45",
																"Footer": false,
																"FooterHeight": 0,
																"Header": true,
																"HeaderHeight": 100,
																"Id": "layout-45",
																"IncludeSpacingInFixedAreas": false,
																"IsPrintLayout": false,
																"Left": 345,
																"LeftSidebar": false,
																"LeftSidebarWidth": 0,
																"Orientation": "vertical",
																"PctColumn1": 50,
																"PctColumn2": 50,
																"PctColumn3": 1,
																"PctColumn4": 1,
																"PctColumn5": 1,
																"PctColumn6": 1,
																"PctColumn7": 1,
																"PctColumn8": 1,
																"PctRow1": 100,
																"PctRow2": 0,
																"PctRow3": 0,
																"PctRow4": 0,
																"PctRow5": 0,
																"PctRow6": 0,
																"PctRow7": 0,
																"PctRow8": 0,
																"PrintMarginLeftRight": 0.5,
																"PrintMarginTopBottom": 0.5,
																"PrintWidth": 650,
																"ResponsiveLayout": true,
																"RightSidebar": false,
																"RightSidebarWidth": 0,
																"Rows": 1,
																"ShowDataLoading": true,
																"Spacing": 2,
																"Top": 205,
																"Type": "layout",
																"Visible": true,
																"Z-index": 10,
																"__TypeDisplayName": "Layout"
															},
															"Widgets": [{
																	"Properties": {
																		"AnimateExpandCollapse": true,
																		"Area": "UI",
																		"BGImageRepeat": "no-repeat",
																		"BGImageSize": "auto",
																		"DisplayName": "Header",
																		"ExpandCollapseTabLocation": "outside",
																		"Expanded": true,
																		"Id": "container-46",
																		"MinHeight": 0,
																		"MinWidth": 0,
																		"Overlay": false,
																		"OverlayIsTransparent": false,
																		"ResponsiveLayout": true,
																		"ShowDataLoading": true,
																		"ShowExpandCollapseTab": false,
																		"Style": "DefaultContainerStyle",
																		"TabCollapseStyle": "DefaultTabCollapseStyle",
																		"TabExpandStyle": "DefaultTabExpandStyle",
																		"TabHeight": 36,
																		"TabLocation": "center",
																		"TabOffset": 0,
																		"TabWidth": 36,
																		"Type": "container",
																		"Visible": true,
																		"Z-index": 10,
																		"__TypeDisplayName": "Container",
																		"userCannotRemove": true
																	},
																	"Widgets": [{
																			"Properties": {
																				"Area": "UI",
																				"DisplayName": "panel-49",
																				"Height": 200,
																				"HideScrollbars": false,
																				"HorizontalAnchor": "left",
																				"Id": "panel-49",
																				"Left": 20,
																				"ResponsiveLayout": true,
																				"ShowDataLoading": true,
																				"Style": "DefaultPanelStyle",
																				"Top": 20,
																				"Type": "panel",
																				"VerticalAnchor": "top",
																				"Visible": true,
																				"Width": 300,
																				"Z-index": 10,
																				"__TypeDisplayName": "Panel"
																			},
																			"Widgets": [{
																					"Properties": {
																						"Area": "UI",
																						"DisplayName": "entitypicker-50",
																						"EntityType": "ThingTemplates",
																						"FocusStyle": "DefaultFocusStyle",
																						"Height": 30,
																						"Id": "entitypicker-50",
																						"IncludeSystemObjects": true,
																						"Left": 20,
																						"PlaceholderText": "Select thing template",
																						"ResponsiveLayout": false,
																						"SearchIncludesDescriptions": true,
																						"SearchTerm": "",
																						"ShowAdvanced": true,
																						"ShowDataLoading": true,
																						"TabSequence": 0,
																						"ThingTemplate": "RemoteThing",
																						"Top": 10,
																						"Type": "entitypicker",
																						"UseMostRecentlyUsed": true,
																						"Visible": true,
																						"Width": 175,
																						"Z-index": 10,
																						"__TypeDisplayName": "Entity Picker"
																					},
																					"Widgets": []
																				}, {
																					"Properties": {
																						"Area": "UI",
																						"DisplayName": "entitypicker-51",
																						"EntityType": "Things",
																						"FocusStyle": "DefaultFocusStyle",
																						"Height": 30,
																						"Id": "entitypicker-51",
																						"IncludeSystemObjects": false,
																						"Left": 20,
																						"PlaceholderText": "Select industrial gateway",
																						"ResponsiveLayout": false,
																						"SearchIncludesDescriptions": true,
																						"SearchTerm": "",
																						"ShowAdvanced": true,
																						"ShowDataLoading": true,
																						"TabSequence": 0,
																						"ThingTemplate": "IndustrialGateway",
																						"Top": 50,
																						"Type": "entitypicker",
																						"UseMostRecentlyUsed": true,
																						"Visible": true,
																						"Width": 175,
																						"Z-index": 10,
																						"__TypeDisplayName": "Entity Picker"
																					},
																					"Widgets": []
																				}, {
																					"Properties": {
																						"Area": "UI",
																						"CursorPosition": 0,
																						"DefaultTextboxFocusStyle": "DefaultFocusStyle",
																						"DisplayName": "textbox-52",
																						"Height": 24,
																						"Id": "textbox-52",
																						"InnerShadow": false,
																						"Label": "",
																						"LabelAlignment": "left",
																						"Left": 220,
																						"MaskInputCharacters": false,
																						"PlaceholderText": "EntityPrefix",
																						"ReadOnly": false,
																						"ResponsiveLayout": false,
																						"ShowDataLoading": true,
																						"Style": "DefaultTextBoxStyle",
																						"TabSequence": 0,
																						"Text": "",
																						"TextAlign": "left",
																						"TextboxLabelStyle": "DefaultWidgetLabelStyle",
																						"ToolTipField": "",
																						"ToolTipStyle": "DefaultTooltipStyle",
																						"Top": 10,
																						"Type": "textbox",
																						"Visible": true,
																						"Width": 200,
																						"Z-index": 10,
																						"__TypeDisplayName": "TextBox",
																						"__supportsLabel": true,
																						"__supportsTooltip": true
																					},
																					"Widgets": []
																				}, {
																					"Properties": {
																						"Area": "UI",
																						"DisplayName": "tagpicker-54",
																						"Height": 18,
																						"Id": "tagpicker-54",
																						"Left": 225,
																						"MultiSelect": true,
																						"ResponsiveLayout": false,
																						"ShowDataLoading": true,
																						"TagType": "ModelTags",
																						"Top": 45,
																						"Type": "tagpicker",
																						"Visible": true,
																						"VocabularyRestriction": "",
																						"Width": 35,
																						"Z-index": 10,
																						"__TypeDisplayName": "Tag Picker"
																					},
																					"Widgets": []
																				}, {
																					"Properties": {
																						"ActiveStyle": "DefaultButtonActiveStyle",
																						"Area": "UI",
																						"CancelConfirmationButton": "button2",
																						"ConfirmationButton1Label": "Yes",
																						"ConfirmationButton2Label": "No",
																						"ConfirmationPrompt": "Do Action?",
																						"ConfirmationRequired": false,
																						"ConfirmationTitle": "Confirm Action",
																						"ContextId": "",
																						"DefaultConfirmationButton": "button1",
																						"Disabled": false,
																						"DisabledStyle": "DefaultButtonDisabledStyle",
																						"DisplayName": "button-55",
																						"FocusStyle": "DefaultButtonFocusStyle",
																						"Height": 30,
																						"HoverStyle": "DefaultButtonHoverStyle",
																						"IconAlignment": "left",
																						"Id": "button-55",
																						"Label": "Create ThingModel",
																						"Left": 325,
																						"ResponsiveLayout": false,
																						"RoundedCorners": true,
																						"ShowDataLoading": true,
																						"SingleClickSelectOnTablets": true,
																						"Style": "DefaultButtonStyle",
																						"TabSequence": 0,
																						"ToolTipField": "",
																						"ToolTipStyle": "DefaultTooltipStyle",
																						"Top": 45,
																						"Type": "button",
																						"Visible": true,
																						"Width": 90,
																						"Z-index": 10,
																						"__TypeDisplayName": "Button",
																						"__supportsTooltip": true
																					},
																					"Widgets": []
																				}, {
																					"Properties": {
																						"ActiveStyle": "DefaultButtonActiveStyle",
																						"Area": "UI",
																						"AutoRefresh": false,
																						"AutoRefreshTabSequence": 0,
																						"DisplayName": "autorefresh-56",
																						"FocusStyle": "DefaultButtonFocusStyle",
																						"Height": 28,
																						"HoverStyle": "DefaultButtonHoverStyle",
																						"IconAlignment": "right",
																						"Id": "autorefresh-56",
																						"Label": "Test Data",
																						"Left": 440,
																						"RefreshInterval": 30,
																						"RefreshNowTabSequence": 0,
																						"RefreshToggleLabel": "On",
																						"RefreshToggleLabelOff": "Off",
																						"RefreshToggleSliderStyle": "DefaultAutoRefreshToggleSliderStyle",
																						"RefreshToggleStyle": "DefaultAutoRefreshToggleStyle",
																						"RefreshToggleStyleOff": "DefaultAutoRefreshToggleOffStyle",
																						"ResponsiveLayout": false,
																						"ShowControls": true,
																						"ShowDataLoading": true,
																						"Style": "DefaultButtonStyle",
																						"Top": 10,
																						"Type": "autorefresh",
																						"UseTheme": false,
																						"Visible": true,
																						"Width": 125,
																						"Z-index": 10,
																						"__TypeDisplayName": "Auto Refresh"
																					},
																					"Widgets": []
																				}, {
																					"Properties": {
																						"ActiveStyle": "DefaultButtonActiveStyle",
																						"Area": "UI",
																						"CancelConfirmationButton": "button2",
																						"ConfirmationButton1Label": "Yes",
																						"ConfirmationButton2Label": "No",
																						"ConfirmationPrompt": "Do Action?",
																						"ConfirmationRequired": false,
																						"ConfirmationTitle": "Confirm Action",
																						"ContextId": "",
																						"DefaultConfirmationButton": "button1",
																						"Disabled": false,
																						"DisabledStyle": "DefaultButtonDisabledStyle",
																						"DisplayName": "button-57",
																						"FocusStyle": "DefaultButtonFocusStyle",
																						"Height": 30,
																						"HoverStyle": "DefaultButtonHoverStyle",
																						"IconAlignment": "left",
																						"Id": "button-57",
																						"Label": "Save Definiton",
																						"Left": 420,
																						"ResponsiveLayout": false,
																						"RoundedCorners": true,
																						"ShowDataLoading": true,
																						"SingleClickSelectOnTablets": true,
																						"Style": "DefaultButtonStyle",
																						"TabSequence": 0,
																						"ToolTipField": "",
																						"ToolTipStyle": "DefaultTooltipStyle",
																						"Top": 45,
																						"Type": "button",
																						"Visible": true,
																						"Width": 90,
																						"Z-index": 10,
																						"__TypeDisplayName": "Button",
																						"__supportsTooltip": true
																					},
																					"Widgets": []
																				}, {
																					"Properties": {
																						"Alignment": "center",
																						"Area": "UI",
																						"ClickOutsideToClose": false,
																						"CustomClass": "green-btn",
																						"DisplayName": "navigation-60",
																						"FixedPopupHeight": 0,
																						"FixedPopupWidth": 0,
																						"Height": 30,
																						"Icon": "",
																						"IconAlignment": "left",
																						"Id": "navigation-60",
																						"Left": 605,
																						"MashupName": "MXGraph.Settings.Mashup",
																						"MashupParameters": [{
																								"BaseType": "INFOTABLE",
																								"Description": "",
																								"ParameterName": "MappingList",
																								"ParmDef": {
																									"aspects": {
																										"bindingDirection": "IN",
																										"dataShape": "MXgraph.ShapeList.DataShape",
																										"isMandatory": "false",
																										"ordinal": "0"
																									},
																									"baseType": "INFOTABLE",
																									"description": "",
																									"name": "MappingList",
																									"ordinal": 0
																								}
																							}
																						],
																						"MessageToShow": "Mashup must be selected",
																						"ModalPopupOpacity": 0.5,
																						"NavigationActiveStyle": "DefaultNavigationActiveStyle",
																						"NavigationFocusStyle": "DefaultNavigationFocusStyle",
																						"NavigationHoverStyle": "DefaultNavigationHoverStyle",
																						"PopupScrolling": "auto",
																						"PopupTitle": "",
																						"PopupTitleStyle": "DefaultPopupTitleStyle",
																						"ReloadOnReplace": false,
																						"ResponsiveLayout": false,
																						"RoundedCorners": true,
																						"ShowCloseButton": true,
																						"ShowDataLoading": true,
																						"ShowMessageIfNoMashup": false,
																						"SingleClickSelectOnTablets": true,
																						"Style": "DefaultNavigationStyle",
																						"TabSequence": 0,
																						"TargetWindow": "popup",
																						"Text": "Settings",
																						"ToolTipField": "",
																						"ToolTipStyle": "DefaultTooltipStyle",
																						"Top": 45,
																						"Transparent": false,
																						"Type": "navigation",
																						"UseTheme": false,
																						"Visible": true,
																						"Width": 95,
																						"Z-index": 10,
																						"__TypeDisplayName": "Navigation",
																						"__supportsTooltip": true
																					},
																					"Widgets": []
																				}
																			]
																		}
																	]
																}, {
																	"Properties": {
																		"AnimateExpandCollapse": true,
																		"Area": "UI",
																		"BGImageRepeat": "no-repeat",
																		"BGImageSize": "auto",
																		"DisplayName": "Row 1",
																		"ExpandCollapseTabLocation": "outside",
																		"Expanded": true,
																		"Id": "container-47",
																		"MinHeight": 0,
																		"MinWidth": 0,
																		"Overlay": false,
																		"OverlayIsTransparent": false,
																		"ResponsiveLayout": true,
																		"ShowDataLoading": true,
																		"ShowExpandCollapseTab": false,
																		"Style": "DefaultContainerStyle",
																		"TabCollapseStyle": "DefaultTabCollapseStyle",
																		"TabExpandStyle": "DefaultTabExpandStyle",
																		"TabHeight": 36,
																		"TabLocation": "center",
																		"TabOffset": 0,
																		"TabWidth": 36,
																		"Type": "container",
																		"Visible": true,
																		"Z-index": 10,
																		"__TypeDisplayName": "Container",
																		"userCannotRemove": true
																	},
																	"Widgets": [{
																			"Properties": {
																				"AlignHeader": false,
																				"Area": "UI",
																				"AutoSelectFirstRow": false,
																				"CellTextWrapping": false,
																				"ColumnFormat": {
																					"formatInfo": [{
																							"Align": "left",
																							"AllowEdit": false,
																							"FieldName": "isSystemObject",
																							"FormatOptions": {
																								"FormatString": "checkbox",
																								"renderer": "BOOLEAN"
																							},
																							"Title": "isSystemObject",
																							"ValidationExpression": "",
																							"ValidationMessage": "",
																							"Width": "auto"
																						}, {
																							"Align": "left",
																							"AllowEdit": false,
																							"FieldName": "name",
																							"FormatOptions": {
																								"FormatString": "full",
																								"renderer": "STRING"
																							},
																							"Title": "name",
																							"ValidationExpression": "",
																							"ValidationMessage": "",
																							"Width": "auto"
																						}, {
																							"Align": "left",
																							"AllowEdit": false,
																							"FieldName": "description",
																							"FormatOptions": {
																								"FormatString": "full",
																								"renderer": "STRING"
																							},
																							"Title": "description",
																							"ValidationExpression": "",
																							"ValidationMessage": "",
																							"Width": "auto"
																						}, {
																							"Align": "left",
																							"AllowEdit": false,
																							"FieldName": "homeMashup",
																							"FormatOptions": {
																								"FormatString": "full",
																								"renderer": "STRING"
																							},
																							"Title": "homeMashup",
																							"ValidationExpression": "",
																							"ValidationMessage": "",
																							"Width": "auto"
																						}, {
																							"Align": "left",
																							"AllowEdit": false,
																							"FieldName": "avatar",
																							"FormatOptions": {
																								"FormatString": "image",
																								"renderer": "IMAGELINK"
																							},
																							"Title": "avatar",
																							"ValidationExpression": "",
																							"ValidationMessage": "",
																							"Width": "auto"
																						}, {
																							"Align": "left",
																							"AllowEdit": false,
																							"FieldName": "tags",
																							"FormatOptions": {
																								"FormatString": "plain",
																								"renderer": "TAGS"
																							},
																							"Title": "tags",
																							"ValidationExpression": "",
																							"ValidationMessage": "",
																							"Width": "auto"
																						}
																					]
																				},
																				"CurrentScrollTop": 0,
																				"DisplayName": "dhxgrid-48",
																				"FocusStyle": "DefaultFocusStyle",
																				"GridBackgroundStyle": "DefaultGridBackgroundStyle",
																				"GridEditableFieldStyle": "DefaultGridEditableFieldStyle",
																				"GridHeaderStyle": "DefaultGridHeaderStyle",
																				"GridHeaderTextCase": "capitalize",
																				"GridInvalidFieldStyle": "DefaultGridInvalidFieldStyle",
																				"Height": 200,
																				"Id": "dhxgrid-48",
																				"IsEditable": false,
																				"IsPrintLayout": false,
																				"Left": 240,
																				"MultiSelect": false,
																				"ResponsiveLayout": true,
																				"RowAlternateBackgroundStyle": "DefaultRowAlternateBackgroundStyle",
																				"RowBackgroundStyle": "DefaultRowBackgroundStyle",
																				"RowFormat_StateParameters": [],
																				"RowHeight": 30,
																				"RowHoverStyle": "DefaultRowHoverStyle",
																				"RowSelectedStyle": "DefaultRowSelectedStyle",
																				"ScrollTop": 0,
																				"ShowAllColumns": false,
																				"ShowDataLoading": true,
																				"TabSequence": 0,
																				"Top": 130,
																				"Type": "dhxgrid",
																				"Visible": true,
																				"Width": 400,
																				"Z-index": 10,
																				"__TypeDisplayName": "Grid"
																			},
																			"Widgets": []
																		}
																	]
																}
															]
														}
													]
												}
											]
										}
									]
								}
							]
						}
					]
				},
				"mashupType": "mashup"
			}
			]]></mashupContent>
			<preview/>
		</Mashup>
		<Mashup aspect.isResponsive="true" aspect.mashupType="mashup" columns="0.0" description="" documentationContent="" homeMashup="" lastModifiedDate="2019-08-12T14:55:10.970+03:00" name="MXGraph.Settings.Mashup" projectName="MTP" rows="0.0" tags="">
			<Owner name="Administrator" type="User"/>
			<avatar/>
			<DesignTimePermissions>
				<Create/>
				<Read/>
				<Update/>
				<Delete/>
				<Metadata/>
			</DesignTimePermissions>
			<RunTimePermissions/>
			<VisibilityPermissions>
				<Visibility/>
			</VisibilityPermissions>
			<ConfigurationTableDefinitions/>
			<ConfigurationTables/>
			<ParameterDefinitions>
				<FieldDefinition aspect.bindingDirection="IN" aspect.dataShape="MXgraph.ShapeList.DataShape" aspect.isMandatory="false" aspect.ordinal="0" baseType="INFOTABLE" description="" name="MappingList" ordinal="0"/>
			</ParameterDefinitions>
			<Things>
				<Thing>MtpMxgraphUtilities</Thing>
			</Things>
			<ThingShapes/>
			<ThingTemplates/>
			<mashupContent><![CDATA[{ "CustomMashupCss" : "", "Data" : { "Session" : { "DataName" : "Session", "EntityName" : "", "EntityType" : "Session", "Id" : "session", "Services" : [ { "APIMethod" : "post", "Characteristic" : "Services", "Id" : "SessionInterface", "Name" : "GetGlobalSessionValues", "Parameters" : { }, "RefreshInterval" : 0, "Target" : "GetGlobalSessionValues" } ] }, "Things_MtpMxgraphUtilities" : { "DataName" : "Things_MtpMxgraphUtilities", "EntityName" : "MtpMxgraphUtilities", "EntityType" : "Things", "Id" : "3cceaa9d-4cd8-4ff5-948d-ab01f965f899", "Services" : [ { "APIMethod" : "get", "Characteristic" : "Services", "Id" : "c40193d3-a492-4a49-b796-7c51344f9556", "Name" : "GetProperties", "Parameters" : { }, "RefreshInterval" : 0, "Target" : "GetProperties" } ] }, "UserExtensions" : { "DataName" : "UserExtensions", "EntityName" : "", "EntityType" : "UserExtensions", "Id" : "UserExtensions", "Services" : [ { "APIMethod" : "post", "Characteristic" : "Services", "Id" : "UserExtensionInterface", "Name" : "GetCurrentUserExtensionProperties", "Parameters" : { }, "RefreshInterval" : 0, "Target" : "GetCurrentUserExtensionProperties" } ] } }, "DataBindings" : [ { "Id" : "e897f33f-e119-4722-9a33-b81c26ecfb2b", "PropertyMaps" : [ { "SourceProperty" : "MappingList", "SourcePropertyBaseType" : "INFOTABLE", "SourcePropertyType" : "Property", "TargetProperty" : "Data", "TargetPropertyBaseType" : "INFOTABLE", "TargetPropertyType" : "property" } ], "SourceArea" : "Mashup", "SourceId" : "mashup-root", "SourceSection" : "", "TargetArea" : "UI", "TargetId" : "dhxgrid-16", "TargetSection" : "" }, { "Id" : "0524ff01-0b13-4cb8-996f-5ecdaf7befe3", "PropertyMaps" : [ { "SourceProperty" : "mapping", "SourcePropertyBaseType" : "INFOTABLE", "SourcePropertyType" : "Property", "TargetProperty" : "Data", "TargetPropertyBaseType" : "INFOTABLE", "TargetPropertyType" : "property" } ], "SourceArea" : "Data", "SourceDetails" : "AllData", "SourceId" : "GetProperties", "SourceSection" : "Things_MtpMxgraphUtilities", "TargetArea" : "UI", "TargetId" : "dhxgrid-8", "TargetSection" : "" } ], "DesignTimePermissions" : { "Create" : [ ], "Delete" : [ ], "Metadata" : [ ], "Read" : [ ], "Update" : [ ] }, "Events" : [ { "EventHandlerArea" : "Data", "EventHandlerId" : "Things_MtpMxgraphUtilities", "EventHandlerService" : "GetProperties", "EventTriggerArea" : "Mashup", "EventTriggerEvent" : "Loaded", "EventTriggerId" : "mashup-root", "EventTriggerSection" : "", "Id" : "abc64c70-ab1a-432e-887a-600f461f7732" } ], "RunTimePermissions" : { "permissions" : [ ] }, "UI" : { "Properties" : { "AddToDashboardButton" : "SimplePlus", "AddToDashboardButtonStyle" : "DefaultAddToDashboardButtonStyle", "Area" : "Mashup", "BGImage" : "", "BGImageRepeat" : "no-repeat", "BGImageSize" : "auto", "Columns" : 0, "ConfigureGadgetButton" : "SimpleGear", "ConfigureGadgetButtonStyle" : "DefaultConfigureGadgetButtonStyle", "DisplayName" : "Mashup", "EnableParameterEditing" : false, "Height" : 618, "Id" : "mashup-root", "IgnoreWarningsInViewMashup" : false, "IsPrintLayout" : false, "Left" : 0, "MashupToEditGadget" : "DefaultMashupToEditGadget", "MinHeight" : 0, "MinWidth" : 0, "ResponsiveLayout" : true, "Rows" : 0, "ShowDataLoading" : true, "Style" : "DefaultMashupStyle", "StyleTheme" : "Base Theme", "Title" : "", "TitleBar" : false, "TitleBarStyle" : "DefaultTitleBarStyle", "TitleBarText" : "Gadget Title Here", "Top" : 0, "Type" : "mashup", "UseTheme" : false, "UseThemeForHybrids" : false, "Visible" : true, "Width" : 1024, "Z-index" : 10, "__TypeDisplayName" : "Mashup", "_currentParameterDefs" : [ { "Aspects" : { "bindingDirection" : "IN", "dataShape" : "MXgraph.ShapeList.DataShape", "isMandatory" : false }, "BaseType" : "INFOTABLE", "Description" : "", "ParameterName" : "MappingList" } ], "id_index" : 18, "supportsAutoResize" : true }, "Widgets" : [ { "Properties" : { "Area" : "UI", "Columns" : 2, "DisplayName" : "layout-2", "Footer" : false, "FooterHeight" : 0, "Header" : false, "HeaderHeight" : 0, "Id" : "layout-2", "IncludeSpacingInFixedAreas" : false, "IsPrintLayout" : false, "Left" : 300, "LeftSidebar" : false, "LeftSidebarWidth" : 0, "Orientation" : "horizontal", "PctColumn1" : 50, "PctColumn2" : 50, "PctColumn3" : 1, "PctColumn4" : 1, "PctColumn5" : 1, "PctColumn6" : 1, "PctColumn7" : 1, "PctColumn8" : 1, "PctRow1" : 50, "PctRow2" : 50, "PctRow3" : 0, "PctRow4" : 0, "PctRow5" : 0, "PctRow6" : 0, "PctRow7" : 0, "PctRow8" : 0, "PrintMarginLeftRight" : 0.5, "PrintMarginTopBottom" : 0.5, "PrintWidth" : 650, "ResponsiveLayout" : true, "RightSidebar" : false, "RightSidebarWidth" : 0, "Rows" : 0, "ShowDataLoading" : true, "Spacing" : 2, "Top" : 210, "Type" : "layout", "Visible" : true, "Z-index" : 10, "__TypeDisplayName" : "Layout" }, "Widgets" : [ { "Properties" : { "AnimateExpandCollapse" : true, "Area" : "UI", "BGImageRepeat" : "no-repeat", "BGImageSize" : "auto", "DisplayName" : "Column 1", "ExpandCollapseTabLocation" : "outside", "Expanded" : true, "Id" : "container-3", "MinHeight" : 0, "MinWidth" : 0, "Overlay" : false, "OverlayIsTransparent" : false, "ResponsiveLayout" : true, "ShowDataLoading" : true, "ShowExpandCollapseTab" : false, "Style" : "DefaultContainerStyle", "TabCollapseStyle" : "DefaultTabCollapseStyle", "TabExpandStyle" : "DefaultTabExpandStyle", "TabHeight" : 36, "TabLocation" : "center", "TabOffset" : 0, "TabWidth" : 36, "Type" : "container", "Visible" : true, "Z-index" : 10, "__TypeDisplayName" : "Container", "userCannotRemove" : true }, "Widgets" : [ { "Properties" : { "Area" : "UI", "Columns" : 0, "DisplayName" : "layout-5", "Footer" : false, "FooterHeight" : 0, "Header" : false, "HeaderHeight" : 0, "Id" : "layout-5", "IncludeSpacingInFixedAreas" : false, "IsPrintLayout" : false, "Left" : 185, "LeftSidebar" : false, "LeftSidebarWidth" : 0, "Orientation" : "vertical", "PctColumn1" : 50, "PctColumn2" : 50, "PctColumn3" : 1, "PctColumn4" : 1, "PctColumn5" : 1, "PctColumn6" : 1, "PctColumn7" : 1, "PctColumn8" : 1, "PctRow1" : 6, "PctRow2" : 44, "PctRow3" : 50, "PctRow4" : 0, "PctRow5" : 0, "PctRow6" : 0, "PctRow7" : 0, "PctRow8" : 0, "PrintMarginLeftRight" : 0.5, "PrintMarginTopBottom" : 0.5, "PrintWidth" : 650, "ResponsiveLayout" : true, "RightSidebar" : false, "RightSidebarWidth" : 0, "Rows" : 3, "ShowDataLoading" : true, "Spacing" : 2, "Top" : 155, "Type" : "layout", "Visible" : true, "Z-index" : 10, "__TypeDisplayName" : "Layout" }, "Widgets" : [ { "Properties" : { "AnimateExpandCollapse" : true, "Area" : "UI", "BGImageRepeat" : "no-repeat", "BGImageSize" : "auto", "DisplayName" : "Row", "ExpandCollapseTabLocation" : "outside", "Expanded" : true, "Id" : "container-9", "MinHeight" : 0, "MinWidth" : 0, "Overlay" : false, "OverlayIsTransparent" : false, "ResponsiveLayout" : true, "ShowDataLoading" : true, "ShowExpandCollapseTab" : false, "Style" : "DefaultContainerStyle", "TabCollapseStyle" : "DefaultTabCollapseStyle", "TabExpandStyle" : "DefaultTabExpandStyle", "TabHeight" : 36, "TabLocation" : "center", "TabOffset" : 0, "TabWidth" : 36, "Type" : "container", "Visible" : true, "Z-index" : 10, "__TypeDisplayName" : "Container", "userCannotRemove" : true }, "Widgets" : [ { "Properties" : { "Area" : "UI", "DisplayName" : "panel-10", "Height" : 200, "HideScrollbars" : false, "HorizontalAnchor" : "left", "Id" : "panel-10", "Left" : 125, "ResponsiveLayout" : true, "ShowDataLoading" : true, "Style" : "DefaultPanelStyle", "Top" : 15, "Type" : "panel", "VerticalAnchor" : "top", "Visible" : true, "Width" : 300, "Z-index" : 10, "__TypeDisplayName" : "Panel" }, "Widgets" : [ { "Properties" : { "Alignment" : "left", "AllowEllipsis" : false, "Area" : "UI", "DisplayName" : "label-11", "Height" : 22, "Id" : "label-11", "Left" : 5, "ResponsiveLayout" : false, "ShowDataLoading" : true, "Style" : "DefaultLabelStyle", "Text" : "The eclass in the grid below can be populated either by the eClassClassification or the ViewType from the MTP File", "ToolTipField" : "", "ToolTipStyle" : "DefaultTooltipStyle", "Top" : 5, "Type" : "label", "Visible" : true, "Width" : 750, "Z-index" : 10, "__TypeDisplayName" : "Label", "__supportsTooltip" : true }, "Widgets" : [ ] } ] } ] }, { "Properties" : { "AnimateExpandCollapse" : true, "Area" : "UI", "BGImageRepeat" : "no-repeat", "BGImageSize" : "auto", "DisplayName" : "Row 1", "ExpandCollapseTabLocation" : "outside", "Expanded" : true, "Id" : "container-6", "MinHeight" : 0, "MinWidth" : 0, "Overlay" : false, "OverlayIsTransparent" : false, "ResponsiveLayout" : true, "ShowDataLoading" : true, "ShowExpandCollapseTab" : false, "Style" : "DefaultContainerStyle", "TabCollapseStyle" : "DefaultTabCollapseStyle", "TabExpandStyle" : "DefaultTabExpandStyle", "TabHeight" : 36, "TabLocation" : "center", "TabOffset" : 0, "TabWidth" : 36, "Type" : "container", "Visible" : true, "Z-index" : 10, "__TypeDisplayName" : "Container", "userCannotRemove" : true }, "Widgets" : [ { "Properties" : { "AlignHeader" : false, "Area" : "UI", "AutoSelectFirstRow" : false, "CellTextWrapping" : false, "ColumnFormat" : { "formatInfo" : [ { "Align" : "left", "AllowEdit" : false, "FieldName" : "eclass", "FormatOptions" : { "FormatString" : "full", "renderer" : "STRING" }, "Title" : "eclass", "ValidationExpression" : "", "ValidationMessage" : "", "Width" : "auto" }, { "Align" : "left", "AllowEdit" : false, "FieldName" : "mxgraphShape", "FormatOptions" : { "FormatString" : "full", "renderer" : "STRING" }, "Title" : "mxgraphShape", "ValidationExpression" : "", "ValidationMessage" : "", "Width" : "auto" } ] }, "CurrentScrollTop" : 0, "DisplayName" : "dhxgrid-8", "FocusStyle" : "DefaultFocusStyle", "GridBackgroundStyle" : "DefaultGridBackgroundStyle", "GridEditableFieldStyle" : "DefaultGridEditableFieldStyle", "GridHeaderStyle" : "DefaultGridHeaderStyle", "GridHeaderTextCase" : "capitalize", "GridInvalidFieldStyle" : "DefaultGridInvalidFieldStyle", "Height" : 200, "Id" : "dhxgrid-8", "IsEditable" : false, "IsPrintLayout" : false, "Left" : 225, "MultiSelect" : false, "ResponsiveLayout" : true, "RowAlternateBackgroundStyle" : "DefaultRowAlternateBackgroundStyle", "RowBackgroundStyle" : "DefaultRowBackgroundStyle", "RowFormat_StateParameters" : [ ], "RowHeight" : 30, "RowHoverStyle" : "DefaultRowHoverStyle", "RowSelectedStyle" : "DefaultRowSelectedStyle", "ScrollTop" : 0, "ShowAllColumns" : false, "ShowDataLoading" : true, "TabSequence" : 0, "Top" : 150, "Type" : "dhxgrid", "Visible" : true, "Width" : 400, "Z-index" : 10, "__TypeDisplayName" : "Grid" }, "Widgets" : [ ] } ] }, { "Properties" : { "AnimateExpandCollapse" : true, "Area" : "UI", "BGImageRepeat" : "no-repeat", "BGImageSize" : "auto", "DisplayName" : "Row 2", "ExpandCollapseTabLocation" : "outside", "Expanded" : true, "Id" : "container-7", "MinHeight" : 0, "MinWidth" : 0, "Overlay" : false, "OverlayIsTransparent" : false, "ResponsiveLayout" : true, "ShowDataLoading" : true, "ShowExpandCollapseTab" : false, "Style" : "DefaultContainerStyle", "TabCollapseStyle" : "DefaultTabCollapseStyle", "TabExpandStyle" : "DefaultTabExpandStyle", "TabHeight" : 36, "TabLocation" : "center", "TabOffset" : 0, "TabWidth" : 36, "Type" : "container", "Visible" : true, "Z-index" : 10, "__TypeDisplayName" : "Container", "userCannotRemove" : true }, "Widgets" : [ { "Properties" : { "Area" : "UI", "DisplayName" : "panel-18", "Height" : 200, "HideScrollbars" : false, "HorizontalAnchor" : "left", "Id" : "panel-18", "Left" : 300, "ResponsiveLayout" : true, "ShowDataLoading" : true, "Style" : "DefaultPanelStyle", "Top" : 115, "Type" : "panel", "VerticalAnchor" : "top", "Visible" : true, "Width" : 300, "Z-index" : 10, "__TypeDisplayName" : "Panel" }, "Widgets" : [ ] } ] } ] } ] }, { "Properties" : { "AnimateExpandCollapse" : true, "Area" : "UI", "BGImageRepeat" : "no-repeat", "BGImageSize" : "auto", "DisplayName" : "Column 2", "ExpandCollapseTabLocation" : "outside", "Expanded" : true, "Id" : "container-4", "MinHeight" : 0, "MinWidth" : 0, "Overlay" : false, "OverlayIsTransparent" : false, "ResponsiveLayout" : true, "ShowDataLoading" : true, "ShowExpandCollapseTab" : false, "Style" : "DefaultContainerStyle", "TabCollapseStyle" : "DefaultTabCollapseStyle", "TabExpandStyle" : "DefaultTabExpandStyle", "TabHeight" : 36, "TabLocation" : "center", "TabOffset" : 0, "TabWidth" : 36, "Type" : "container", "Visible" : true, "Z-index" : 10, "__TypeDisplayName" : "Container", "userCannotRemove" : true }, "Widgets" : [ { "Properties" : { "Area" : "UI", "Columns" : 0, "DisplayName" : "layout-12", "Footer" : false, "FooterHeight" : 0, "Header" : false, "HeaderHeight" : 0, "Id" : "layout-12", "IncludeSpacingInFixedAreas" : false, "IsPrintLayout" : false, "Left" : 95, "LeftSidebar" : false, "LeftSidebarWidth" : 0, "Orientation" : "vertical", "PctColumn1" : 50, "PctColumn2" : 50, "PctColumn3" : 1, "PctColumn4" : 1, "PctColumn5" : 1, "PctColumn6" : 1, "PctColumn7" : 1, "PctColumn8" : 1, "PctRow1" : 6, "PctRow2" : 94, "PctRow3" : 50, "PctRow4" : 0, "PctRow5" : 0, "PctRow6" : 0, "PctRow7" : 0, "PctRow8" : 0, "PrintMarginLeftRight" : 0.5, "PrintMarginTopBottom" : 0.5, "PrintWidth" : 650, "ResponsiveLayout" : true, "RightSidebar" : false, "RightSidebarWidth" : 0, "Rows" : 2, "ShowDataLoading" : true, "Spacing" : 2, "Top" : 235, "Type" : "layout", "Visible" : true, "Z-index" : 10, "__TypeDisplayName" : "Layout" }, "Widgets" : [ { "Properties" : { "AnimateExpandCollapse" : true, "Area" : "UI", "BGImageRepeat" : "no-repeat", "BGImageSize" : "auto", "DisplayName" : "Row", "ExpandCollapseTabLocation" : "outside", "Expanded" : true, "Id" : "container-15", "MinHeight" : 0, "MinWidth" : 0, "Overlay" : false, "OverlayIsTransparent" : false, "ResponsiveLayout" : true, "ShowDataLoading" : true, "ShowExpandCollapseTab" : false, "Style" : "DefaultContainerStyle", "TabCollapseStyle" : "DefaultTabCollapseStyle", "TabExpandStyle" : "DefaultTabExpandStyle", "TabHeight" : 36, "TabLocation" : "center", "TabOffset" : 0, "TabWidth" : 36, "Type" : "container", "Visible" : true, "Z-index" : 10, "__TypeDisplayName" : "Container", "userCannotRemove" : true }, "Widgets" : [ ] }, { "Properties" : { "AnimateExpandCollapse" : true, "Area" : "UI", "BGImageRepeat" : "no-repeat", "BGImageSize" : "auto", "DisplayName" : "Row 1", "ExpandCollapseTabLocation" : "outside", "Expanded" : true, "Id" : "container-13", "MinHeight" : 0, "MinWidth" : 0, "Overlay" : false, "OverlayIsTransparent" : false, "ResponsiveLayout" : true, "ShowDataLoading" : true, "ShowExpandCollapseTab" : false, "Style" : "DefaultContainerStyle", "TabCollapseStyle" : "DefaultTabCollapseStyle", "TabExpandStyle" : "DefaultTabExpandStyle", "TabHeight" : 36, "TabLocation" : "center", "TabOffset" : 0, "TabWidth" : 36, "Type" : "container", "Visible" : true, "Z-index" : 10, "__TypeDisplayName" : "Container", "userCannotRemove" : true }, "Widgets" : [ { "Properties" : { "AlignHeader" : false, "Area" : "UI", "AutoSelectFirstRow" : false, "CellTextWrapping" : false, "ColumnFormat" : { "formatInfo" : [ { "Align" : "left", "AllowEdit" : false, "FieldName" : "ShortShapeName", "FormatOptions" : { "FormatString" : "full", "formatInfo" : { "FieldName" : "", "StateDefinition" : "", "StateDefinitionType" : "fixed", "StateFormats" : [ { "state" : "", "stateName" : "fixed" } ] }, "renderer" : "STRING", "roundingEnabled" : true }, "Title" : "Short name", "ValidationExpression" : "", "ValidationMessage" : "", "Width" : "auto" }, { "Align" : "left", "AllowEdit" : false, "FieldName" : "LongShapeName", "FormatOptions" : { "FormatString" : "full", "formatInfo" : { "FieldName" : "", "StateDefinition" : "", "StateDefinitionType" : "fixed", "StateFormats" : [ { "state" : "", "stateName" : "fixed" } ] }, "renderer" : "STRING", "roundingEnabled" : true }, "Title" : "Long name", "ValidationExpression" : "", "ValidationMessage" : "", "Width" : "auto" }, { "Align" : "left", "AllowEdit" : false, "FieldName" : "ShapeCategory", "FormatOptions" : { "FormatString" : "full", "formatInfo" : { "FieldName" : "", "StateDefinition" : "", "StateDefinitionType" : "fixed", "StateFormats" : [ { "state" : "", "stateName" : "fixed" } ] }, "renderer" : "STRING", "roundingEnabled" : true }, "Title" : "Category", "ValidationExpression" : "", "ValidationMessage" : "", "Width" : "auto" } ] }, "CurrentScrollTop" : 0, "DisplayName" : "dhxgrid-16", "FocusStyle" : "DefaultFocusStyle", "GridBackgroundStyle" : "DefaultGridBackgroundStyle", "GridEditableFieldStyle" : "DefaultGridEditableFieldStyle", "GridHeaderStyle" : "DefaultGridHeaderStyle", "GridHeaderTextCase" : "capitalize", "GridInvalidFieldStyle" : "DefaultGridInvalidFieldStyle", "Height" : 200, "Id" : "dhxgrid-16", "IsEditable" : false, "IsPrintLayout" : false, "Left" : 150, "MultiSelect" : false, "ResponsiveLayout" : true, "RowAlternateBackgroundStyle" : "DefaultRowAlternateBackgroundStyle", "RowBackgroundStyle" : "DefaultRowBackgroundStyle", "RowFormat_StateParameters" : [ ], "RowHeight" : 30, "RowHoverStyle" : "DefaultRowHoverStyle", "RowSelectedStyle" : "DefaultRowSelectedStyle", "ScrollTop" : 0, "ShowAllColumns" : false, "ShowDataLoading" : true, "TabSequence" : 0, "Top" : 90, "Type" : "dhxgrid", "Visible" : true, "Width" : 400, "Z-index" : 10, "__TypeDisplayName" : "Grid" }, "Widgets" : [ ] } ] } ] } ] } ] } ] }, "mashupType" : "mashup" }]]></mashupContent>
			<preview/>
			<ConfigurationChanges>
				<ConfigurationChange changeAction="CREATE" changeReason="header : name : updated, projectName : updated&#10;" timestamp="2019-08-08T17:46:48.715+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="Mashup : design : updated&#10;" timestamp="2019-08-08T17:47:37.413+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="Mashup : design : updated&#10;" timestamp="2019-08-08T17:48:28.172+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="Mashup : design : updated&#10;" timestamp="2019-08-08T17:59:59.382+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="Mashup : design : updated&#10;" timestamp="2019-08-08T18:02:33.027+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="Mashup : design : updated&#10;" timestamp="2019-08-09T09:16:09.112+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="Mashup : design : updated&#10;" timestamp="2019-08-12T12:50:30.675+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="Mashup : design : updated&#10;" timestamp="2019-08-12T14:54:18.776+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="Mashup : design : updated&#10;" timestamp="2019-08-12T14:54:22.553+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="Mashup : design : updated&#10;" timestamp="2019-08-12T14:55:10.970+03:00" user="Administrator"/>
			</ConfigurationChanges>
		</Mashup>
		<Mashup aspect.isResponsive="true" aspect.mashupType="mashup" columns="0.0" description="" documentationContent="" homeMashup="" lastModifiedDate="2019-07-31T12:59:56.815+03:00" name="MtpImportMashup" projectName="MTP" rows="0.0" tags="">
			<Owner name="Administrator" type="User"/>
			<avatar/>
			<DesignTimePermissions>
				<Create/>
				<Read/>
				<Update/>
				<Delete/>
				<Metadata/>
			</DesignTimePermissions>
			<RunTimePermissions/>
			<VisibilityPermissions>
				<Visibility/>
			</VisibilityPermissions>
			<ConfigurationTableDefinitions/>
			<ConfigurationTables/>
			<ParameterDefinitions/>
			<Things>
				<Thing>MtpMxgraphUtilities</Thing>
				<Thing>MtpThingModelOptions</Thing>
				<Thing>MtpFileRepository</Thing>
			</Things>
			<ThingShapes/>
			<ThingTemplates/>
			<mashupContent><![CDATA[{ "ConfigurationTables" : { }, "CustomMashupCss" : "", "Data" : { "Session" : { "DataName" : "Session", "EntityName" : "", "EntityType" : "Session", "Id" : "session", "Services" : [ { "APIMethod" : "post", "Characteristic" : "Services", "Id" : "SessionInterface", "Name" : "GetGlobalSessionValues", "Parameters" : { }, "RefreshInterval" : 0, "Target" : "GetGlobalSessionValues" } ] }, "Things_MtpFileRepository" : { "DataName" : "Things_MtpFileRepository", "EntityName" : "MtpFileRepository", "EntityType" : "Things", "Id" : "fa9fc09f-5b6f-4eae-99ad-3f0cadb13cb4", "Services" : [ { "APIMethod" : "post", "Characteristic" : "Services", "Id" : "47d4bf87-f5a9-4df0-b0c2-e03ba777d04f", "Name" : "GetFileListing", "Parameters" : { }, "RefreshInterval" : 0, "Target" : "GetFileListing" } ] }, "Things_MtpMxgraphUtilities" : { "DataName" : "Things_MtpMxgraphUtilities", "EntityName" : "MtpMxgraphUtilities", "EntityType" : "Things", "Id" : "7d91f3db-f8de-4583-b34c-47d8b88219b8", "Services" : [ { "APIMethod" : "get", "Characteristic" : "Services", "Id" : "54289561-5dc6-4f1b-9258-0545d8155f4c", "Name" : "GetProperties", "Parameters" : { }, "RefreshInterval" : 0, "Target" : "GetProperties" } ] }, "Things_MtpThingModelOptions" : { "DataName" : "Things_MtpThingModelOptions", "EntityName" : "MtpThingModelOptions", "EntityType" : "Things", "Id" : "94b0b9b8-44de-4057-a893-093ef11e639b", "Services" : [ { "APIMethod" : "post", "Characteristic" : "Services", "Id" : "741fc213-1d79-49e7-8968-8fc85624bafa", "Name" : "JsonMtpToThingModel", "Parameters" : { }, "RefreshInterval" : 0, "Target" : "JsonMtpToThingModel" }, { "APIMethod" : "post", "Characteristic" : "Services", "Id" : "c3d288d1-57df-49a2-a971-b1ca65f9b8a7", "Name" : "CollectDataForMtp", "Parameters" : { }, "RefreshInterval" : 0, "Target" : "CollectDataForMtp" }, { "APIMethod" : "post", "Characteristic" : "Services", "Id" : "f8b302a8-486a-4f44-aeff-7a2953dd9ea2", "Name" : "SaveMtpModule", "Parameters" : { }, "Properties" : { "CustomSuccessMessage" : "Saved mtp defintion", "ShowSuccessMessage" : true }, "RefreshInterval" : 0, "Target" : "SaveMtpModule" } ] }, "UserExtensions" : { "DataName" : "UserExtensions", "EntityName" : "", "EntityType" : "UserExtensions", "Id" : "UserExtensions", "Services" : [ { "APIMethod" : "post", "Characteristic" : "Services", "Id" : "UserExtensionInterface", "Name" : "GetCurrentUserExtensionProperties", "Parameters" : { }, "RefreshInterval" : 0, "Target" : "GetCurrentUserExtensionProperties" } ] } }, "DataBindings" : [ { "Id" : "122e5cfd-56c0-4d68-8309-b070834e9ef0", "PropertyMaps" : [ { "SourceProperty" : "mapping", "SourcePropertyBaseType" : "INFOTABLE", "SourcePropertyType" : "Property", "TargetProperty" : "shapeMapping", "TargetPropertyBaseType" : "INFOTABLE", "TargetPropertyType" : "property" } ], "SourceArea" : "Data", "SourceDetails" : "AllData", "SourceId" : "GetProperties", "SourceSection" : "Things_MtpMxgraphUtilities", "TargetArea" : "UI", "TargetId" : "BMTypescriptHost-7", "TargetSection" : "" }, { "Id" : "55492ae4-b7d4-4eef-841a-26ce016eac1c", "PropertyMaps" : [ { "SourceProperty" : "mtpJson", "SourcePropertyBaseType" : "STRING", "SourcePropertyType" : "Property", "TargetProperty" : "Text", "TargetPropertyBaseType" : "STRING", "TargetPropertyType" : "property" } ], "SourceArea" : "UI", "SourceId" : "BMTypescriptHost-7", "SourceSection" : "", "TargetArea" : "UI", "TargetId" : "textarea-16", "TargetSection" : "" }, { "Id" : "7eaee812-e8cd-4f27-b91f-1ed8a94d04db", "PropertyMaps" : [ { "SourceProperty" : "", "SourcePropertyBaseType" : "INFOTABLE", "SourcePropertyType" : "InfoTable", "TargetProperty" : "Data", "TargetPropertyBaseType" : "INFOTABLE", "TargetPropertyType" : "property" } ], "SourceArea" : "Data", "SourceDetails" : "AllData", "SourceId" : "GetFileListing", "SourceSection" : "Things_MtpFileRepository", "TargetArea" : "UI", "TargetId" : "dhxlist-25", "TargetSection" : "" }, { "Id" : "3c7996a5-a3cf-40c0-a2bb-9ea7dc325089", "PropertyMaps" : [ { "SourceProperty" : "name", "SourcePropertyBaseType" : "STRING", "SourcePropertyType" : "Field", "TargetProperty" : "mtpFilePath", "TargetPropertyBaseType" : "STRING", "TargetPropertyType" : "property" } ], "SourceArea" : "Data", "SourceDetails" : "SelectedRows", "SourceId" : "GetFileListing", "SourceSection" : "Things_MtpFileRepository", "TargetArea" : "UI", "TargetId" : "BMTypescriptHost-7", "TargetSection" : "" }, { "Id" : "7e6d671f-725f-4db4-8da4-19ae423e3f87", "PropertyMaps" : [ { "SourceProperty" : "XMLDiagram", "SourcePropertyBaseType" : "TEXT", "SourcePropertyType" : "Property", "TargetProperty" : "Text", "TargetPropertyBaseType" : "STRING", "TargetPropertyType" : "property" } ], "SourceArea" : "UI", "SourceId" : "mxdiagram-4", "SourceSection" : "", "TargetArea" : "UI", "TargetId" : "textarea-42", "TargetSection" : "" }, { "Id" : "c9282ec4-6a1b-4b3d-ae82-6658782852ca", "PropertyMaps" : [ { "SourceProperty" : "Text", "SourcePropertyBaseType" : "STRING", "SourcePropertyType" : "Property", "TargetProperty" : "mxGraphXml", "TargetPropertyBaseType" : "STRING", "TargetPropertyType" : "property" } ], "SourceArea" : "UI", "SourceId" : "textarea-42", "SourceSection" : "", "TargetArea" : "UI", "TargetId" : "BMTypescriptHost-7", "TargetSection" : "" }, { "Id" : "20700a62-0f8d-48e7-b411-109411cf9aeb", "PropertyMaps" : [ { "SourceProperty" : "mxGraphXmlUpdated", "SourcePropertyBaseType" : "STRING", "SourcePropertyType" : "Property", "TargetProperty" : "XMLDiagram", "TargetPropertyBaseType" : "TEXT", "TargetPropertyType" : "property" } ], "SourceArea" : "UI", "SourceId" : "BMTypescriptHost-7", "SourceSection" : "", "TargetArea" : "UI", "TargetId" : "mxdiagram-4", "TargetSection" : "" }, { "Id" : "5c1d8486-90df-400f-9073-447d37340481", "PropertyMaps" : [ { "SourceProperty" : "", "SourcePropertyBaseType" : "INFOTABLE", "SourcePropertyType" : "InfoTable", "TargetProperty" : "Data", "TargetPropertyBaseType" : "INFOTABLE", "TargetPropertyType" : "property" } ], "SourceArea" : "Data", "SourceDetails" : "AllData", "SourceId" : "JsonMtpToThingModel", "SourceSection" : "Things_MtpThingModelOptions", "TargetArea" : "UI", "TargetId" : "dhxgrid-48", "TargetSection" : "" }, { "Id" : "cdefd230-2387-475f-9e80-c2ff23fc0a43", "PropertyMaps" : [ { "SourceProperty" : "Entity", "SourcePropertyBaseType" : "THINGTEMPLATENAME", "TargetProperty" : "template", "TargetPropertyBaseType" : "THINGTEMPLATENAME", "TargetPropertyType" : "Parameter" } ], "SourceArea" : "UI", "SourceId" : "entitypicker-50", "SourceSection" : "", "TargetArea" : "Data", "TargetId" : "JsonMtpToThingModel", "TargetSection" : "Things_MtpThingModelOptions" }, { "Id" : "bccec482-ab54-48d7-8052-da7efb1cbec4", "PropertyMaps" : [ { "SourceProperty" : "mtpJson", "SourcePropertyBaseType" : "STRING", "TargetProperty" : "jsonMtp", "TargetPropertyBaseType" : "STRING", "TargetPropertyType" : "Parameter" } ], "SourceArea" : "UI", "SourceId" : "BMTypescriptHost-7", "SourceSection" : "", "TargetArea" : "Data", "TargetId" : "JsonMtpToThingModel", "TargetSection" : "Things_MtpThingModelOptions" }, { "Id" : "120524fe-e063-4a25-90e1-486afd2648c0", "PropertyMaps" : [ { "SourceProperty" : "Entity", "SourcePropertyBaseType" : "THINGNAME", "TargetProperty" : "industrialGateway", "TargetPropertyBaseType" : "THINGNAME", "TargetPropertyType" : "Parameter" } ], "SourceArea" : "UI", "SourceId" : "entitypicker-51", "SourceSection" : "", "TargetArea" : "Data", "TargetId" : "JsonMtpToThingModel", "TargetSection" : "Things_MtpThingModelOptions" }, { "Id" : "4a9719e7-e5f8-47ff-9886-3c228f9b8de8", "PropertyMaps" : [ { "SourceProperty" : "Tags", "SourcePropertyBaseType" : "TAGS", "TargetProperty" : "tags", "TargetPropertyBaseType" : "TAGS", "TargetPropertyType" : "Parameter" } ], "SourceArea" : "UI", "SourceId" : "tagpicker-54", "SourceSection" : "", "TargetArea" : "Data", "TargetId" : "JsonMtpToThingModel", "TargetSection" : "Things_MtpThingModelOptions" }, { "Id" : "7e45d22e-7ae6-44fe-91c8-d82532b576e6", "PropertyMaps" : [ { "SourceProperty" : "Text", "SourcePropertyBaseType" : "STRING", "TargetProperty" : "prefix", "TargetPropertyBaseType" : "STRING", "TargetPropertyType" : "Parameter" } ], "SourceArea" : "UI", "SourceId" : "textbox-52", "SourceSection" : "", "TargetArea" : "Data", "TargetId" : "JsonMtpToThingModel", "TargetSection" : "Things_MtpThingModelOptions" }, { "Id" : "923ff440-3d11-4b82-a228-7dd1120c7425", "PropertyMaps" : [ { "SourceProperty" : "Text", "SourcePropertyBaseType" : "STRING", "TargetProperty" : "prefix", "TargetPropertyBaseType" : "STRING", "TargetPropertyType" : "Parameter" } ], "SourceArea" : "UI", "SourceId" : "textbox-52", "SourceSection" : "", "TargetArea" : "Data", "TargetId" : "CollectDataForMtp", "TargetSection" : "Things_MtpThingModelOptions" }, { "Id" : "89804b8a-1e7d-428d-a2a9-aab3e9343d7e", "PropertyMaps" : [ { "SourceProperty" : "mtpJson", "SourcePropertyBaseType" : "STRING", "TargetProperty" : "jsonMtp", "TargetPropertyBaseType" : "STRING", "TargetPropertyType" : "Parameter" } ], "SourceArea" : "UI", "SourceId" : "BMTypescriptHost-7", "SourceSection" : "", "TargetArea" : "Data", "TargetId" : "CollectDataForMtp", "TargetSection" : "Things_MtpThingModelOptions" }, { "Id" : "5be47f2c-bff0-4cdd-8dce-0101d8bcf9fa", "PropertyMaps" : [ { "SourceProperty" : "", "SourcePropertyBaseType" : "INFOTABLE", "SourcePropertyType" : "InfoTable", "TargetProperty" : "mtpData", "TargetPropertyBaseType" : "INFOTABLE", "TargetPropertyType" : "property" } ], "SourceArea" : "Data", "SourceDetails" : "AllData", "SourceId" : "CollectDataForMtp", "SourceSection" : "Things_MtpThingModelOptions", "TargetArea" : "UI", "TargetId" : "BMTypescriptHost-7", "TargetSection" : "" }, { "Id" : "6cc8feb5-b5b4-4eae-8ffe-71c467f9c195", "PropertyMaps" : [ { "SourceProperty" : "Text", "SourcePropertyBaseType" : "STRING", "TargetProperty" : "prefix", "TargetPropertyBaseType" : "STRING", "TargetPropertyType" : "Parameter" } ], "SourceArea" : "UI", "SourceId" : "textbox-52", "SourceSection" : "", "TargetArea" : "Data", "TargetId" : "SaveMtpModule", "TargetSection" : "Things_MtpThingModelOptions" }, { "Id" : "cfe549b6-bf45-4c2d-9e1a-2ca454cdcb91", "PropertyMaps" : [ { "SourceProperty" : "mtpJson", "SourcePropertyBaseType" : "STRING", "TargetProperty" : "mtpJson", "TargetPropertyBaseType" : "STRING", "TargetPropertyType" : "Parameter" } ], "SourceArea" : "UI", "SourceId" : "BMTypescriptHost-7", "SourceSection" : "", "TargetArea" : "Data", "TargetId" : "SaveMtpModule", "TargetSection" : "Things_MtpThingModelOptions" }, { "Id" : "167fefaa-c026-4889-beed-399c5a739a21", "PropertyMaps" : [ { "SourceProperty" : "Text", "SourcePropertyBaseType" : "STRING", "TargetProperty" : "mxGraph", "TargetPropertyBaseType" : "STRING", "TargetPropertyType" : "Parameter" } ], "SourceArea" : "UI", "SourceId" : "textarea-42", "SourceSection" : "", "TargetArea" : "Data", "TargetId" : "SaveMtpModule", "TargetSection" : "Things_MtpThingModelOptions" } ], "DesignTimePermissions" : { "Create" : [ ], "Delete" : [ ], "Metadata" : [ ], "Read" : [ ], "Update" : [ ] }, "Events" : [ { "EventHandlerArea" : "UI", "EventHandlerId" : "BMTypescriptHost-7", "EventHandlerService" : "mashupDidFinishLoading", "EventTriggerArea" : "Mashup", "EventTriggerEvent" : "Loaded", "EventTriggerId" : "mashup-root", "EventTriggerSection" : "", "Id" : "d23a1753-706e-4b70-9737-c3d90eecae4a" }, { "EventHandlerArea" : "UI", "EventHandlerId" : "BMCodeHost-11", "EventHandlerService" : "execute", "EventTriggerArea" : "UI", "EventTriggerEvent" : "loadSymbols", "EventTriggerId" : "BMTypescriptHost-7", "EventTriggerSection" : "", "Id" : "2bdaf292-ece2-47a0-82e2-3a2b1c923042" }, { "EventHandlerArea" : "Data", "EventHandlerId" : "Things_MtpMxgraphUtilities", "EventHandlerService" : "GetProperties", "EventTriggerArea" : "Mashup", "EventTriggerEvent" : "Loaded", "EventTriggerId" : "mashup-root", "EventTriggerSection" : "", "Id" : "39816aea-76d7-4e8f-aefb-e77a9db915fc" }, { "EventHandlerArea" : "Data", "EventHandlerId" : "Things_MtpFileRepository", "EventHandlerService" : "GetFileListing", "EventTriggerArea" : "Mashup", "EventTriggerEvent" : "Loaded", "EventTriggerId" : "mashup-root", "EventTriggerSection" : "", "Id" : "51dd8751-ea0e-4ee2-92a7-3ebbb672a8c9" }, { "EventHandlerArea" : "UI", "EventHandlerId" : "BMTypescriptHost-7", "EventHandlerService" : "loadFile", "EventTriggerArea" : "Data", "EventTriggerEvent" : "SelectedRowsChanged", "EventTriggerId" : "GetFileListing", "EventTriggerSection" : "Things_MtpFileRepository", "Id" : "9d496131-5f9a-4405-81dc-13eec7aa87af" }, { "EventHandlerArea" : "UI", "EventHandlerId" : "mxdiagram-4", "EventHandlerService" : "GenerateXML", "EventTriggerArea" : "UI", "EventTriggerEvent" : "Clicked", "EventTriggerId" : "button-28", "EventTriggerSection" : "", "Id" : "13d5c3b4-2a1f-4da2-8672-86d98e25c4d6" }, { "EventHandlerArea" : "UI", "EventHandlerId" : "BMTypescriptHost-7", "EventHandlerService" : "updateMtpMxGraph", "EventTriggerArea" : "UI", "EventTriggerEvent" : "Clicked", "EventTriggerId" : "button-44", "EventTriggerSection" : "", "Id" : "a34ae58f-8fe7-46fe-b1a4-cc9485855c1b" }, { "EventHandlerArea" : "Data", "EventHandlerId" : "Things_MtpThingModelOptions", "EventHandlerService" : "JsonMtpToThingModel", "EventTriggerArea" : "UI", "EventTriggerEvent" : "Clicked", "EventTriggerId" : "button-55", "EventTriggerSection" : "", "Id" : "6e7a1499-c47c-4b49-a150-9eb6b1ad1c80" }, { "EventHandlerArea" : "Data", "EventHandlerId" : "Things_MtpThingModelOptions", "EventHandlerService" : "CollectDataForMtp", "EventTriggerArea" : "UI", "EventTriggerEvent" : "Refresh", "EventTriggerId" : "autorefresh-56", "EventTriggerSection" : "", "Id" : "59a0b41f-a46c-4f65-be88-ac84db6f2a58" }, { "EventHandlerArea" : "Data", "EventHandlerId" : "Things_MtpThingModelOptions", "EventHandlerService" : "SaveMtpModule", "EventTriggerArea" : "UI", "EventTriggerEvent" : "Clicked", "EventTriggerId" : "button-57", "EventTriggerSection" : "", "Id" : "47af40e8-9e28-4e8b-85c4-d8f58f0cd735" } ], "RunTimePermissions" : { "permissions" : [ ] }, "UI" : { "Properties" : { "AddToDashboardButton" : "SimplePlus", "AddToDashboardButtonStyle" : "DefaultAddToDashboardButtonStyle", "Area" : "Mashup", "BGImage" : "", "BGImageRepeat" : "no-repeat", "BGImageSize" : "auto", "Columns" : 0, "ConfigureGadgetButton" : "SimpleGear", "ConfigureGadgetButtonStyle" : "DefaultConfigureGadgetButtonStyle", "DisplayName" : "Mashup", "EnableParameterEditing" : false, "Height" : 618, "Id" : "mashup-root", "IgnoreWarningsInViewMashup" : false, "IsPrintLayout" : false, "Left" : 0, "MashupToEditGadget" : "DefaultMashupToEditGadget", "MinHeight" : 0, "MinWidth" : 0, "ResponsiveLayout" : true, "Rows" : 0, "ShowDataLoading" : true, "Style" : "DefaultMashupStyle", "StyleTheme" : "Base Theme", "Title" : "", "TitleBar" : false, "TitleBarStyle" : "DefaultTitleBarStyle", "TitleBarText" : "Gadget Title Here", "Top" : 0, "Type" : "mashup", "UseTheme" : false, "UseThemeForHybrids" : false, "Visible" : true, "Width" : 1024, "Z-index" : 10, "__TypeDisplayName" : "Mashup", "id_index" : 57, "supportsAutoResize" : true }, "Widgets" : [ { "Properties" : { "Area" : "UI", "Columns" : 0, "DisplayName" : "layout-1", "Footer" : false, "FooterHeight" : 0, "Header" : true, "HeaderHeight" : 100, "Id" : "layout-1", "IncludeSpacingInFixedAreas" : false, "IsPrintLayout" : false, "Left" : 500, "LeftSidebar" : false, "LeftSidebarWidth" : 0, "Orientation" : "vertical", "PctColumn1" : 50, "PctColumn2" : 50, "PctColumn3" : 1, "PctColumn4" : 1, "PctColumn5" : 1, "PctColumn6" : 1, "PctColumn7" : 1, "PctColumn8" : 1, "PctRow1" : 100, "PctRow2" : 0, "PctRow3" : 0, "PctRow4" : 0, "PctRow5" : 0, "PctRow6" : 0, "PctRow7" : 0, "PctRow8" : 0, "PrintMarginLeftRight" : 0.5, "PrintMarginTopBottom" : 0.5, "PrintWidth" : 650, "ResponsiveLayout" : true, "RightSidebar" : false, "RightSidebarWidth" : 0, "Rows" : 1, "ShowDataLoading" : true, "Spacing" : 2, "Top" : 160, "Type" : "layout", "Visible" : true, "Z-index" : 10, "__TypeDisplayName" : "Layout" }, "Widgets" : [ { "Properties" : { "AnimateExpandCollapse" : true, "Area" : "UI", "BGImageRepeat" : "no-repeat", "BGImageSize" : "auto", "DisplayName" : "Header", "ExpandCollapseTabLocation" : "outside", "Expanded" : false, "Id" : "container-2", "MinHeight" : 0, "MinWidth" : 0, "Overlay" : true, "OverlayIsTransparent" : true, "ResponsiveLayout" : true, "ShowDataLoading" : true, "ShowExpandCollapseTab" : false, "Style" : "DefaultContainerStyle", "TabCollapseStyle" : "DefaultTabCollapseStyle", "TabExpandStyle" : "DefaultTabExpandStyle", "TabHeight" : 36, "TabLocation" : "center", "TabOffset" : 0, "TabWidth" : 36, "Type" : "container", "Visible" : true, "Z-index" : 10, "__TypeDisplayName" : "Container", "userCannotRemove" : true }, "Widgets" : [ { "Properties" : { "Area" : "UI", "DisplayName" : "panel-6", "Height" : 200, "HideScrollbars" : false, "HorizontalAnchor" : "left", "Id" : "panel-6", "Left" : 185, "ResponsiveLayout" : true, "ShowDataLoading" : true, "Style" : "DefaultContainerStyle", "Top" : 75, "Type" : "panel", "VerticalAnchor" : "top", "Visible" : true, "Width" : 300, "Z-index" : 10, "__TypeDisplayName" : "Panel" }, "Widgets" : [ { "Properties" : { "Area" : "UI", "Code" : "//#import mptFileParser from MTPViewerV2\n//#import mtpJsonDef from MTPViewerV2\n//#import mtpJsonToMxGraph from MTPViewerV2\n\n\n// exectutes when the mashup finishes loading\nlet diagramWdg: any;\nlet fileLoader: MtpFileParser;\nlet diagramRenderer: MtpJsonToMxGraph;\nlet eClassShapeMap: any = {};\nlet graph: any;\nself.mashupDidFinishLoading = function () {\n    // get a reference to the mx diagram widget based on its display name\n    diagramWdg = $w('mtpHMIDiagdam') as any;\n    diagramWdg.graphChanged = (newGraph: any) => {\n        diagramRenderer.initGraph(newGraph);\n        newGraph.refresh();\n        newGraph.getView().revalidate();\n        graph = newGraph;\n    }\n}\n\ndeclare interface Window {\n    [key: string]: any;\n}\n\nself.shapeMappingDidUpdateToValue = (value) => {\n    for (const element of value.rows) {\n        eClassShapeMap[element.eclass] = element.mxgraphShape;\n    }\n}\n\nself.loadFile = async () => {\n    if (!fileLoader) {\n        // add all of mxgraph to window\n        for (const key in diagramWdg.mxGraphNamespace.mxgraph) {\n            if (diagramWdg.mxGraphNamespace.mxgraph.hasOwnProperty(key)) {\n                window[key] = diagramWdg.mxGraphNamespace.mxgraph[key]\n            }\n        }\n        fileLoader = new MtpFileParser();\n        diagramRenderer = new MtpJsonToMxGraph(diagramWdg.mxGraphNamespace.mxgraph, diagramWdg.jqElement[0], eClassShapeMap);\n        self.dispatchEvent('loadSymbols');\n    }\n    diagramWdg.resetCurrentGraph();\n    // load the xml file and parse it into a document\n    let diagram = await fileLoader.loadFile(`/Thingworx/FileRepositories/MtpFileRepository/${self.mtpFilePath}`);\n    graph = diagramRenderer.drawMpt(diagram);\n    self.mtpJson = JSON.stringify(diagram);\n    diagramWdg.setNewActiveGraph(graph);\n    diagramWdg.serviceInvoked(\"GenerateXML\");\n}\n\nself.mtpDataDidUpdateToValue = (value: INFOTABLE) => {\n    if (!graph) {\n        return;\n    }\n    for (const row of value.rows) {\n        let cell = graph.getModel().getCell(row.elementId);\n        if (cell && cell.hasAttribute(\"label\")) {\n            cell.setAttribute(\"value\", isNaN(row.value) ? row.value : parseFloat(row.value).toFixed(2));\n            graph.getModel().setValue(cell, cell.value);\n        }\n    }\n}\n\nself.updateMtpMxGraph = function () {\n\tself.mxGraphXmlUpdated = self.mxGraphXml;\n}", "ColumnPosition" : 22, "DirectLinkUUID" : "", "DisplayName" : "BMTypescriptHost-7", "Exports" : "interface mtpFileController extends TWRuntimeWidget {mtpFilePath: STRING; \n\t    \t/**\n\t    \t * Invoked whenever the mtpFilePath property is about to be updated to a new value as a result of a binding.\n\t    \t * Scripts can override this method to respond the incoming change and accept or reject the new value.\n\t    \t * The default implementation does nothing and accepts all new values.\n\t    \t * @param value - The property's new value.\n\t    \t * @param args - An object containing additional arguments including the previous value (args.fromValue).\n\t    \t * @return - True if the new value should be accepted, false otherwise.\n\t    \t */\n\t\t\tmtpFilePathShouldUpdateToValue(value: any, args: SelfShouldUpdateToValueArgs): boolean; \n\t    \t/**\n\t    \t * Invoked after the mtpFilePath property has been updated as a result of a binding.\n\t    \t * This method is only invoked if the corresponding ..ShouldUpdateToValue method has returned true.\n\t    \t * Scripts can override this method to respond to property updates.\n\t    \t * The default implementation does nothing.\n\t    \t * @param value - The property's new value.\n\t    \t * @param args - An object containing additional arguments including the previous value (args.fromValue).\n\t    \t */\n\t\t\tmtpFilePathDidUpdateToValue(value: any, args: SelfShouldUpdateToValueArgs); \nshapeMapping: INFOTABLE; \n\t    \t/**\n\t    \t * Invoked whenever the shapeMapping property is about to be updated to a new value as a result of a binding.\n\t    \t * Scripts can override this method to respond the incoming change and accept or reject the new value.\n\t    \t * The default implementation does nothing and accepts all new values.\n\t    \t * @param value - The property's new value.\n\t    \t * @param args - An object containing additional arguments including the previous value (args.fromValue).\n\t    \t * @return - True if the new value should be accepted, false otherwise.\n\t    \t */\n\t\t\tshapeMappingShouldUpdateToValue(value: any, args: SelfShouldUpdateToValueArgs): boolean; \n\t    \t/**\n\t    \t * Invoked after the shapeMapping property has been updated as a result of a binding.\n\t    \t * This method is only invoked if the corresponding ..ShouldUpdateToValue method has returned true.\n\t    \t * Scripts can override this method to respond to property updates.\n\t    \t * The default implementation does nothing.\n\t    \t * @param value - The property's new value.\n\t    \t * @param args - An object containing additional arguments including the previous value (args.fromValue).\n\t    \t */\n\t\t\tshapeMappingDidUpdateToValue(value: any, args: SelfShouldUpdateToValueArgs); \nmtpData: INFOTABLE; \n\t    \t/**\n\t    \t * Invoked whenever the mtpData property is about to be updated to a new value as a result of a binding.\n\t    \t * Scripts can override this method to respond the incoming change and accept or reject the new value.\n\t    \t * The default implementation does nothing and accepts all new values.\n\t    \t * @param value - The property's new value.\n\t    \t * @param args - An object containing additional arguments including the previous value (args.fromValue).\n\t    \t * @return - True if the new value should be accepted, false otherwise.\n\t    \t */\n\t\t\tmtpDataShouldUpdateToValue(value: any, args: SelfShouldUpdateToValueArgs): boolean; \n\t    \t/**\n\t    \t * Invoked after the mtpData property has been updated as a result of a binding.\n\t    \t * This method is only invoked if the corresponding ..ShouldUpdateToValue method has returned true.\n\t    \t * Scripts can override this method to respond to property updates.\n\t    \t * The default implementation does nothing.\n\t    \t * @param value - The property's new value.\n\t    \t * @param args - An object containing additional arguments including the previous value (args.fromValue).\n\t    \t */\n\t\t\tmtpDataDidUpdateToValue(value: any, args: SelfShouldUpdateToValueArgs); \nmtpJson: STRING; \n\t    \t/**\n\t    \t * Invoked whenever the mtpJson property is about to be updated to a new value as a result of a binding.\n\t    \t * Scripts can override this method to respond the incoming change and accept or reject the new value.\n\t    \t * The default implementation does nothing and accepts all new values.\n\t    \t * @param value - The property's new value.\n\t    \t * @param args - An object containing additional arguments including the previous value (args.fromValue).\n\t    \t * @return - True if the new value should be accepted, false otherwise.\n\t    \t */\n\t\t\tmtpJsonShouldUpdateToValue(value: any, args: SelfShouldUpdateToValueArgs): boolean; \n\t    \t/**\n\t    \t * Invoked after the mtpJson property has been updated as a result of a binding.\n\t    \t * This method is only invoked if the corresponding ..ShouldUpdateToValue method has returned true.\n\t    \t * Scripts can override this method to respond to property updates.\n\t    \t * The default implementation does nothing.\n\t    \t * @param value - The property's new value.\n\t    \t * @param args - An object containing additional arguments including the previous value (args.fromValue).\n\t    \t */\n\t\t\tmtpJsonDidUpdateToValue(value: any, args: SelfShouldUpdateToValueArgs); \nmxGraphXml: STRING; \n\t    \t/**\n\t    \t * Invoked whenever the mxGraphXml property is about to be updated to a new value as a result of a binding.\n\t    \t * Scripts can override this method to respond the incoming change and accept or reject the new value.\n\t    \t * The default implementation does nothing and accepts all new values.\n\t    \t * @param value - The property's new value.\n\t    \t * @param args - An object containing additional arguments including the previous value (args.fromValue).\n\t    \t * @return - True if the new value should be accepted, false otherwise.\n\t    \t */\n\t\t\tmxGraphXmlShouldUpdateToValue(value: any, args: SelfShouldUpdateToValueArgs): boolean; \n\t    \t/**\n\t    \t * Invoked after the mxGraphXml property has been updated as a result of a binding.\n\t    \t * This method is only invoked if the corresponding ..ShouldUpdateToValue method has returned true.\n\t    \t * Scripts can override this method to respond to property updates.\n\t    \t * The default implementation does nothing.\n\t    \t * @param value - The property's new value.\n\t    \t * @param args - An object containing additional arguments including the previous value (args.fromValue).\n\t    \t */\n\t\t\tmxGraphXmlDidUpdateToValue(value: any, args: SelfShouldUpdateToValueArgs); \nmxGraphXmlUpdated: STRING; \n\t    \t/**\n\t    \t * Invoked whenever the mxGraphXmlUpdated property is about to be updated to a new value as a result of a binding.\n\t    \t * Scripts can override this method to respond the incoming change and accept or reject the new value.\n\t    \t * The default implementation does nothing and accepts all new values.\n\t    \t * @param value - The property's new value.\n\t    \t * @param args - An object containing additional arguments including the previous value (args.fromValue).\n\t    \t * @return - True if the new value should be accepted, false otherwise.\n\t    \t */\n\t\t\tmxGraphXmlUpdatedShouldUpdateToValue(value: any, args: SelfShouldUpdateToValueArgs): boolean; \n\t    \t/**\n\t    \t * Invoked after the mxGraphXmlUpdated property has been updated as a result of a binding.\n\t    \t * This method is only invoked if the corresponding ..ShouldUpdateToValue method has returned true.\n\t    \t * Scripts can override this method to respond to property updates.\n\t    \t * The default implementation does nothing.\n\t    \t * @param value - The property's new value.\n\t    \t * @param args - An object containing additional arguments including the previous value (args.fromValue).\n\t    \t */\n\t\t\tmxGraphXmlUpdatedDidUpdateToValue(value: any, args: SelfShouldUpdateToValueArgs); \nmashupDidFinishLoading(); loadFile(); updateMtpMxGraph(); \t    \t/**\t    \t * Should be invoked to dispatch an event to the Thingworx runtime, causing all actions bound to that event to execute.\n\t    \t * @param event - The name of the event to dispatch.\n\t    \t */\n\t\t\tdispatchEvent(event: string): void;\n\t    \t/**\n\t    \t * Invoked after any property has been updated as a result of a binding.\n\t    \t * This method will be invoked after the specific ..DidUpdateToValue method is invoked.\n\t    \t * Scripts can override this method to react to all property updates.\n\t    \t * @param event - The name of the event to dispatch.\n\t    \t */\n\t\t\tpropertyDidUpdateToValue(property: string, value: any | undefined): void;\n\t    \t/**\n\t    \t * Finds and returns the widget with the given name in the current mashup.\n\t    \t * @param name - The DisplayName of the widget to find.\n\t    \t * @return - The widget object if it was found, undefined otherwise.\n\t    \t */\n\t\t\twidgetNamed(name: string): TWRuntimeWidget | undefined;\n\t    \t/**\n\t    \t * Sends a property update to the given widget as if it came from a binding.\n\t    \t * Supported properties may be updated this way even if they are not bound to anything in the composer.\n\t    \t * @param widget - The widget object whose property should be updated.\n\t    \t * @param args - An object containing additional arguments. This object must have the following properties:\n\t    \t *\t\t\t\t\tforProperty {String} - The name of the property to update.\n\t    \t *\t\t\t\t\tvalue {AnyObject} - The value to which that property should update.\n\t    \t */\n\t\t\tdispatchPropertyUpdateToWidget(widget: any, args: SelfDispatchPropertyUpdateToWidgetArgs): void;\n\t    \t/**\n\t    \t * May be overriden by scripts that create an UI. This method receives the script's container as its parameter.\n\t    \t * It is the script's responsibility to add their content to the supplied container.\n\t    \t * @param container - The container in which the UI elements should be added.\n\t    \t */\n\t\t\trenderWithContainer(container: $): void;\n\t\t}\n", "FullScreen" : false, "Height" : 46, "Id" : "BMTypescriptHost-7", "Left" : 30, "ResponsiveLayout" : false, "RuntimeProperties" : "[{\"name\":\"mtpFilePath\",\"dataType\":\"STRING\",\"type\":\"property\"},{\"name\":\"shapeMapping\",\"dataType\":\"INFOTABLE\",\"type\":\"property\"},{\"name\":\"mtpData\",\"dataType\":\"INFOTABLE\",\"type\":\"property\"},{\"name\":\"mtpJson\",\"dataType\":\"STRING\",\"type\":\"property\"},{\"name\":\"mxGraphXml\",\"dataType\":\"STRING\",\"type\":\"property\"},{\"name\":\"mxGraphXmlUpdated\",\"dataType\":\"STRING\",\"type\":\"property\"},{\"name\":\"mashupDidFinishLoading\",\"dataType\":\"STRING\",\"type\":\"service\"},{\"name\":\"loadFile\",\"dataType\":\"STRING\",\"type\":\"service\"},{\"name\":\"updateMtpMxGraph\",\"dataType\":\"STRING\",\"type\":\"service\"},{\"name\":\"loadSymbols\",\"dataType\":\"STRING\",\"type\":\"event\"}]", "Scope" : "local", "ScrollPosition" : 14, "ShowDataLoading" : true, "Title" : "mtpFileController", "Top" : 20, "TranspiledCode" : "\"use strict\";\r\n//#import mptFileParser from MTPViewerV2\r\n//#import mtpJsonDef from MTPViewerV2\r\n//#import mtpJsonToMxGraph from MTPViewerV2\r\n// exectutes when the mashup finishes loading\r\nlet diagramWdg;\r\nlet fileLoader;\r\nlet diagramRenderer;\r\nlet eClassShapeMap = {};\r\nlet graph;\r\nself.mashupDidFinishLoading = function () {\r\n    // get a reference to the mx diagram widget based on its display name\r\n    diagramWdg = $w('mtpHMIDiagdam');\r\n    diagramWdg.graphChanged = (newGraph) => {\r\n        diagramRenderer.initGraph(newGraph);\r\n        newGraph.refresh();\r\n        newGraph.getView().revalidate();\r\n        graph = newGraph;\r\n    };\r\n};\r\nself.shapeMappingDidUpdateToValue = (value) => {\r\n    for (const element of value.rows) {\r\n        eClassShapeMap[element.eclass] = element.mxgraphShape;\r\n    }\r\n};\r\nself.loadFile = async () => {\r\n    if (!fileLoader) {\r\n        // add all of mxgraph to window\r\n        for (const key in diagramWdg.mxGraphNamespace.mxgraph) {\r\n            if (diagramWdg.mxGraphNamespace.mxgraph.hasOwnProperty(key)) {\r\n                window[key] = diagramWdg.mxGraphNamespace.mxgraph[key];\r\n            }\r\n        }\r\n        fileLoader = new MtpFileParser();\r\n        diagramRenderer = new MtpJsonToMxGraph(diagramWdg.mxGraphNamespace.mxgraph, diagramWdg.jqElement[0], eClassShapeMap);\r\n        self.dispatchEvent('loadSymbols');\r\n    }\r\n    diagramWdg.resetCurrentGraph();\r\n    // load the xml file and parse it into a document\r\n    let diagram = await fileLoader.loadFile(`/Thingworx/FileRepositories/MtpFileRepository/${self.mtpFilePath}`);\r\n    graph = diagramRenderer.drawMpt(diagram);\r\n    self.mtpJson = JSON.stringify(diagram);\r\n    diagramWdg.setNewActiveGraph(graph);\r\n    diagramWdg.serviceInvoked(\"GenerateXML\");\r\n};\r\nself.mtpDataDidUpdateToValue = (value) => {\r\n    if (!graph) {\r\n        return;\r\n    }\r\n    for (const row of value.rows) {\r\n        let cell = graph.getModel().getCell(row.elementId);\r\n        if (cell && cell.hasAttribute(\"label\")) {\r\n            cell.setAttribute(\"value\", isNaN(row.value) ? row.value : parseFloat(row.value).toFixed(2));\r\n            graph.getModel().setValue(cell, cell.value);\r\n        }\r\n    }\r\n};\r\nself.updateMtpMxGraph = function () {\r\n    self.mxGraphXmlUpdated = self.mxGraphXml;\r\n};\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIjEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHdDQUF3QztBQUN4QyxxQ0FBcUM7QUFDckMsMkNBQTJDO0FBRzNDLDZDQUE2QztBQUM3QyxJQUFJLFVBQWUsQ0FBQztBQUNwQixJQUFJLFVBQXlCLENBQUM7QUFDOUIsSUFBSSxlQUFpQyxDQUFDO0FBQ3RDLElBQUksY0FBYyxHQUFRLEVBQUUsQ0FBQztBQUM3QixJQUFJLEtBQVUsQ0FBQztBQUNmLElBQUksQ0FBQyxzQkFBc0IsR0FBRztJQUMxQixxRUFBcUU7SUFDckUsVUFBVSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQVEsQ0FBQztJQUN4QyxVQUFVLENBQUMsWUFBWSxHQUFHLENBQUMsUUFBYSxFQUFFLEVBQUU7UUFDeEMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNwQyxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDbkIsUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ2hDLEtBQUssR0FBRyxRQUFRLENBQUM7SUFDckIsQ0FBQyxDQUFBO0FBQ0wsQ0FBQyxDQUFBO0FBTUQsSUFBSSxDQUFDLDRCQUE0QixHQUFHLENBQUMsS0FBSyxFQUFFLEVBQUU7SUFDMUMsS0FBSyxNQUFNLE9BQU8sSUFBSSxLQUFLLENBQUMsSUFBSSxFQUFFO1FBQzlCLGNBQWMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQztLQUN6RDtBQUNMLENBQUMsQ0FBQTtBQUVELElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxJQUFJLEVBQUU7SUFDdkIsSUFBSSxDQUFDLFVBQVUsRUFBRTtRQUNiLCtCQUErQjtRQUMvQixLQUFLLE1BQU0sR0FBRyxJQUFJLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUU7WUFDbkQsSUFBSSxVQUFVLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDekQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUE7YUFDekQ7U0FDSjtRQUNELFVBQVUsR0FBRyxJQUFJLGFBQWEsRUFBRSxDQUFDO1FBQ2pDLGVBQWUsR0FBRyxJQUFJLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxjQUFjLENBQUMsQ0FBQztRQUNySCxJQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0tBQ3JDO0lBQ0QsVUFBVSxDQUFDLGlCQUFpQixFQUFFLENBQUM7SUFDL0IsaURBQWlEO0lBQ2pELElBQUksT0FBTyxHQUFHLE1BQU0sVUFBVSxDQUFDLFFBQVEsQ0FBQyxpREFBaUQsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7SUFDN0csS0FBSyxHQUFHLGVBQWUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDekMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3ZDLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNwQyxVQUFVLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQzdDLENBQUMsQ0FBQTtBQUVELElBQUksQ0FBQyx1QkFBdUIsR0FBRyxDQUFDLEtBQWdCLEVBQUUsRUFBRTtJQUNoRCxJQUFJLENBQUMsS0FBSyxFQUFFO1FBQ1IsT0FBTztLQUNWO0lBQ0QsS0FBSyxNQUFNLEdBQUcsSUFBSSxLQUFLLENBQUMsSUFBSSxFQUFFO1FBQzFCLElBQUksSUFBSSxHQUFHLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ25ELElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDcEMsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM1RixLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDL0M7S0FDSjtBQUNMLENBQUMsQ0FBQTtBQUVELElBQUksQ0FBQyxnQkFBZ0IsR0FBRztJQUN2QixJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztBQUMxQyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvLyNpbXBvcnQgbXB0RmlsZVBhcnNlciBmcm9tIE1UUFZpZXdlclYyXG4vLyNpbXBvcnQgbXRwSnNvbkRlZiBmcm9tIE1UUFZpZXdlclYyXG4vLyNpbXBvcnQgbXRwSnNvblRvTXhHcmFwaCBmcm9tIE1UUFZpZXdlclYyXG5cblxuLy8gZXhlY3R1dGVzIHdoZW4gdGhlIG1hc2h1cCBmaW5pc2hlcyBsb2FkaW5nXG5sZXQgZGlhZ3JhbVdkZzogYW55O1xubGV0IGZpbGVMb2FkZXI6IE10cEZpbGVQYXJzZXI7XG5sZXQgZGlhZ3JhbVJlbmRlcmVyOiBNdHBKc29uVG9NeEdyYXBoO1xubGV0IGVDbGFzc1NoYXBlTWFwOiBhbnkgPSB7fTtcbmxldCBncmFwaDogYW55O1xuc2VsZi5tYXNodXBEaWRGaW5pc2hMb2FkaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIGdldCBhIHJlZmVyZW5jZSB0byB0aGUgbXggZGlhZ3JhbSB3aWRnZXQgYmFzZWQgb24gaXRzIGRpc3BsYXkgbmFtZVxuICAgIGRpYWdyYW1XZGcgPSAkdygnbXRwSE1JRGlhZ2RhbScpIGFzIGFueTtcbiAgICBkaWFncmFtV2RnLmdyYXBoQ2hhbmdlZCA9IChuZXdHcmFwaDogYW55KSA9PiB7XG4gICAgICAgIGRpYWdyYW1SZW5kZXJlci5pbml0R3JhcGgobmV3R3JhcGgpO1xuICAgICAgICBuZXdHcmFwaC5yZWZyZXNoKCk7XG4gICAgICAgIG5ld0dyYXBoLmdldFZpZXcoKS5yZXZhbGlkYXRlKCk7XG4gICAgICAgIGdyYXBoID0gbmV3R3JhcGg7XG4gICAgfVxufVxuXG5kZWNsYXJlIGludGVyZmFjZSBXaW5kb3cge1xuICAgIFtrZXk6IHN0cmluZ106IGFueTtcbn1cblxuc2VsZi5zaGFwZU1hcHBpbmdEaWRVcGRhdGVUb1ZhbHVlID0gKHZhbHVlKSA9PiB7XG4gICAgZm9yIChjb25zdCBlbGVtZW50IG9mIHZhbHVlLnJvd3MpIHtcbiAgICAgICAgZUNsYXNzU2hhcGVNYXBbZWxlbWVudC5lY2xhc3NdID0gZWxlbWVudC5teGdyYXBoU2hhcGU7XG4gICAgfVxufVxuXG5zZWxmLmxvYWRGaWxlID0gYXN5bmMgKCkgPT4ge1xuICAgIGlmICghZmlsZUxvYWRlcikge1xuICAgICAgICAvLyBhZGQgYWxsIG9mIG14Z3JhcGggdG8gd2luZG93XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIGRpYWdyYW1XZGcubXhHcmFwaE5hbWVzcGFjZS5teGdyYXBoKSB7XG4gICAgICAgICAgICBpZiAoZGlhZ3JhbVdkZy5teEdyYXBoTmFtZXNwYWNlLm14Z3JhcGguaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICAgIHdpbmRvd1trZXldID0gZGlhZ3JhbVdkZy5teEdyYXBoTmFtZXNwYWNlLm14Z3JhcGhba2V5XVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZpbGVMb2FkZXIgPSBuZXcgTXRwRmlsZVBhcnNlcigpO1xuICAgICAgICBkaWFncmFtUmVuZGVyZXIgPSBuZXcgTXRwSnNvblRvTXhHcmFwaChkaWFncmFtV2RnLm14R3JhcGhOYW1lc3BhY2UubXhncmFwaCwgZGlhZ3JhbVdkZy5qcUVsZW1lbnRbMF0sIGVDbGFzc1NoYXBlTWFwKTtcbiAgICAgICAgc2VsZi5kaXNwYXRjaEV2ZW50KCdsb2FkU3ltYm9scycpO1xuICAgIH1cbiAgICBkaWFncmFtV2RnLnJlc2V0Q3VycmVudEdyYXBoKCk7XG4gICAgLy8gbG9hZCB0aGUgeG1sIGZpbGUgYW5kIHBhcnNlIGl0IGludG8gYSBkb2N1bWVudFxuICAgIGxldCBkaWFncmFtID0gYXdhaXQgZmlsZUxvYWRlci5sb2FkRmlsZShgL1RoaW5nd29yeC9GaWxlUmVwb3NpdG9yaWVzL010cEZpbGVSZXBvc2l0b3J5LyR7c2VsZi5tdHBGaWxlUGF0aH1gKTtcbiAgICBncmFwaCA9IGRpYWdyYW1SZW5kZXJlci5kcmF3TXB0KGRpYWdyYW0pO1xuICAgIHNlbGYubXRwSnNvbiA9IEpTT04uc3RyaW5naWZ5KGRpYWdyYW0pO1xuICAgIGRpYWdyYW1XZGcuc2V0TmV3QWN0aXZlR3JhcGgoZ3JhcGgpO1xuICAgIGRpYWdyYW1XZGcuc2VydmljZUludm9rZWQoXCJHZW5lcmF0ZVhNTFwiKTtcbn1cblxuc2VsZi5tdHBEYXRhRGlkVXBkYXRlVG9WYWx1ZSA9ICh2YWx1ZTogSU5GT1RBQkxFKSA9PiB7XG4gICAgaWYgKCFncmFwaCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGZvciAoY29uc3Qgcm93IG9mIHZhbHVlLnJvd3MpIHtcbiAgICAgICAgbGV0IGNlbGwgPSBncmFwaC5nZXRNb2RlbCgpLmdldENlbGwocm93LmVsZW1lbnRJZCk7XG4gICAgICAgIGlmIChjZWxsICYmIGNlbGwuaGFzQXR0cmlidXRlKFwibGFiZWxcIikpIHtcbiAgICAgICAgICAgIGNlbGwuc2V0QXR0cmlidXRlKFwidmFsdWVcIiwgaXNOYU4ocm93LnZhbHVlKSA/IHJvdy52YWx1ZSA6IHBhcnNlRmxvYXQocm93LnZhbHVlKS50b0ZpeGVkKDIpKTtcbiAgICAgICAgICAgIGdyYXBoLmdldE1vZGVsKCkuc2V0VmFsdWUoY2VsbCwgY2VsbC52YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbnNlbGYudXBkYXRlTXRwTXhHcmFwaCA9IGZ1bmN0aW9uICgpIHtcblx0c2VsZi5teEdyYXBoWG1sVXBkYXRlZCA9IHNlbGYubXhHcmFwaFhtbDtcbn0iXX0=", "Type" : "BMTypescriptHost", "Visible" : true, "Width" : 164, "Z-index" : 10, "_Height" : 1064, "_Left" : 50, "_NavigationWidth" : 256, "_PropertiesWidth" : 344, "_Top" : 45, "_Width" : 2056, "__TypeDisplayName" : "TypeScript Object" }, "Widgets" : [ ] }, { "Properties" : { "Area" : "UI", "Code" : "\n\n/**\n * $Id: mxPidValves.js,v 1.5 2013/10/22 12:55:55 mate Exp $\n * Copyright (c) 2006-2013, JGraph Ltd\n */\nself.execute = function () {\n    //**********************************************************************************************************************************************************\n    //Valve\n    //**********************************************************************************************************************************************************\n    /**\n     * Extends mxShape.\n     */\n    function mxShapePidValve(bounds, fill, stroke, strokewidth) {\n        mxShape.call(this);\n        this.bounds = bounds;\n        this.fill = fill;\n        this.stroke = stroke;\n        this.strokewidth = (strokewidth != null) ? strokewidth : 1;\n    };\n\n    /**\n     * Extends mxShape.\n     */\n    mxUtils.extend(mxShapePidValve, mxShape);\n\n    mxShapePidValve.prototype.cst = {\n        SHAPE_VALVE: 'mxgraph.pid2valves.valve',\n        //states\n        DEFAULT_STATE: 'defState',\n        CLOSED: 'closed',\n        OPEN: 'open',\n        //actuators\n        ACTUATOR: 'actuator',\n        MANUAL: 'man',\n        DIAPHRAGM: 'diaph',\n        BALANCED_DIAPHRAGM: 'balDiaph',\n        MOTOR: 'motor',\n        NONE: 'none',\n        SPRING: 'spring',\n        PILOT: 'pilot',\n        POWERED: 'powered',\n        SOLENOID: 'solenoid',\n        SOLENOID_MANUAL_RESET: 'solenoidManRes',\n        SINGLE_ACTING: 'singActing',\n        DOUBLE_ACTING: 'dblActing',\n        PILOT_CYLINDER: 'pilotCyl',\n        DIGITAL: 'digital',\n        WEIGHT: 'weight',\n        KEY: 'key',\n        ELECTRO_HYDRAULIC: 'elHyd',\n        //types\n        VALVE_TYPE: 'valveType',\n        BUTTERFLY: 'butterfly',\n        CHECK: 'check',\n        GATE: 'gate',\n        GLOBE: 'globe',\n        NEEDLE: 'needle',\n        PLUG: 'plug',\n        SELF_DRAINING: 'selfDrain',\n        ANGLE: 'angle',\n        ANGLE_GLOBE: 'angleGlobe',\n        THREE_WAY: 'threeWay',\n        ANGLE_BLOWDOWN: 'angBlow',\n        BALL: 'ball'\n    };\n\n    /**\n     * Function: paintVertexShape\n     * \n     * Paints the vertex shape.\n     */\n    mxShapePidValve.prototype.paintVertexShape = function (c, x, y, w, h) {\n        var valveType = mxUtils.getValue(this.style, mxShapePidValve.prototype.cst.VALVE_TYPE, 'gate');\n        var actuator = mxUtils.getValue(this.style, mxShapePidValve.prototype.cst.ACTUATOR, mxShapePidValve.prototype.cst.NONE);\n        var actH = 0;\n\n        if (actuator !== 'none') {\n            if (this.isAngleVariant(valveType)) {\n                actH = h * 0.3333;\n            }\n            else {\n                actH = h * 0.4;\n            }\n        }\n\n        c.translate(x, y);\n        c.setLineJoin('round');\n\n        this.background(c, x, y, w, h, valveType, actuator, actH);\n        c.setShadow(false);\n        this.foreground(c, x, y, w, h, valveType, actuator, actH);\n    };\n\n    mxShapePidValve.prototype.background = function (c, x, y, w, h, valveType, actuator, actH) {\n        //draw the actuator\n        if (actuator !== mxShapePidValve.prototype.cst.NONE) {\n            if (this.isAngleVariant(valveType)) {\n                this.drawActuatorBg(c, x, y, w, h / 1.2, actuator, actH);\n            }\n            else {\n                this.drawActuatorBg(c, x, y, w, h, actuator, actH);\n            }\n        }\n\n        //draw the valve body\n        if (this.isGateVariant(valveType)) {\n            this.drawGateVariantBg(c, 0, 0, w, h, valveType, actuator, actH);\n        }\n        else if (this.isAngleVariant(valveType)) {\n            this.drawAngleVariantBg(c, 0, 0, w, h, valveType, actuator, actH);\n        }\n        else if (valveType === mxShapePidValve.prototype.cst.BUTTERFLY) {\n            this.drawButterflyValve(c, 0, 0, w, h, actuator, actH);\n        }\n        else if (valveType === mxShapePidValve.prototype.cst.CHECK) {\n            this.drawCheckValve(c, 0, 0, w, h, actuator, actH);\n        }\n    };\n\n    mxShapePidValve.prototype.foreground = function (c, x, y, w, h, valveType, actuator, actH) {\n        var valveType = mxUtils.getValue(this.style, mxShapePidValve.prototype.cst.VALVE_TYPE, 'gate');\n\n        //draw the actuator\n        if (actuator !== mxShapePidValve.prototype.cst.NONE) {\n            if (this.isAngleVariant(valveType)) {\n                this.drawActuatorFg(c, x, y, w, h / 1.2, actuator, actH);\n            }\n            else {\n                this.drawActuatorFg(c, x, y, w, h, actuator, actH);\n            }\n        }\n\n        if (this.isGateVariant(valveType)) {\n            this.drawGateVariantFg(c, 0, 0, w, h, valveType, actuator, actH);\n        }\n        if (this.isAngleVariant(valveType)) {\n            this.drawAngleVariantFg(c, 0, 0, w, h, valveType, actuator, actH);\n        }\n    };\n\n    mxShapePidValve.prototype.drawActuatorBg = function (c, x, y, w, h, actuator) {\n        if (this.isSquareVariant(actuator)) {\n            c.translate(w * 0.325, 0);\n            this.drawSquareAct(c, w * 0.35, h * 0.7, actuator);\n            c.translate(- w * 0.325, 0);\n        }\n        else if (actuator === mxShapePidValve.prototype.cst.MANUAL) {\n            c.translate(w * 0.25, h * 0.15);\n            this.drawManAct(c, w * 0.5, h * 0.55);\n            c.translate(- w * 0.25, - h * 0.15);\n        }\n        else if (actuator === mxShapePidValve.prototype.cst.DIAPHRAGM) {\n            c.translate(w * 0.25, h * 0.1);\n            this.drawDiaphAct(c, w * 0.5, h * 0.6);\n            c.translate(- w * 0.25, - h * 0.1);\n        }\n        else if (actuator === mxShapePidValve.prototype.cst.BALANCED_DIAPHRAGM) {\n            c.translate(w * 0.25, h * 0.1);\n            this.drawBalDiaphActBg(c, w * 0.5, h * 0.6);\n            c.translate(- w * 0.25, - h * 0.1);\n        }\n        else if (actuator === mxShapePidValve.prototype.cst.MOTOR || actuator === mxShapePidValve.prototype.cst.ELECTRO_HYDRAULIC) {\n            c.translate(w * 0.325, 0);\n            this.drawCircleAct(c, w * 0.35, h * 0.7, actuator);\n            c.translate(- w * 0.325, 0);\n        }\n        else if (actuator === mxShapePidValve.prototype.cst.SPRING) {\n            c.translate(w * 0.36, 0);\n            this.drawSpringAct(c, w * 0.28, h * 0.7);\n            c.translate(- w * 0.36, 0);\n        }\n        else if (actuator === mxShapePidValve.prototype.cst.SOLENOID_MANUAL_RESET) {\n            c.translate(w * 0.325, 0);\n            this.drawSolenoidManResetAct(c, w * 0.575, h * 0.7);\n            c.translate(- w * 0.325, 0);\n        }\n        else if (actuator === mxShapePidValve.prototype.cst.SINGLE_ACTING) {\n            c.translate(w * 0.35, 0);\n            this.drawSingActingActBg(c, w * 0.65, h * 0.7);\n            c.translate(- w * 0.35, 0);\n        }\n        else if (actuator === mxShapePidValve.prototype.cst.DOUBLE_ACTING) {\n            c.translate(w * 0.35, 0);\n            this.drawDblActingActBg(c, w * 0.65, h * 0.7);\n            c.translate(- w * 0.35, 0);\n        }\n        else if (actuator === mxShapePidValve.prototype.cst.PILOT_CYLINDER) {\n            c.translate(w * 0.35, 0);\n            this.drawPilotCylinderActBg(c, w * 0.65, h * 0.7);\n            c.translate(- w * 0.35, 0);\n        }\n        else if (actuator === mxShapePidValve.prototype.cst.ANGLE_BLOWDOWN) {\n            c.translate(w * 0.5, h * 0.2);\n            this.drawAngleBlowdownAct(c, w * 0.4, h * 0.5);\n            c.translate(- w * 0.5, - h * 0.2);\n        }\n    };\n\n    mxShapePidValve.prototype.drawActuatorFg = function (c, x, y, w, h, actuator) {\n        if (actuator === mxShapePidValve.prototype.cst.BALANCED_DIAPHRAGM) {\n            c.translate(w * 0.25, h * 0.1);\n            this.drawBalDiaphActFg(c, w * 0.5, h * 0.6);\n            c.translate(- w * 0.25, - h * 0.1);\n        }\n        else if (actuator === mxShapePidValve.prototype.cst.SINGLE_ACTING ||\n            actuator === mxShapePidValve.prototype.cst.DOUBLE_ACTING ||\n            actuator === mxShapePidValve.prototype.cst.PILOT_CYLINDER) {\n            c.translate(w * 0.35, 0);\n            this.drawActingActFg(c, w * 0.65, h * 0.7);\n            c.translate(- w * 0.35, 0);\n        }\n    };\n\n    mxShapePidValve.prototype.drawManAct = function (c, w, h) {\n        c.begin();\n        c.moveTo(0, 0);\n        c.lineTo(w, 0);\n        c.moveTo(w * 0.5, 0);\n        c.lineTo(w * 0.5, h);\n        c.stroke();\n    };\n\n    mxShapePidValve.prototype.drawDiaphAct = function (c, w, h) {\n        c.begin();\n        c.moveTo(w * 0.5, h * 0.2);\n        c.lineTo(w * 0.5, h);\n        c.stroke();\n\n        c.begin();\n        c.moveTo(0, h * 0.2);\n        c.arcTo(w * 0.6, h * 0.4, 0, 0, 1, w, h * 0.2);\n        c.close();\n        c.fillAndStroke();\n    };\n\n    mxShapePidValve.prototype.drawBalDiaphActBg = function (c, w, h) {\n        c.ellipse(0, 0, w, h * 0.3);\n        c.fillAndStroke();\n\n        c.begin();\n        c.moveTo(w * 0.5, h * 0.3);\n        c.lineTo(w * 0.5, h);\n        c.stroke();\n    };\n\n    mxShapePidValve.prototype.drawBalDiaphActFg = function (c, w, h) {\n        c.begin();\n        c.moveTo(0, h * 0.15);\n        c.lineTo(w, h * 0.15);\n        c.stroke();\n    };\n\n    mxShapePidValve.prototype.drawCircleAct = function (c, w, h, actuator) {\n        c.ellipse(0, 0, w, h * 0.5);\n        c.fillAndStroke();\n\n        c.begin();\n        c.moveTo(w * 0.5, h * 0.5);\n        c.lineTo(w * 0.5, h);\n        c.stroke();\n\n        var m = '';\n\n        if (actuator === mxShapePidValve.prototype.cst.MOTOR) {\n            m = 'M';\n        }\n        else if (actuator === mxShapePidValve.prototype.cst.ELECTRO_HYDRAULIC) {\n            m = 'E/H';\n        }\n\n        c.setFontStyle(1);\n        c.setFontFamily('Helvetica');\n        c.setFontSize(Math.min(w, h) * 0.4);\n        c.text(w * 0.5, h * 0.25, 0, 0, m, mxConstants.ALIGN_CENTER, mxConstants.ALIGN_MIDDLE, 0, null, 0, 0, 0);\n    };\n\n    mxShapePidValve.prototype.drawSpringAct = function (c, w, h) {\n        c.begin();\n        c.moveTo(w * 0.5, 0);\n        c.lineTo(w * 0.5, h);\n        c.moveTo(w * 0.32, h * 0.16);\n        c.lineTo(w * 0.68, h * 0.08);\n        c.moveTo(w * 0.21, h * 0.32);\n        c.lineTo(w * 0.79, h * 0.20);\n        c.moveTo(w * 0.1, h * 0.52);\n        c.lineTo(w * 0.9, h * 0.36);\n        c.moveTo(0, h * 0.72);\n        c.lineTo(w, h * 0.5);\n        c.stroke();\n    };\n\n    mxShapePidValve.prototype.drawSolenoidManResetAct = function (c, w, h) {\n        c.rect(0, 0, w * 0.61, h * 0.46);\n        c.fillAndStroke();\n\n        c.begin();\n        c.moveTo(w * 0.56, h * 0.6);\n        c.lineTo(w * 0.78, h * 0.5);\n        c.lineTo(w, h * 0.6);\n        c.lineTo(w * 0.78, h * 0.7);\n        c.close();\n        c.fillAndStroke();\n\n        c.begin();\n        c.moveTo(w * 0.305, h * 0.46);\n        c.lineTo(w * 0.305, h);\n        c.moveTo(w * 0.305, h * 0.6);\n        c.lineTo(w * 0.56, h * 0.6);\n        c.stroke();\n\n        c.setFontStyle(1);\n        c.setFontFamily('Helvetica');\n        c.setFontSize(Math.min(w, h) * 0.4);\n        c.text(w * 0.305, h * 0.23, 0, 0, 'S', mxConstants.ALIGN_CENTER, mxConstants.ALIGN_MIDDLE, 0, null, 0, 0, 0);\n\n        c.setFontStyle(0);\n        c.setFontSize(Math.min(w, h) * 0.15);\n        c.text(w * 0.78, h * 0.6, 0, 0, 'R', mxConstants.ALIGN_CENTER, mxConstants.ALIGN_MIDDLE, 0, null, 0, 0, 0);\n    };\n\n    mxShapePidValve.prototype.drawSingActingActBg = function (c, w, h) {\n        c.rect(0, 0, w * 0.46, h * 0.46);\n        c.fillAndStroke();\n\n        c.begin();\n        c.moveTo(w * 0.23, h * 0.46);\n        c.lineTo(w * 0.23, h);\n        c.moveTo(w * 0.46, h * 0.23);\n        c.lineTo(w, h * 0.23);\n        c.moveTo(w * 0.77, h * 0.15);\n        c.lineTo(w * 0.69, h * 0.31);\n        c.moveTo(w * 0.82, h * 0.15);\n        c.lineTo(w * 0.74, h * 0.31);\n        c.stroke();\n    };\n\n    mxShapePidValve.prototype.drawActingActFg = function (c, w, h) {\n        c.begin();\n        c.moveTo(w * 0.23, h * 0.23);\n        c.lineTo(w * 0.23, h * 0.46);\n        c.moveTo(0, h * 0.23);\n        c.lineTo(w * 0.46, h * 0.23);\n        c.stroke();\n    };\n\n    mxShapePidValve.prototype.drawDblActingActBg = function (c, w, h) {\n        c.rect(0, 0, w * 0.46, h * 0.46);\n        c.fillAndStroke();\n\n        c.begin();\n        c.moveTo(w * 0.23, h * 0.46);\n        c.lineTo(w * 0.23, h);\n        c.moveTo(w * 0.46, h * 0.115);\n        c.lineTo(w, h * 0.115);\n        c.moveTo(w * 0.77, h * 0.035);\n        c.lineTo(w * 0.69, h * 0.195);\n        c.moveTo(w * 0.82, h * 0.035);\n        c.lineTo(w * 0.74, h * 0.195);\n        c.moveTo(w * 0.46, h * 0.345);\n        c.lineTo(w, h * 0.345);\n        c.moveTo(w * 0.77, h * 0.265);\n        c.lineTo(w * 0.69, h * 0.425);\n        c.moveTo(w * 0.82, h * 0.265);\n        c.lineTo(w * 0.74, h * 0.425);\n        c.stroke();\n    };\n\n    mxShapePidValve.prototype.drawPilotCylinderActBg = function (c, w, h) {\n        c.rect(0, 0, w * 0.46, h * 0.46);\n        c.fillAndStroke();\n\n        c.begin();\n        c.moveTo(w * 0.23, h * 0.46);\n        c.lineTo(w * 0.23, h);\n        c.moveTo(w * 0.46, h * 0.23);\n        c.lineTo(w * 0.77, h * 0.23);\n        c.stroke();\n\n        c.rect(w * 0.77, h * 0.115, w * 0.23, h * 0.23);\n        c.fillAndStroke();\n\n        c.setFontStyle(0);\n        c.setFontFamily('Helvetica');\n        c.setFontSize(Math.min(w, h) * 0.15);\n        c.text(w * 0.885, h * 0.23, 0, 0, 'P', mxConstants.ALIGN_CENTER, mxConstants.ALIGN_MIDDLE, 0, null, 0, 0, 0);\n    };\n\n    mxShapePidValve.prototype.drawAngleBlowdownAct = function (c, w, h) {\n        c.begin();\n        c.moveTo(w * 0.34, 0);\n        c.lineTo(w, h * 0.405);\n        c.moveTo(0, h);\n        c.lineTo(w * 0.665, h * 0.205);\n        c.stroke();\n    };\n\n    mxShapePidValve.prototype.drawSquareAct = function (c, w, h, actuator) {\n        c.rect(0, 0, w, h * 0.5);\n        c.fillAndStroke();\n\n        c.begin();\n        c.moveTo(w * 0.5, h * 0.5);\n        c.lineTo(w * 0.5, h);\n        c.stroke();\n\n        var m = '';\n\n        if (actuator === mxShapePidValve.prototype.cst.PILOT) {\n            m = 'P';\n        }\n        else if (actuator === mxShapePidValve.prototype.cst.SOLENOID) {\n            m = 'S';\n        }\n        else if (actuator === mxShapePidValve.prototype.cst.DIGITAL) {\n            m = 'D';\n        }\n        else if (actuator === mxShapePidValve.prototype.cst.WEIGHT) {\n            m = 'W';\n        }\n        else if (actuator === mxShapePidValve.prototype.cst.KEY) {\n            m = 'K';\n        }\n\n        c.setFontStyle(1);\n        c.setFontFamily('Helvetica');\n        c.setFontSize(Math.min(w, h) * 0.4);\n        c.text(w * 0.5, h * 0.25, 0, 0, m, mxConstants.ALIGN_CENTER, mxConstants.ALIGN_MIDDLE, 0, null, 0, 0, 0);\n    };\n\n    mxShapePidValve.prototype.drawGateVariantFg = function (c, x, y, w, h, valveType, actuator, actH) {\n        var defState = mxUtils.getValue(this.style, mxShapePidValve.prototype.cst.DEFAULT_STATE, 'open');\n        var fillColor = mxUtils.getValue(this.style, mxConstants.STYLE_FILLCOLOR, '#ffffff');\n        var strokeColor = mxUtils.getValue(this.style, mxConstants.STYLE_STROKECOLOR, '#000000');\n\n        if (valveType === mxShapePidValve.prototype.cst.BALL) {\n            c.ellipse(x + w * 0.3, y + actH + (h - actH) * 0.18, w * 0.4, (h - actH) * 0.64);\n            c.fillAndStroke();\n        }\n        else if (valveType === mxShapePidValve.prototype.cst.GLOBE) {\n            c.ellipse(x + w * 0.3, y + actH + (h - actH) * 0.18, w * 0.4, (h - actH) * 0.64);\n            c.setFillColor(strokeColor);\n            c.fillAndStroke();\n            c.setFillColor(fillColor);\n        }\n        else if (valveType === mxShapePidValve.prototype.cst.PLUG) {\n            this.drawPlug(c, x + w * 0.4, y + actH + (h - actH) * 0.25, w * 0.2, (h - actH) * 0.5);\n        }\n        else if (valveType === mxShapePidValve.prototype.cst.NEEDLE) {\n            this.drawNeedle(c, x + w * 0.45, y + actH + (h - actH) * 0.1, w * 0.1, (h - actH) * 0.9);\n        }\n        else if (valveType === mxShapePidValve.prototype.cst.SELF_DRAINING) {\n            this.drawDrain(c, x + w * 0.48, y + actH + (h - actH) * 0.5, w * 0.04, (h - actH) * 0.49);\n        }\n    };\n\n    mxShapePidValve.prototype.drawAngleVariantFg = function (c, x, y, w, h, valveType, actuator, actH) {\n        var defState = mxUtils.getValue(this.style, mxShapePidValve.prototype.cst.DEFAULT_STATE, 'open');\n        var fillColor = mxUtils.getValue(this.style, mxConstants.STYLE_FILLCOLOR, '#ffffff');\n        var strokeColor = mxUtils.getValue(this.style, mxConstants.STYLE_STROKECOLOR, '#000000');\n\n        if (valveType === mxShapePidValve.prototype.cst.ANGLE_GLOBE) {\n            if (actuator === 'none') {\n                c.ellipse(w * 0.34, h * 0.175, w * 0.32, h * 0.4);\n            }\n            else {\n                c.ellipse(w * 0.34, h * 0.45, w * 0.32, h * 0.2667);\n            }\n            c.setFillColor(strokeColor);\n            c.fillAndStroke();\n            c.setFillColor(fillColor);\n        }\n    };\n\n    mxShapePidValve.prototype.drawGateVariantBg = function (c, x, y, w, h, valveType, actuator, actH) {\n        if (valveType === mxShapePidValve.prototype.cst.GATE) {\n            this.drawGateValve(c, x, y + actH, w, h - actH);\n        }\n        else if (valveType === mxShapePidValve.prototype.cst.BALL || valveType === mxShapePidValve.prototype.cst.GLOBE) {\n            c.ellipse(x + w * 0.3, y + actH + (h - actH) * 0.18, w * 0.4, (h - actH) * 0.64);\n            c.fillAndStroke();\n            this.drawGateValve(c, x, y + actH, w, h - actH);\n        }\n        else if (valveType === mxShapePidValve.prototype.cst.PLUG) {\n            this.drawPlug(c, x + w * 0.4, y + actH + (h - actH) * 0.25, w * 0.2, (h - actH) * 0.5);\n            this.drawGateValve(c, x, y + actH, w, h - actH);\n        }\n        else if (valveType === mxShapePidValve.prototype.cst.NEEDLE) {\n            this.drawNeedle(c, x + w * 0.45, y + actH + (h - actH) * 0.1, w * 0.1, (h - actH) * 0.9);\n            this.drawGateValve(c, x, y + actH, w, h - actH);\n        }\n        else if (valveType === mxShapePidValve.prototype.cst.SELF_DRAINING) {\n            this.drawDrain(c, x + w * 0.48, y + actH + (h - actH) * 0.5, w * 0.04, (h - actH) * 0.49);\n            this.drawGateValve(c, x, y + actH, w, h - actH);\n        }\n    };\n\n    mxShapePidValve.prototype.drawAngleVariantBg = function (c, x, y, w, h, valveType, actuator, actH) {\n        if (valveType === mxShapePidValve.prototype.cst.ANGLE) {\n            this.drawAngleValve(c, w * 0.2, y + actH, w * 0.8, h - actH);\n        }\n        else if (valveType === mxShapePidValve.prototype.cst.ANGLE_GLOBE) {\n            this.drawAngleGlobeValveBg(c, w * 0.2, y + actH, w * 0.8, h - actH);\n        }\n        else if (valveType === mxShapePidValve.prototype.cst.THREE_WAY) {\n            this.drawThreeWayValve(c, 0, y + actH, w, h - actH);\n        }\n        else if (valveType === mxShapePidValve.prototype.cst.ANGLE_BLOWDOWN) {\n            this.drawAngleBlowdownValve(c, x, y + actH, w, h - actH);\n        }\n    };\n\n    mxShapePidValve.prototype.drawPlug = function (c, x, y, w, h) {\n        c.translate(x, y);\n        c.begin();\n        c.moveTo(0, h * 0.5);\n        c.lineTo(w * 0.5, 0);\n        c.lineTo(w, h * 0.5);\n        c.lineTo(w * 0.5, h);\n        c.close();\n        c.fillAndStroke();\n        c.translate(-x, -y);\n    };\n\n    mxShapePidValve.prototype.drawNeedle = function (c, x, y, w, h) {\n        var fillColor = mxUtils.getValue(this.style, mxConstants.STYLE_FILLCOLOR, '#ffffff');\n        var strokeColor = mxUtils.getValue(this.style, mxConstants.STYLE_STROKECOLOR, '#000000');\n\n        c.translate(x, y);\n        c.begin();\n        c.moveTo(0, 0);\n        c.lineTo(w, 0);\n        c.lineTo(w * 0.5, h);\n        c.close();\n        c.setFillColor(strokeColor);\n        c.fillAndStroke();\n        c.setFillColor(fillColor);\n        c.translate(-x, -y);\n    };\n\n    mxShapePidValve.prototype.drawDrain = function (c, x, y, w, h) {\n        var fillColor = mxUtils.getValue(this.style, mxConstants.STYLE_FILLCOLOR, '#ffffff');\n        var strokeColor = mxUtils.getValue(this.style, mxConstants.STYLE_STROKECOLOR, '#000000');\n\n        c.translate(x, y);\n        c.begin();\n        c.moveTo(w * 0.5, 0);\n        c.lineTo(w * 0.5, h * 0.96);\n        c.stroke();\n\n        c.begin();\n        c.moveTo(0, h * 0.9);\n        c.lineTo(w, h * 0.9);\n        c.lineTo(w * 0.5, h);\n        c.close();\n        c.setFillColor(strokeColor);\n        c.fillAndStroke();\n        c.setFillColor(fillColor);\n        c.translate(-x, -y);\n    };\n\n    mxShapePidValve.prototype.drawGateValve = function (c, x, y, w, h) {\n        var defState = mxUtils.getValue(this.style, mxShapePidValve.prototype.cst.DEFAULT_STATE, 'open');\n        var fillColor = mxUtils.getValue(this.style, mxConstants.STYLE_FILLCOLOR, '#ffffff');\n        var strokeColor = mxUtils.getValue(this.style, mxConstants.STYLE_STROKECOLOR, '#000000');\n\n        c.translate(x, y);\n        c.begin();\n        c.moveTo(0, 0);\n        c.lineTo(w * 0.5, h * 0.5);\n        c.lineTo(0, h);\n        c.close();\n        c.moveTo(w, 0);\n        c.lineTo(w * 0.5, h * 0.5);\n        c.lineTo(w, h);\n        c.close();\n\n        if (defState === mxShapePidValve.prototype.cst.CLOSED) {\n            c.setFillColor(strokeColor);\n            c.fillAndStroke();\n            c.setFillColor(fillColor);\n        }\n        else {\n            c.fillAndStroke();\n        }\n\n        c.translate(-x, -y);\n    };\n\n    mxShapePidValve.prototype.drawAngleValve = function (c, x, y, w, h) {\n        c.translate(x, y);\n\n        c.begin();\n        c.moveTo(w * 0.375, h * 0.375);\n        c.lineTo(w, 0);\n        c.lineTo(w, h * 0.75);\n        c.close();\n        c.moveTo(w * 0.375, h * 0.375);\n        c.lineTo(w * 0.75, h);\n        c.lineTo(0, h);\n        c.close();\n        c.fillAndStroke();\n\n        c.translate(-x, -y);\n    };\n\n    mxShapePidValve.prototype.drawAngleGlobeValveBg = function (c, x, y, w, h) {\n        c.translate(x, y);\n\n        c.ellipse(w * 0.175, h * 0.175, w * 0.4, h * 0.4);\n        c.fillAndStroke();\n        c.begin();\n        c.moveTo(w * 0.375, h * 0.375);\n        c.lineTo(w, 0);\n        c.lineTo(w, h * 0.75);\n        c.close();\n        c.moveTo(w * 0.375, h * 0.375);\n        c.lineTo(w * 0.75, h);\n        c.lineTo(0, h);\n        c.close();\n        c.fillAndStroke();\n        c.translate(-x, -y);\n    };\n\n    mxShapePidValve.prototype.drawAngleGlobeValveFg = function (c, x, y, w, h) {\n        c.translate(x, y);\n        c.ellipse(w * 0.275, h * 0.275, w * 0.2, h * 0.2);\n        c.fillAndStroke();\n        c.translate(-x, -y);\n    };\n\n    mxShapePidValve.prototype.drawThreeWayValve = function (c, x, y, w, h) {\n        c.translate(x, y);\n\n        c.begin();\n        c.moveTo(0, 0);\n        c.lineTo(w * 0.5, h * 0.375);\n        c.lineTo(0, h * 0.75);\n        c.close();\n\n        c.moveTo(w, 0);\n        c.lineTo(w * 0.5, h * 0.375);\n        c.lineTo(w, h * 0.75);\n        c.close();\n\n        c.moveTo(w * 0.5, h * 0.375);\n        c.lineTo(w * 0.8, h);\n        c.lineTo(w * 0.2, h);\n        c.close();\n        c.fillAndStroke();\n\n        c.translate(-x, -y);\n    };\n\n    mxShapePidValve.prototype.drawAngleBlowdownValve = function (c, x, y, w, h) {\n\n    };\n\n\n    mxShapePidValve.prototype.drawButterflyValve = function (c, x, y, w, h, actuator, actH) {\n        var fillColor = mxUtils.getValue(this.style, mxConstants.STYLE_FILLCOLOR, '#ffffff');\n        var strokeColor = mxUtils.getValue(this.style, mxConstants.STYLE_STROKECOLOR, '#000000');\n\n        var yv = y + actH;\n        var hv = h - actH;\n\n        c.translate(x, yv);\n        c.begin();\n        c.moveTo(0, 0);\n        c.lineTo(0, hv);\n        c.moveTo(w, 0);\n        c.lineTo(w, hv);\n\n        c.moveTo(w * 0.05, hv * 0.05);\n        c.lineTo(w * 0.95, hv * 0.95);\n\n        c.fillAndStroke();\n\n        c.ellipse(w * 0.4, hv * 0.33, w * 0.2, hv * 0.33);\n        c.fillAndStroke();\n\n        c.translate(-x, -y);\n    };\n\n    mxShapePidValve.prototype.drawCheckValve = function (c, x, y, w, h, actuator, actH) {\n        var fillColor = mxUtils.getValue(this.style, mxConstants.STYLE_FILLCOLOR, '#ffffff');\n        var strokeColor = mxUtils.getValue(this.style, mxConstants.STYLE_STROKECOLOR, '#000000');\n\n        var yv = y + actH;\n        var hv = h - actH;\n\n        c.translate(x, yv);\n        c.begin();\n        c.moveTo(0, 0);\n        c.lineTo(0, hv);\n        c.moveTo(w, 0);\n        c.lineTo(w, hv);\n        c.moveTo(w * 0.05, hv * 0.05);\n        c.lineTo(w * 0.95, hv * 0.95);\n        c.fillAndStroke();\n\n        c.begin();\n        c.moveTo(w * 0.8925, hv * 0.815);\n        c.lineTo(w * 0.957, hv * 0.955);\n        c.lineTo(w * 0.85, hv * 0.928);\n        c.close();\n        c.setFillColor(strokeColor);\n        c.fillAndStroke();\n        c.setFillColor(fillColor);\n\n        c.translate(-x, -y);\n    };\n\n    mxShapePidValve.prototype.isGateVariant = function (valveType) {\n        if (valveType === mxShapePidValve.prototype.cst.GATE ||\n            valveType === mxShapePidValve.prototype.cst.BALL ||\n            valveType === mxShapePidValve.prototype.cst.PLUG ||\n            valveType === mxShapePidValve.prototype.cst.NEEDLE ||\n            valveType === mxShapePidValve.prototype.cst.SELF_DRAINING ||\n            valveType === mxShapePidValve.prototype.cst.GLOBE) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n\n    mxShapePidValve.prototype.isAngleVariant = function (valveType) {\n        if (valveType === mxShapePidValve.prototype.cst.ANGLE ||\n            valveType === mxShapePidValve.prototype.cst.ANGLE_GLOBE ||\n            valveType === mxShapePidValve.prototype.cst.THREE_WAY ||\n            valveType === mxShapePidValve.prototype.cst.ANGLE_BLOWDOWN) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n\n    mxShapePidValve.prototype.isSquareVariant = function (actType) {\n        if (actType === mxShapePidValve.prototype.cst.PILOT ||\n            actType === mxShapePidValve.prototype.cst.SOLENOID ||\n            actType === mxShapePidValve.prototype.cst.POWERED ||\n            actType === mxShapePidValve.prototype.cst.DIGITAL ||\n            actType === mxShapePidValve.prototype.cst.WEIGHT ||\n            actType === mxShapePidValve.prototype.cst.KEY) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n\n    mxCellRenderer.registerShape(mxShapePidValve.prototype.cst.SHAPE_VALVE, mxShapePidValve);\n\n    //**********************************************************************************************************************************************************\n    //Integrated Block And Bleed Valve\n    //**********************************************************************************************************************************************************\n    /**\n    * Extends mxShape.\n    */\n    function mxShapePidIntBlockBleedValve(bounds, fill, stroke, strokewidth) {\n        mxShape.call(this);\n        this.bounds = bounds;\n        this.fill = fill;\n        this.stroke = stroke;\n        this.strokewidth = (strokewidth != null) ? strokewidth : 1;\n    };\n\n    /**\n    * Extends mxShapePidValve.\n    */\n    mxUtils.extend(mxShapePidIntBlockBleedValve, mxShapePidValve);\n\n    /**\n    * Function: paintVertexShape\n    * \n    * Paints the vertex shape.\n    */\n    mxShapePidIntBlockBleedValve.prototype.paintVertexShape = function (c, x, y, w, h) {\n        var actuator = mxUtils.getValue(this.style, mxShapePidIntBlockBleedValve.prototype.cst.ACTUATOR, mxShapePidIntBlockBleedValve.prototype.cst.NONE);\n        var actH = 0;\n\n        if (actuator !== 'none') {\n            actH = h * 0.2353;\n        }\n\n        c.translate(x, y);\n        c.setLineJoin('round');\n\n        this.background(c, x, y, w, h, actuator, actH);\n        c.setShadow(false);\n        this.foreground(c, x, y, w, h, actuator, actH);\n    };\n\n    mxShapePidIntBlockBleedValve.prototype.background = function (c, x, y, w, h, actuator, actH) {\n        //draw the actuator\n        if (actuator !== mxShapePidIntBlockBleedValve.prototype.cst.NONE) {\n            this.drawActuatorBg(c, x, y, w, h, actuator);\n        }\n\n        //draw the valve body\n        this.drawValveBg(c, 0, actH, w, h - actH);\n    };\n\n    mxShapePidIntBlockBleedValve.prototype.foreground = function (c, x, y, w, h, actuator, actH) {\n        //draw the actuator\n        if (actuator !== mxShapePidIntBlockBleedValve.prototype.cst.NONE) {\n            this.drawActuatorFg(c, x, y, w, h, actuator);\n        }\n    };\n\n    mxShapePidIntBlockBleedValve.prototype.drawValveBg = function (c, x, y, w, h) {\n        var fillColor = mxUtils.getValue(this.style, mxConstants.STYLE_FILLCOLOR, '#ffffff');\n        var strokeColor = mxUtils.getValue(this.style, mxConstants.STYLE_STROKECOLOR, '#000000');\n\n        c.translate(x, y);\n        c.begin();\n        c.moveTo(0, 0);\n        c.lineTo(w * 0.5, h * 0.23);\n        c.lineTo(0, h * 0.46);\n        c.close();\n        c.moveTo(w * 0.5, h * 0.23);\n        c.lineTo(w, 0);\n        c.lineTo(w, h * 0.46);\n        c.close();\n        c.fillAndStroke();\n\n        c.begin();\n        c.moveTo(w * 0.5, h * 0.23);\n        c.lineTo(w * 0.5, h * 0.5);\n        c.stroke();\n\n        c.setFillColor(strokeColor);\n        c.begin();\n        c.moveTo(w * 0.3, h * 0.5);\n        c.lineTo(w * 0.7, h * 0.5);\n        c.lineTo(w * 0.5, h * 0.75);\n        c.close();\n        c.fillAndStroke();\n\n        c.begin();\n        c.moveTo(w * 0.3, h);\n        c.lineTo(w * 0.5, h * 0.75);\n        c.lineTo(w * 0.7, h);\n        c.fillAndStroke();\n        c.setFillColor(fillColor);\n\n        c.translate(-x, -y);\n    };\n\n    mxShapePidIntBlockBleedValve.prototype.drawActuatorBg = function (c, x, y, w, h, actuator) {\n        if (this.isSquareVariant(actuator)) {\n            c.translate(w * 0.325, 0);\n            this.drawSquareAct(c, w * 0.35, h * 0.4112, actuator);\n            c.translate(- w * 0.325, 0);\n        }\n        else if (actuator === mxShapePidIntBlockBleedValve.prototype.cst.MANUAL) {\n            c.translate(w * 0.25, h * 0.0882);\n            this.drawManAct(c, w * 0.5, h * 0.323);\n            c.translate(- w * 0.25, - h * 0.0882);\n        }\n        else if (actuator === mxShapePidIntBlockBleedValve.prototype.cst.DIAPHRAGM) {\n            c.translate(w * 0.25, h * 0.0588);\n            this.drawDiaphAct(c, w * 0.5, h * 0.3524);\n            c.translate(- w * 0.25, - h * 0.0588);\n        }\n        else if (actuator === mxShapePidIntBlockBleedValve.prototype.cst.BALANCED_DIAPHRAGM) {\n            c.translate(w * 0.25, h * 0.0588);\n            this.drawBalDiaphActBg(c, w * 0.5, h * 0.3524);\n            c.translate(- w * 0.25, - h * 0.0588);\n        }\n        else if (actuator === mxShapePidIntBlockBleedValve.prototype.cst.MOTOR || actuator === mxShapePidIntBlockBleedValve.prototype.cst.ELECTRO_HYDRAULIC) {\n            c.translate(w * 0.325, 0);\n            this.drawCircleAct(c, w * 0.35, h * 0.4112, actuator);\n            c.translate(- w * 0.325, 0);\n        }\n        else if (actuator === mxShapePidIntBlockBleedValve.prototype.cst.SPRING) {\n            c.translate(w * 0.36, 0);\n            this.drawSpringAct(c, w * 0.28, h * 0.4112);\n            c.translate(- w * 0.36, 0);\n        }\n        else if (actuator === mxShapePidIntBlockBleedValve.prototype.cst.SOLENOID_MANUAL_RESET) {\n            c.translate(w * 0.325, 0);\n            this.drawSolenoidManResetAct(c, w * 0.575, h * 0.4112);\n            c.translate(- w * 0.325, 0);\n        }\n        else if (actuator === mxShapePidIntBlockBleedValve.prototype.cst.SINGLE_ACTING) {\n            c.translate(w * 0.35, 0);\n            this.drawSingActingActBg(c, w * 0.65, h * 0.4112);\n            c.translate(- w * 0.35, 0);\n        }\n        else if (actuator === mxShapePidIntBlockBleedValve.prototype.cst.DOUBLE_ACTING) {\n            c.translate(w * 0.35, 0);\n            this.drawDblActingActBg(c, w * 0.65, h * 0.4112);\n            c.translate(- w * 0.35, 0);\n        }\n        else if (actuator === mxShapePidIntBlockBleedValve.prototype.cst.PILOT_CYLINDER) {\n            c.translate(w * 0.35, 0);\n            this.drawPilotCylinderActBg(c, w * 0.65, h * 0.4112);\n            c.translate(- w * 0.35, 0);\n        }\n    };\n\n    mxShapePidIntBlockBleedValve.prototype.drawActuatorFg = function (c, x, y, w, h, actuator) {\n        if (actuator === mxShapePidIntBlockBleedValve.prototype.cst.BALANCED_DIAPHRAGM) {\n            c.translate(w * 0.25, h * 0.0588);\n            this.drawBalDiaphActFg(c, w * 0.5, h * 0.3524);\n            c.translate(- w * 0.25, - h * 0.0588);\n        }\n        else if (actuator === mxShapePidIntBlockBleedValve.prototype.cst.SINGLE_ACTING ||\n            actuator === mxShapePidIntBlockBleedValve.prototype.cst.DOUBLE_ACTING ||\n            actuator === mxShapePidIntBlockBleedValve.prototype.cst.PILOT_CYLINDER) {\n            c.translate(w * 0.35, 0);\n            this.drawActingActFg(c, w * 0.65, h * 0.4112);\n            c.translate(- w * 0.35, 0);\n        }\n    };\n\n    mxCellRenderer.registerShape('mxgraph.pid2valves.blockBleedValve', mxShapePidIntBlockBleedValve);\n\n    //**********************************************************************************************************************************************************\n    //Auto Recirculation Valve\n    //**********************************************************************************************************************************************************\n    /**\n     * Extends mxShape.\n     */\n    function mxShapePidAutoRecircValve(bounds, fill, stroke, strokewidth) {\n        mxShape.call(this);\n        this.bounds = bounds;\n        this.fill = fill;\n        this.stroke = stroke;\n        this.strokewidth = (strokewidth != null) ? strokewidth : 1;\n    };\n\n    /**\n     * Extends mxShape.\n     */\n    mxUtils.extend(mxShapePidAutoRecircValve, mxShape);\n\n\n    /**\n     * Function: paintVertexShape\n     * \n     * Paints the vertex shape.\n     */\n    mxShapePidAutoRecircValve.prototype.paintVertexShape = function (c, x, y, w, h) {\n        c.setLineJoin('round');\n        c.translate(x, y);\n\n        //background\n        c.rect(0, 0, w, h);\n        c.fillAndStroke();\n        c.setShadow(false);\n\n        //foreground\n        c.begin();\n        c.moveTo(w * 0.08, h * 0.08);\n        c.lineTo(w * 0.08, h * 0.92);\n        c.moveTo(w * 0.92, h * 0.08);\n        c.lineTo(w * 0.92, h * 0.92);\n        c.moveTo(w * 0.12, h * 0.122);\n        c.lineTo(w * 0.8738, h * 0.8837);\n\n        c.moveTo(w * 0.5, 0);\n        c.lineTo(w * 0.55, h * 0.05);\n        c.lineTo(w * 0.45, h * 0.15);\n        c.lineTo(w * 0.55, h * 0.25);\n        c.lineTo(w * 0.45, h * 0.35);\n        c.lineTo(w * 0.55, h * 0.45);\n        c.lineTo(w * 0.49, h * 0.5);\n        c.stroke();\n\n        var fillColor = mxUtils.getValue(this.style, mxConstants.STYLE_FILLCOLOR, '#ffffff');\n        var strokeColor = mxUtils.getValue(this.style, mxConstants.STYLE_STROKECOLOR, '#000000');\n\n        c.begin();\n        c.moveTo(w * 0.8257, h * 0.7695);\n        c.lineTo(w * 0.8797, h * 0.888);\n        c.lineTo(w * 0.79, h * 0.8651);\n        c.close();\n        c.setFillColor(strokeColor);\n        c.fillAndStroke();\n        c.setFillColor(fillColor);\n    };\n\n    mxCellRenderer.registerShape('mxgraph.pid2valves.autoRecircValve', mxShapePidAutoRecircValve);\n    /**\n     * $Id: mxPidInstruments.js,v 1.4 2014/01/21 13:10:17 gaudenz Exp $\n     * Copyright (c) 2006-2013, JGraph Ltd\n     */\n\n    //**********************************************************************************************************************************************************\n    //Discrete Instrument\n    //**********************************************************************************************************************************************************\n    /**\n     * Extends mxShape.\n     */\n    function mxShapePidDiscInst(bounds, fill, stroke, strokewidth) {\n        mxShape.call(this);\n        this.bounds = bounds;\n        this.fill = fill;\n        this.stroke = stroke;\n        this.strokewidth = (strokewidth != null) ? strokewidth : 1;\n    };\n\n    /**\n     * Extends mxShape.\n     */\n    mxUtils.extend(mxShapePidDiscInst, mxShape);\n\n    mxShapePidDiscInst.prototype.cst = {\n        SHAPE_DISC_INST: 'mxgraph.pid2inst.discInst',\n        MOUNTING: 'mounting',\n        FIELD: 'field',\n        ROOM: 'room',\n        INACCESSIBLE: 'inaccessible',\n        LOCAL: 'local'\n    };\n\n    /**\n     * Function: paintVertexShape\n     * \n     * Paints the vertex shape.\n     */\n    mxShapePidDiscInst.prototype.paintVertexShape = function (c, x, y, w, h) {\n        c.translate(x, y);\n        this.background(c, x, y, w, h);\n        c.setShadow(false);\n        this.foreground(c, x, y, w, h);\n    };\n\n    mxShapePidDiscInst.prototype.background = function (c, x, y, w, h) {\n        c.ellipse(0, 0, w, h);\n        c.fillAndStroke();\n    };\n\n    mxShapePidDiscInst.prototype.foreground = function (c, x, y, w, h) {\n        var mounting = mxUtils.getValue(this.style, mxShapePidDiscInst.prototype.cst.MOUNTING, 'field');\n\n        if (mounting === mxShapePidDiscInst.prototype.cst.ROOM) {\n            c.begin();\n            c.moveTo(0, h * 0.5);\n            c.lineTo(w, h * 0.5);\n            c.stroke();\n        }\n        else if (mounting === mxShapePidDiscInst.prototype.cst.INACCESSIBLE) {\n            c.setDashed(true);\n            c.begin();\n            c.moveTo(0, h * 0.5);\n            c.lineTo(w, h * 0.5);\n            c.stroke();\n        }\n        else if (mounting === mxShapePidDiscInst.prototype.cst.LOCAL) {\n            c.begin();\n            c.moveTo(w * 0.005, h * 0.48);\n            c.lineTo(w * 0.995, h * 0.48);\n            c.moveTo(w * 0.005, h * 0.52);\n            c.lineTo(w * 0.995, h * 0.52);\n            c.stroke();\n        }\n    };\n\n    mxCellRenderer.registerShape(mxShapePidDiscInst.prototype.cst.SHAPE_DISC_INST, mxShapePidDiscInst);\n\n    mxShapePidDiscInst.prototype.constraints = [\n        new mxConnectionConstraint(new mxPoint(0.5, 0), true),\n        new mxConnectionConstraint(new mxPoint(0.5, 1), true),\n        new mxConnectionConstraint(new mxPoint(0, 0.5), true),\n        new mxConnectionConstraint(new mxPoint(1, 0.5), true),\n        new mxConnectionConstraint(new mxPoint(0.145, 0.145), false),\n        new mxConnectionConstraint(new mxPoint(0.145, 0.855), false),\n        new mxConnectionConstraint(new mxPoint(0.855, 0.145), false),\n        new mxConnectionConstraint(new mxPoint(0.855, 0.855), false)\n    ];\n\n    //**********************************************************************************************************************************************************\n    //Shared Control/Display\n    //**********************************************************************************************************************************************************\n    /**\n    * Extends mxShape.\n    */\n    function mxShapePidSharedCont(bounds, fill, stroke, strokewidth) {\n        mxShape.call(this);\n        this.bounds = bounds;\n        this.fill = fill;\n        this.stroke = stroke;\n        this.strokewidth = (strokewidth != null) ? strokewidth : 1;\n    };\n\n    /**\n    * Extends mxShape.\n    */\n    mxUtils.extend(mxShapePidSharedCont, mxShape);\n\n    mxShapePidSharedCont.prototype.cst = {\n        SHAPE_SHARED_CONT: 'mxgraph.pid2inst.sharedCont',\n        MOUNTING: 'mounting',\n        FIELD: 'field',\n        ROOM: 'room',\n        INACCESSIBLE: 'inaccessible',\n        LOCAL: 'local'\n    };\n\n    /**\n    * Function: paintVertexShape\n    * \n    * Paints the vertex shape.\n    */\n    mxShapePidSharedCont.prototype.paintVertexShape = function (c, x, y, w, h) {\n        c.translate(x, y);\n        this.background(c, x, y, w, h);\n        c.setShadow(false);\n        this.foreground(c, x, y, w, h);\n    };\n\n    mxShapePidSharedCont.prototype.background = function (c, x, y, w, h) {\n        c.rect(0, 0, w, h);\n        c.fillAndStroke();\n    };\n\n    mxShapePidSharedCont.prototype.foreground = function (c, x, y, w, h) {\n        var mounting = mxUtils.getValue(this.style, mxShapePidSharedCont.prototype.cst.MOUNTING, 'field');\n\n        c.ellipse(0, 0, w, h);\n        c.fillAndStroke();\n\n        if (mounting === mxShapePidSharedCont.prototype.cst.ROOM) {\n            c.begin();\n            c.moveTo(0, h * 0.5);\n            c.lineTo(w, h * 0.5);\n            c.stroke();\n        }\n        else if (mounting === mxShapePidSharedCont.prototype.cst.INACCESSIBLE) {\n            c.setDashed(true);\n            c.begin();\n            c.moveTo(0, h * 0.5);\n            c.lineTo(w, h * 0.5);\n            c.stroke();\n        }\n        else if (mounting === mxShapePidDiscInst.prototype.cst.LOCAL) {\n            c.begin();\n            c.moveTo(w * 0.005, h * 0.48);\n            c.lineTo(w * 0.995, h * 0.48);\n            c.moveTo(w * 0.005, h * 0.52);\n            c.lineTo(w * 0.995, h * 0.52);\n            c.stroke();\n        }\n    };\n\n    mxCellRenderer.registerShape(mxShapePidSharedCont.prototype.cst.SHAPE_SHARED_CONT, mxShapePidSharedCont);\n\n    mxShapePidSharedCont.prototype.constraints = [\n        new mxConnectionConstraint(new mxPoint(0.5, 0), true),\n        new mxConnectionConstraint(new mxPoint(0.5, 1), true),\n        new mxConnectionConstraint(new mxPoint(0, 0.5), true),\n        new mxConnectionConstraint(new mxPoint(1, 0.5), true),\n        new mxConnectionConstraint(new mxPoint(0, 0), false),\n        new mxConnectionConstraint(new mxPoint(0, 1), false),\n        new mxConnectionConstraint(new mxPoint(1, 0), false),\n        new mxConnectionConstraint(new mxPoint(1, 1), false)\n    ];\n\n    //**********************************************************************************************************************************************************\n    //Computer Function\n    //**********************************************************************************************************************************************************\n    /**\n    * Extends mxShape.\n    */\n    function mxShapePidCompFunc(bounds, fill, stroke, strokewidth) {\n        mxShape.call(this);\n        this.bounds = bounds;\n        this.fill = fill;\n        this.stroke = stroke;\n        this.strokewidth = (strokewidth != null) ? strokewidth : 1;\n    };\n\n    /**\n    * Extends mxShape.\n    */\n    mxUtils.extend(mxShapePidCompFunc, mxShape);\n\n    mxShapePidCompFunc.prototype.cst = {\n        SHAPE_COMP_FUNC: 'mxgraph.pid2inst.compFunc',\n        MOUNTING: 'mounting',\n        FIELD: 'field',\n        ROOM: 'room',\n        INACCESSIBLE: 'inaccessible',\n        LOCAL: 'local'\n    };\n\n    /**\n    * Function: paintVertexShape\n    * \n    * Paints the vertex shape.\n    */\n    mxShapePidCompFunc.prototype.paintVertexShape = function (c, x, y, w, h) {\n        c.translate(x, y);\n        this.background(c, x, y, w, h);\n        c.setShadow(false);\n        this.foreground(c, x, y, w, h);\n    };\n\n    mxShapePidCompFunc.prototype.background = function (c, x, y, w, h) {\n        c.begin();\n        c.moveTo(0, h * 0.5);\n        c.lineTo(w * 0.25, 0);\n        c.lineTo(w * 0.75, 0);\n        c.lineTo(w, h * 0.5);\n        c.lineTo(w * 0.75, h);\n        c.lineTo(w * 0.25, h);\n        c.close();\n        c.fillAndStroke();\n    };\n\n    mxShapePidCompFunc.prototype.foreground = function (c, x, y, w, h) {\n        var mounting = mxUtils.getValue(this.style, mxShapePidCompFunc.prototype.cst.MOUNTING, 'field');\n\n        if (mounting === mxShapePidCompFunc.prototype.cst.ROOM) {\n            c.begin();\n            c.moveTo(0, h * 0.5);\n            c.lineTo(w, h * 0.5);\n            c.stroke();\n        }\n        else if (mounting === mxShapePidCompFunc.prototype.cst.INACCESSIBLE) {\n            c.setDashed(true);\n            c.begin();\n            c.moveTo(0, h * 0.5);\n            c.lineTo(w, h * 0.5);\n            c.stroke();\n        }\n        else if (mounting === mxShapePidDiscInst.prototype.cst.LOCAL) {\n            c.begin();\n            c.moveTo(w * 0.01, h * 0.48);\n            c.lineTo(w * 0.99, h * 0.48);\n            c.moveTo(w * 0.01, h * 0.52);\n            c.lineTo(w * 0.99, h * 0.52);\n            c.stroke();\n        }\n    };\n\n    mxCellRenderer.registerShape(mxShapePidCompFunc.prototype.cst.SHAPE_COMP_FUNC, mxShapePidCompFunc);\n\n    mxShapePidCompFunc.prototype.constraints = [\n        new mxConnectionConstraint(new mxPoint(0.5, 0), true),\n        new mxConnectionConstraint(new mxPoint(0.5, 1), true),\n        new mxConnectionConstraint(new mxPoint(0, 0.5), true),\n        new mxConnectionConstraint(new mxPoint(1, 0.5), true),\n        new mxConnectionConstraint(new mxPoint(0.25, 0), false),\n        new mxConnectionConstraint(new mxPoint(0.75, 0), false),\n        new mxConnectionConstraint(new mxPoint(0.25, 1), false),\n        new mxConnectionConstraint(new mxPoint(0.75, 1), false)\n    ];\n\n    //**********************************************************************************************************************************************************\n    //Computer Function\n    //**********************************************************************************************************************************************************\n    /**\n    * Extends mxShape.\n    */\n    function mxShapePidProgLogCont(bounds, fill, stroke, strokewidth) {\n        mxShape.call(this);\n        this.bounds = bounds;\n        this.fill = fill;\n        this.stroke = stroke;\n        this.strokewidth = (strokewidth != null) ? strokewidth : 1;\n    };\n\n    /**\n    * Extends mxShape.\n    */\n    mxUtils.extend(mxShapePidProgLogCont, mxShape);\n\n    mxShapePidProgLogCont.prototype.cst = {\n        SHAPE_PROG_LOG_CONT: 'mxgraph.pid2inst.progLogCont',\n        MOUNTING: 'mounting',\n        FIELD: 'field',\n        ROOM: 'room',\n        INACCESSIBLE: 'inaccessible',\n        LOCAL: 'local'\n    };\n\n    /**\n    * Function: paintVertexShape\n    * \n    * Paints the vertex shape.\n    */\n    mxShapePidProgLogCont.prototype.paintVertexShape = function (c, x, y, w, h) {\n        c.translate(x, y);\n        this.background(c, x, y, w, h);\n        c.setShadow(false);\n        this.foreground(c, x, y, w, h);\n    };\n\n    mxShapePidProgLogCont.prototype.background = function (c, x, y, w, h) {\n        c.rect(0, 0, w, h);\n        c.fillAndStroke();\n    };\n\n    mxShapePidProgLogCont.prototype.foreground = function (c, x, y, w, h) {\n        var mounting = mxUtils.getValue(this.style, mxShapePidProgLogCont.prototype.cst.MOUNTING, 'field');\n\n        c.begin();\n        c.moveTo(0, h * 0.5);\n        c.lineTo(w * 0.5, 0);\n        c.lineTo(w, h * 0.5);\n        c.lineTo(w * 0.5, h);\n        c.close();\n        c.stroke();\n\n        if (mounting === mxShapePidProgLogCont.prototype.cst.ROOM) {\n            c.begin();\n            c.moveTo(0, h * 0.5);\n            c.lineTo(w, h * 0.5);\n            c.stroke();\n        }\n        else if (mounting === mxShapePidProgLogCont.prototype.cst.INACCESSIBLE) {\n            c.setDashed(true);\n            c.begin();\n            c.moveTo(0, h * 0.5);\n            c.lineTo(w, h * 0.5);\n            c.stroke();\n        }\n        else if (mounting === mxShapePidDiscInst.prototype.cst.LOCAL) {\n            c.begin();\n            c.moveTo(w * 0.02, h * 0.48);\n            c.lineTo(w * 0.98, h * 0.48);\n            c.moveTo(w * 0.02, h * 0.52);\n            c.lineTo(w * 0.98, h * 0.52);\n            c.stroke();\n        }\n    };\n\n    mxCellRenderer.registerShape(mxShapePidProgLogCont.prototype.cst.SHAPE_PROG_LOG_CONT, mxShapePidProgLogCont);\n\n    mxShapePidProgLogCont.prototype.constraints = [\n        new mxConnectionConstraint(new mxPoint(0.5, 0), true),\n        new mxConnectionConstraint(new mxPoint(0.5, 1), true),\n        new mxConnectionConstraint(new mxPoint(0, 0.5), true),\n        new mxConnectionConstraint(new mxPoint(1, 0.5), true),\n        new mxConnectionConstraint(new mxPoint(0, 0), false),\n        new mxConnectionConstraint(new mxPoint(0, 1), false),\n        new mxConnectionConstraint(new mxPoint(1, 0), false),\n        new mxConnectionConstraint(new mxPoint(1, 1), false)\n    ];\n\n    //**********************************************************************************************************************************************************\n    //Indicator\n    //**********************************************************************************************************************************************************\n    /**\n    * Extends mxShape.\n    */\n    function mxShapePidIndicator(bounds, fill, stroke, strokewidth) {\n        mxShape.call(this);\n        this.bounds = bounds;\n        this.fill = fill;\n        this.stroke = stroke;\n        this.strokewidth = (strokewidth != null) ? strokewidth : 1;\n    };\n\n    /**\n    * Extends mxShape.\n    */\n    mxUtils.extend(mxShapePidIndicator, mxShape);\n\n    mxShapePidIndicator.prototype.cst = {\n        SHAPE_INDICATOR: 'mxgraph.pid2inst.indicator',\n        MOUNTING: 'mounting',\n        FIELD: 'field',\n        ROOM: 'room',\n        INACCESSIBLE: 'inaccessible',\n        LOCAL: 'local',\n        IND_TYPE: 'indType',\n        INSTRUMENT: 'inst',\n        CONTROL: 'ctrl',\n        FUNCTION: 'func',\n        PLC: 'plc'\n    };\n\n    /**\n    * Function: paintVertexShape\n    * \n    * Paints the vertex shape.\n    */\n    mxShapePidIndicator.prototype.paintVertexShape = function (c, x, y, w, h) {\n        c.translate(x, y);\n        this.background(c, x, y, w, h);\n        c.setShadow(false);\n        this.foreground(c, x, y, w, h);\n    };\n\n    mxShapePidIndicator.prototype.background = function (c, x, y, w, h) {\n        var type = mxUtils.getValue(this.style, mxShapePidIndicator.prototype.cst.IND_TYPE, 'inst');\n\n        c.begin();\n        c.moveTo(w * 0.5, w);\n        c.lineTo(w * 0.5, h);\n        c.stroke();\n\n        if (type === mxShapePidIndicator.prototype.cst.INSTRUMENT) {\n            c.ellipse(0, 0, w, w);\n            c.fillAndStroke();\n        }\n        else if (type === mxShapePidIndicator.prototype.cst.CONTROL) {\n            c.rect(0, 0, w, w);\n            c.fillAndStroke();\n        }\n        else if (type === mxShapePidIndicator.prototype.cst.FUNCTION) {\n            c.begin();\n            c.moveTo(0, w * 0.5);\n            c.lineTo(w * 0.25, 0);\n            c.lineTo(w * 0.75, 0);\n            c.lineTo(w, w * 0.5);\n            c.lineTo(w * 0.75, w);\n            c.lineTo(w * 0.25, w);\n            c.close();\n            c.fillAndStroke();\n        }\n        else if (type === mxShapePidIndicator.prototype.cst.PLC) {\n            c.rect(0, 0, w, w);\n            c.fillAndStroke();\n        }\n    };\n\n    mxShapePidIndicator.prototype.foreground = function (c, x, y, w, h) {\n        var mounting = mxUtils.getValue(this.style, mxShapePidIndicator.prototype.cst.MOUNTING, 'field');\n        var type = mxUtils.getValue(this.style, mxShapePidIndicator.prototype.cst.IND_TYPE, 'inst');\n\n        if (type === mxShapePidIndicator.prototype.cst.CONTROL) {\n            c.ellipse(0, 0, w, w);\n            c.stroke();\n        }\n        else if (type === mxShapePidIndicator.prototype.cst.PLC) {\n            c.begin();\n            c.moveTo(0, w * 0.5);\n            c.lineTo(w * 0.5, 0);\n            c.lineTo(w, w * 0.5);\n            c.lineTo(w * 0.5, w);\n            c.close();\n            c.stroke();\n        }\n\n        if (mounting === mxShapePidIndicator.prototype.cst.ROOM) {\n            c.begin();\n            c.moveTo(0, w * 0.5);\n            c.lineTo(w, w * 0.5);\n            c.stroke();\n        }\n        else if (mounting === mxShapePidIndicator.prototype.cst.INACCESSIBLE) {\n            c.setDashed(true);\n            c.begin();\n            c.moveTo(0, w * 0.5);\n            c.lineTo(w, w * 0.5);\n            c.stroke();\n        }\n        else if (mounting === mxShapePidIndicator.prototype.cst.LOCAL) {\n            c.begin();\n            c.moveTo(w * 0.005, w * 0.48);\n            c.lineTo(w * 0.995, w * 0.48);\n            c.moveTo(w * 0.005, w * 0.52);\n            c.lineTo(w * 0.995, w * 0.52);\n            c.stroke();\n        }\n    };\n\n    mxCellRenderer.registerShape(mxShapePidIndicator.prototype.cst.SHAPE_INDICATOR, mxShapePidIndicator);\n\n    mxShapePidIndicator.prototype.constraints = [new mxConnectionConstraint(new mxPoint(0.5, 1), true)];\n\n    //**********************************************************************************************************************************************************\n    //Logic\n    //**********************************************************************************************************************************************************\n    /**\n    * Extends mxShape.\n    */\n    function mxShapePidLogic(bounds, fill, stroke, strokewidth) {\n        mxShape.call(this);\n        this.bounds = bounds;\n        this.fill = fill;\n        this.stroke = stroke;\n        this.strokewidth = (strokewidth != null) ? strokewidth : 1;\n    };\n\n    /**\n    * Extends mxShape.\n    */\n    mxUtils.extend(mxShapePidLogic, mxShape);\n\n    mxShapePidLogic.prototype.cst = {\n        SHAPE_LOGIC: 'mxgraph.pid2inst.logic',\n        MOUNTING: 'mounting',\n        FIELD: 'field',\n        ROOM: 'room',\n        INACCESSIBLE: 'inaccessible',\n        LOCAL: 'local'\n    };\n\n    /**\n    * Function: paintVertexShape\n    * \n    * Paints the vertex shape.\n    */\n    mxShapePidLogic.prototype.paintVertexShape = function (c, x, y, w, h) {\n        c.translate(x, y);\n        this.background(c, x, y, w, h);\n        c.setShadow(false);\n        this.foreground(c, x, y, w, h);\n    };\n\n    mxShapePidLogic.prototype.background = function (c, x, y, w, h) {\n        c.begin();\n        c.moveTo(0, h * 0.5);\n        c.lineTo(w * 0.5, 0);\n        c.lineTo(w, h * 0.5);\n        c.lineTo(w * 0.5, h);\n        c.close();\n        c.fillAndStroke();\n    };\n\n    mxShapePidLogic.prototype.foreground = function (c, x, y, w, h) {\n        var mounting = mxUtils.getValue(this.style, mxShapePidLogic.prototype.cst.MOUNTING, 'field');\n\n        if (mounting === mxShapePidLogic.prototype.cst.ROOM) {\n            c.begin();\n            c.moveTo(0, h * 0.5);\n            c.lineTo(w, h * 0.5);\n            c.stroke();\n        }\n        else if (mounting === mxShapePidLogic.prototype.cst.INACCESSIBLE) {\n            c.setDashed(true);\n            c.begin();\n            c.moveTo(0, h * 0.5);\n            c.lineTo(w, h * 0.5);\n            c.stroke();\n        }\n        else if (mounting === mxShapePidLogic.prototype.cst.LOCAL) {\n            c.begin();\n            c.moveTo(w * 0.02, h * 0.48);\n            c.lineTo(w * 0.98, h * 0.48);\n            c.moveTo(w * 0.02, h * 0.52);\n            c.lineTo(w * 0.98, h * 0.52);\n            c.stroke();\n        }\n    };\n\n    mxCellRenderer.registerShape(mxShapePidLogic.prototype.cst.SHAPE_LOGIC, mxShapePidLogic);\n\n    mxShapePidLogic.prototype.constraints = [\n        new mxConnectionConstraint(new mxPoint(0.5, 0), true),\n        new mxConnectionConstraint(new mxPoint(0.5, 1), true),\n        new mxConnectionConstraint(new mxPoint(0, 0.5), true),\n        new mxConnectionConstraint(new mxPoint(1, 0.5), true),\n        new mxConnectionConstraint(new mxPoint(0.25, 0.25), false),\n        new mxConnectionConstraint(new mxPoint(0.25, 0.75), false),\n        new mxConnectionConstraint(new mxPoint(0.75, 0.25), false),\n        new mxConnectionConstraint(new mxPoint(0.75, 0.75), false)\n    ];\n}", "ColumnPosition" : 1, "DirectLinkUUID" : "", "DisplayName" : "BMCodeHost-11", "Exports" : "interface shapeCatalogue extends TWRuntimeWidget {execute(); \r\n\t    \t/**\r\n\t    \t * Should be invoked to dispatch an event to the Thingworx runtime, causing all actions bound to that event to execute.\n\r\n\t    \t * @param event - The name of the event to dispatch.\n\r\n\t    \t */\n\r\n\t\t\tdispatchEvent(event: string): void;\n\r\n\t    \t/**\n\r\n\t    \t * Invoked after any property has been updated as a result of a binding.\n\r\n\t    \t * This method will be invoked after the specific ..DidUpdateToValue method is invoked.\n\r\n\t    \t * Scripts can override this method to react to all property updates.\n\r\n\t    \t * @param event - The name of the event to dispatch.\n\r\n\t    \t */\n\r\n\t\t\tpropertyDidUpdateToValue(property: string, value: any | undefined): void;\n\r\n\t    \t/**\n\r\n\t    \t * Finds and returns the widget with the given name in the current mashup.\n\r\n\t    \t * @param name - The DisplayName of the widget to find.\n\r\n\t    \t * @return - The widget object if it was found, undefined otherwise.\n\r\n\t    \t */\n\r\n\t\t\twidgetNamed(name: string): TWRuntimeWidget | undefined;\n\r\n\t    \t/**\n\r\n\t    \t * Sends a property update to the given widget as if it came from a binding.\n\r\n\t    \t * Supported properties may be updated this way even if they are not bound to anything in the composer.\n\r\n\t    \t * @param widget - The widget object whose property should be updated.\n\r\n\t    \t * @param args - An object containing additional arguments. This object must have the following properties:\n\r\n\t    \t *\t\t\t\t\tforProperty {String} - The name of the property to update.\n\r\n\t    \t *\t\t\t\t\tvalue {AnyObject} - The value to which that property should update.\n\r\n\t    \t */\n\r\n\t\t\tdispatchPropertyUpdateToWidget(widget: any, args: SelfDispatchPropertyUpdateToWidgetArgs): void;\n\r\n\t    \t/**\n\r\n\t    \t * May be overriden by scripts that create an UI. This method receives the script's container as its parameter.\n\r\n\t    \t * It is the script's responsibility to add their content to the supplied container.\n\r\n\t    \t * @param container - The container in which the UI elements should be added.\n\r\n\t    \t */\n\r\n\t\t\trenderWithContainer(container: $): void;\n\r\n\t\t}\n", "FullScreen" : false, "Height" : 46, "Id" : "BMCodeHost-11", "Left" : 310, "ResponsiveLayout" : false, "RuntimeProperties" : "[{\"name\":\"execute\",\"dataType\":\"STRING\",\"type\":\"service\"}]", "Scope" : "local", "ScrollPosition" : 456, "ShowDataLoading" : true, "Title" : "shapeCatalogue", "Top" : 25, "Type" : "BMCodeHost", "Visible" : true, "Width" : 169, "Z-index" : 10, "_Height" : 1064, "_Left" : 114, "_NavigationWidth" : 441, "_PropertiesWidth" : 354, "_Top" : 59, "_Width" : 2056, "__TypeDisplayName" : "Object" }, "Widgets" : [ ] }, { "Properties" : { "Area" : "UI", "Code" : "// defines the internal structure of a JSON mtp file\ninterface IPoint {\n    x: number;\n    y: number;\n}\n\nclass Point implements IPoint {\n    x: number;\n    y: number;\n\n    constructor(x: number, y: number) \n    constructor(value: string)\n    constructor(xOrValue: number | string, y?: number) {\n        if(typeof xOrValue == \"string\") {\n            const tokens = xOrValue.split(\",\");\n            if (tokens.length < 2) {\n                throw \"We need two points to create a mxPoint\"\n            }\n            this.x = parseFloat(tokens[0])\n            this.y = parseFloat(tokens[1])\n        } else {\n            this.x = xOrValue;\n            this.y = y as number;\n        }\n    }\n\n    equals(otherPoint: IPoint) {\n        return this.x == otherPoint.x && this.y == otherPoint.y;\n    }\n}\n\nfunction isNozzle(object: IPoint | Nozzle): object is Nozzle {\n    return 'type' in object && object.type == ElementType.NOZZLE;\n}\n\ninterface Shape extends IPoint {\n    width: number;\n    height: number;\n    rotation: number;\n}\n\nenum ElementType {\n    PIPE = \"Pipe\", \n    NOZZLE = \"Nozzle\",\n    VISUAL_ELEMENT = \"VisualElement\", \n    COMMUNICATION_INTERFACE = \"CommunicationInterface\", \n    COMMUNICATION_OBJECT = \"CommunicationObject\"\n}\n\ninterface GenericMptElement {\n    id: string;\n    name: string;\n    type: ElementType;\n}\n\ninterface PositionableElement extends IPoint {\n    // empty\n}\n\ninterface Nozzle extends GenericMptElement, PositionableElement {\n    externalConnectorId: string;\n    baseClass: string;\n}\n\ninterface VisualObject extends Shape, GenericMptElement {\n    viewType: string;\n    eClassVersion: string;\n    eClassClassification: string;\n    eClassIrdi: string;\n    refId: string;\n    nozzles: Nozzle[];\n    subElement?: Shape;\n}\n\ninterface PipeDefinition extends GenericMptElement {\n    source: IPoint | Nozzle;\n    target: IPoint | Nozzle;\n    waypoints: IPoint[];\n    nozzles: Nozzle[];\n}\n\ninterface CommunicationInterface extends GenericMptElement {\n    identifier: string;\n    namespace: string;\n    access: string;\n    endpoint: string;\n}\n\ninterface CommunicationObject extends GenericMptElement {\n    description: string;\n    interfaces: CommunicationInterface[];\n}\n\ninterface InteractibleElement {\n    obj: VisualObject;\n    communication?: CommunicationObject;\n}\n\ninterface HmiDiagram {\n    width: number;\n    height: number;\n    elements: InteractibleElement[];\n    pipes: PipeDefinition[];\n}\n\ninterface Window {\n    Point: typeof Point\n    ElementType: typeof ElementType,\n    isNozzle: typeof isNozzle\n}\nwindow[\"Point\"] = Point;\nwindow[\"ElementType\"] = ElementType;\nwindow[\"isNozzle\"] = isNozzle;", "ColumnPosition" : 1, "Description" : "", "DirectLinkUUID" : "", "DisplayName" : "BMTypescriptHost-12", "Exports" : "interface mtpJsonDef extends TWRuntimeWidget {\r\n\t    \t/**\r\n\t    \t * Should be invoked to dispatch an event to the Thingworx runtime, causing all actions bound to that event to execute.\n\r\n\t    \t * @param event - The name of the event to dispatch.\n\r\n\t    \t */\n\r\n\t\t\tdispatchEvent(event: string): void;\n\r\n\t    \t/**\n\r\n\t    \t * Invoked after any property has been updated as a result of a binding.\n\r\n\t    \t * This method will be invoked after the specific ..DidUpdateToValue method is invoked.\n\r\n\t    \t * Scripts can override this method to react to all property updates.\n\r\n\t    \t * @param event - The name of the event to dispatch.\n\r\n\t    \t */\n\r\n\t\t\tpropertyDidUpdateToValue(property: string, value: any | undefined): void;\n\r\n\t    \t/**\n\r\n\t    \t * Finds and returns the widget with the given name in the current mashup.\n\r\n\t    \t * @param name - The DisplayName of the widget to find.\n\r\n\t    \t * @return - The widget object if it was found, undefined otherwise.\n\r\n\t    \t */\n\r\n\t\t\twidgetNamed(name: string): TWRuntimeWidget | undefined;\n\r\n\t    \t/**\n\r\n\t    \t * Sends a property update to the given widget as if it came from a binding.\n\r\n\t    \t * Supported properties may be updated this way even if they are not bound to anything in the composer.\n\r\n\t    \t * @param widget - The widget object whose property should be updated.\n\r\n\t    \t * @param args - An object containing additional arguments. This object must have the following properties:\n\r\n\t    \t *\t\t\t\t\tforProperty {String} - The name of the property to update.\n\r\n\t    \t *\t\t\t\t\tvalue {AnyObject} - The value to which that property should update.\n\r\n\t    \t */\n\r\n\t\t\tdispatchPropertyUpdateToWidget(widget: any, args: SelfDispatchPropertyUpdateToWidgetArgs): void;\n\r\n\t    \t/**\n\r\n\t    \t * May be overriden by scripts that create an UI. This method receives the script's container as its parameter.\n\r\n\t    \t * It is the script's responsibility to add their content to the supplied container.\n\r\n\t    \t * @param container - The container in which the UI elements should be added.\n\r\n\t    \t */\n\r\n\t\t\trenderWithContainer(container: $): void;\n\r\n\t\t}\n", "FullScreen" : false, "Height" : 48, "Id" : "BMTypescriptHost-12", "Left" : 855, "ResponsiveLayout" : false, "RuntimeProperties" : "[]", "Scope" : "global", "ScrollPosition" : 1, "ShowDataLoading" : true, "Title" : "mtpJsonDef", "Top" : 15, "TranspiledCode" : "\"use strict\";\r\nclass Point {\r\n    constructor(xOrValue, y) {\r\n        if (typeof xOrValue == \"string\") {\r\n            const tokens = xOrValue.split(\",\");\r\n            if (tokens.length < 2) {\r\n                throw \"We need two points to create a mxPoint\";\r\n            }\r\n            this.x = parseFloat(tokens[0]);\r\n            this.y = parseFloat(tokens[1]);\r\n        }\r\n        else {\r\n            this.x = xOrValue;\r\n            this.y = y;\r\n        }\r\n    }\r\n    equals(otherPoint) {\r\n        return this.x == otherPoint.x && this.y == otherPoint.y;\r\n    }\r\n}\r\nfunction isNozzle(object) {\r\n    return 'type' in object && object.type == ElementType.NOZZLE;\r\n}\r\nvar ElementType;\r\n(function (ElementType) {\r\n    ElementType[\"PIPE\"] = \"Pipe\";\r\n    ElementType[\"NOZZLE\"] = \"Nozzle\";\r\n    ElementType[\"VISUAL_ELEMENT\"] = \"VisualElement\";\r\n    ElementType[\"COMMUNICATION_INTERFACE\"] = \"CommunicationInterface\";\r\n    ElementType[\"COMMUNICATION_OBJECT\"] = \"CommunicationObject\";\r\n})(ElementType || (ElementType = {}));\r\nwindow[\"Point\"] = Point;\r\nwindow[\"ElementType\"] = ElementType;\r\nwindow[\"isNozzle\"] = isNozzle;\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTYuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIxNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBTUEsTUFBTSxLQUFLO0lBTVAsWUFBWSxRQUF5QixFQUFFLENBQVU7UUFDN0MsSUFBRyxPQUFPLFFBQVEsSUFBSSxRQUFRLEVBQUU7WUFDNUIsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNuQyxJQUFJLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUNuQixNQUFNLHdDQUF3QyxDQUFBO2FBQ2pEO1lBQ0QsSUFBSSxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDOUIsSUFBSSxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7U0FDakM7YUFBTTtZQUNILElBQUksQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDO1lBQ2xCLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBVyxDQUFDO1NBQ3hCO0lBQ0wsQ0FBQztJQUVELE1BQU0sQ0FBQyxVQUFrQjtRQUNyQixPQUFPLElBQUksQ0FBQyxDQUFDLElBQUksVUFBVSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxDQUFDLENBQUM7SUFDNUQsQ0FBQztDQUNKO0FBRUQsU0FBUyxRQUFRLENBQUMsTUFBdUI7SUFDckMsT0FBTyxNQUFNLElBQUksTUFBTSxJQUFJLE1BQU0sQ0FBQyxJQUFJLElBQUksV0FBVyxDQUFDLE1BQU0sQ0FBQztBQUNqRSxDQUFDO0FBUUQsSUFBSyxXQU1KO0FBTkQsV0FBSyxXQUFXO0lBQ1osNEJBQWEsQ0FBQTtJQUNiLGdDQUFpQixDQUFBO0lBQ2pCLCtDQUFnQyxDQUFBO0lBQ2hDLGlFQUFrRCxDQUFBO0lBQ2xELDJEQUE0QyxDQUFBO0FBQ2hELENBQUMsRUFOSSxXQUFXLEtBQVgsV0FBVyxRQU1mO0FBK0RELE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxLQUFLLENBQUM7QUFDeEIsTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUFHLFdBQVcsQ0FBQztBQUNwQyxNQUFNLENBQUMsVUFBVSxDQUFDLEdBQUcsUUFBUSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gZGVmaW5lcyB0aGUgaW50ZXJuYWwgc3RydWN0dXJlIG9mIGEgSlNPTiBtdHAgZmlsZVxuaW50ZXJmYWNlIElQb2ludCB7XG4gICAgeDogbnVtYmVyO1xuICAgIHk6IG51bWJlcjtcbn1cblxuY2xhc3MgUG9pbnQgaW1wbGVtZW50cyBJUG9pbnQge1xuICAgIHg6IG51bWJlcjtcbiAgICB5OiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3Rvcih4OiBudW1iZXIsIHk6IG51bWJlcikgXG4gICAgY29uc3RydWN0b3IodmFsdWU6IHN0cmluZylcbiAgICBjb25zdHJ1Y3Rvcih4T3JWYWx1ZTogbnVtYmVyIHwgc3RyaW5nLCB5PzogbnVtYmVyKSB7XG4gICAgICAgIGlmKHR5cGVvZiB4T3JWYWx1ZSA9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBjb25zdCB0b2tlbnMgPSB4T3JWYWx1ZS5zcGxpdChcIixcIik7XG4gICAgICAgICAgICBpZiAodG9rZW5zLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBcIldlIG5lZWQgdHdvIHBvaW50cyB0byBjcmVhdGUgYSBteFBvaW50XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMueCA9IHBhcnNlRmxvYXQodG9rZW5zWzBdKVxuICAgICAgICAgICAgdGhpcy55ID0gcGFyc2VGbG9hdCh0b2tlbnNbMV0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnggPSB4T3JWYWx1ZTtcbiAgICAgICAgICAgIHRoaXMueSA9IHkgYXMgbnVtYmVyO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZXF1YWxzKG90aGVyUG9pbnQ6IElQb2ludCkge1xuICAgICAgICByZXR1cm4gdGhpcy54ID09IG90aGVyUG9pbnQueCAmJiB0aGlzLnkgPT0gb3RoZXJQb2ludC55O1xuICAgIH1cbn1cblxuZnVuY3Rpb24gaXNOb3p6bGUob2JqZWN0OiBJUG9pbnQgfCBOb3p6bGUpOiBvYmplY3QgaXMgTm96emxlIHtcbiAgICByZXR1cm4gJ3R5cGUnIGluIG9iamVjdCAmJiBvYmplY3QudHlwZSA9PSBFbGVtZW50VHlwZS5OT1paTEU7XG59XG5cbmludGVyZmFjZSBTaGFwZSBleHRlbmRzIElQb2ludCB7XG4gICAgd2lkdGg6IG51bWJlcjtcbiAgICBoZWlnaHQ6IG51bWJlcjtcbiAgICByb3RhdGlvbjogbnVtYmVyO1xufVxuXG5lbnVtIEVsZW1lbnRUeXBlIHtcbiAgICBQSVBFID0gXCJQaXBlXCIsIFxuICAgIE5PWlpMRSA9IFwiTm96emxlXCIsXG4gICAgVklTVUFMX0VMRU1FTlQgPSBcIlZpc3VhbEVsZW1lbnRcIiwgXG4gICAgQ09NTVVOSUNBVElPTl9JTlRFUkZBQ0UgPSBcIkNvbW11bmljYXRpb25JbnRlcmZhY2VcIiwgXG4gICAgQ09NTVVOSUNBVElPTl9PQkpFQ1QgPSBcIkNvbW11bmljYXRpb25PYmplY3RcIlxufVxuXG5pbnRlcmZhY2UgR2VuZXJpY01wdEVsZW1lbnQge1xuICAgIGlkOiBzdHJpbmc7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIHR5cGU6IEVsZW1lbnRUeXBlO1xufVxuXG5pbnRlcmZhY2UgUG9zaXRpb25hYmxlRWxlbWVudCBleHRlbmRzIElQb2ludCB7XG4gICAgLy8gZW1wdHlcbn1cblxuaW50ZXJmYWNlIE5venpsZSBleHRlbmRzIEdlbmVyaWNNcHRFbGVtZW50LCBQb3NpdGlvbmFibGVFbGVtZW50IHtcbiAgICBleHRlcm5hbENvbm5lY3RvcklkOiBzdHJpbmc7XG4gICAgYmFzZUNsYXNzOiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBWaXN1YWxPYmplY3QgZXh0ZW5kcyBTaGFwZSwgR2VuZXJpY01wdEVsZW1lbnQge1xuICAgIHZpZXdUeXBlOiBzdHJpbmc7XG4gICAgZUNsYXNzVmVyc2lvbjogc3RyaW5nO1xuICAgIGVDbGFzc0NsYXNzaWZpY2F0aW9uOiBzdHJpbmc7XG4gICAgZUNsYXNzSXJkaTogc3RyaW5nO1xuICAgIHJlZklkOiBzdHJpbmc7XG4gICAgbm96emxlczogTm96emxlW107XG4gICAgc3ViRWxlbWVudD86IFNoYXBlO1xufVxuXG5pbnRlcmZhY2UgUGlwZURlZmluaXRpb24gZXh0ZW5kcyBHZW5lcmljTXB0RWxlbWVudCB7XG4gICAgc291cmNlOiBJUG9pbnQgfCBOb3p6bGU7XG4gICAgdGFyZ2V0OiBJUG9pbnQgfCBOb3p6bGU7XG4gICAgd2F5cG9pbnRzOiBJUG9pbnRbXTtcbiAgICBub3p6bGVzOiBOb3p6bGVbXTtcbn1cblxuaW50ZXJmYWNlIENvbW11bmljYXRpb25JbnRlcmZhY2UgZXh0ZW5kcyBHZW5lcmljTXB0RWxlbWVudCB7XG4gICAgaWRlbnRpZmllcjogc3RyaW5nO1xuICAgIG5hbWVzcGFjZTogc3RyaW5nO1xuICAgIGFjY2Vzczogc3RyaW5nO1xuICAgIGVuZHBvaW50OiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBDb21tdW5pY2F0aW9uT2JqZWN0IGV4dGVuZHMgR2VuZXJpY01wdEVsZW1lbnQge1xuICAgIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gICAgaW50ZXJmYWNlczogQ29tbXVuaWNhdGlvbkludGVyZmFjZVtdO1xufVxuXG5pbnRlcmZhY2UgSW50ZXJhY3RpYmxlRWxlbWVudCB7XG4gICAgb2JqOiBWaXN1YWxPYmplY3Q7XG4gICAgY29tbXVuaWNhdGlvbj86IENvbW11bmljYXRpb25PYmplY3Q7XG59XG5cbmludGVyZmFjZSBIbWlEaWFncmFtIHtcbiAgICB3aWR0aDogbnVtYmVyO1xuICAgIGhlaWdodDogbnVtYmVyO1xuICAgIGVsZW1lbnRzOiBJbnRlcmFjdGlibGVFbGVtZW50W107XG4gICAgcGlwZXM6IFBpcGVEZWZpbml0aW9uW107XG59XG5cbmludGVyZmFjZSBXaW5kb3cge1xuICAgIFBvaW50OiB0eXBlb2YgUG9pbnRcbiAgICBFbGVtZW50VHlwZTogdHlwZW9mIEVsZW1lbnRUeXBlLFxuICAgIGlzTm96emxlOiB0eXBlb2YgaXNOb3p6bGVcbn1cbndpbmRvd1tcIlBvaW50XCJdID0gUG9pbnQ7XG53aW5kb3dbXCJFbGVtZW50VHlwZVwiXSA9IEVsZW1lbnRUeXBlO1xud2luZG93W1wiaXNOb3p6bGVcIl0gPSBpc05venpsZTsiXX0=", "Type" : "BMTypescriptHost", "Visible" : true, "Width" : 148, "Z-index" : 10, "_Height" : 1064, "_Left" : 114, "_NavigationWidth" : 256, "_PropertiesWidth" : 0, "_Top" : 59, "_Width" : 2056, "__TypeDisplayName" : "TypeScript Object" }, "Widgets" : [ ] }, { "Properties" : { "Area" : "UI", "Code" : "//#import mtpJsonDef from MTPViewerV2\n\n/**\n * A MtpFileParser handles loading a mtp file from the given link,\n * parsing it into an HMIDiagram object\n */\nclass MtpFileParser {\n\n    public async loadFile(filePath: string): Promise<HmiDiagram> {\n        try {\n            const response = await fetch(filePath);\n            const responseText = await response.text();\n            const xmlData = new DOMParser().parseFromString(responseText, \"text/xml\");\n            return this.parseMtpXml(xmlData);\n        } catch (e) {\n            console.error(\"Failed to load MTP\")\n            throw e;\n        }\n    }\n\n    private parseMtpXml(file: Document): HmiDiagram {\n        let diagram: HmiDiagram = {\n            pipes: [],\n            elements: [],\n            width: 0,\n            height: 0\n        };\n\n        // find a referece to the diagram object\n        //const hmiDiagramXml = file.querySelector('InstanceHierarchy[Name=\"HMI\"] InternalElement[Name=\"Kat_Formulierung\"]');\n        //We consider the first InternalElement element from the HMI node as the HMI diagram in order not to add a widget property in the Composer\n        const hmiDiagramXml = file.querySelector('InstanceHierarchy[Name=\"HMI\"] InternalElement');\n        if (!hmiDiagramXml) {\n            throw \"No hmi diagram found in given file\"\n        }\n        diagram.width = this.getAttributeTagValue(hmiDiagramXml, \"Width\", true);\n        diagram.height = this.getAttributeTagValue(hmiDiagramXml, \"Height\", true);\n\n        // iterate through the internal elements of the diagram and add them to the diagram\n        for (let i = 0; i < hmiDiagramXml.childElementCount; i++) {\n            const element = hmiDiagramXml.children[i] as Element;\n            if (element.nodeName == \"InternalElement\") {\n                this.parseHmiInternalElement(element, diagram, file);\n            }\n        }\n\n        return diagram;\n    }\n\n    private parseHmiInternalElement(element: Element, diagram: HmiDiagram, file: Document) {\n        // if there is a attribute with an edge path, assume it's a line\n        if (this.getAttributeTagValue(element, \"Edgepath\", false)) {\n            this.parseHmiPipe(element, diagram);\n        } else if (this.getAttributeTagValue(element, \"eClassClassificationClass\", false)) {\n            this.parseDiagramElement(element, diagram, file);\n        }\n    }\n\n    private parseDiagramElement(element: Element, diagram: HmiDiagram, file: Document) {\n        let nozzles = this.getNozzleList(element);\n        let visualElement: VisualObject = {\n            viewType: this.getAttributeTagValue(element, \"ViewType\", false),\n            eClassVersion: this.getAttributeTagValue(element, \"eClassVersion\", false),\n            eClassClassification: this.getAttributeTagValue(element, \"eClassClassificationClass\", false),\n            eClassIrdi: this.getAttributeTagValue(element, \"eClassIRDI\", false),\n            refId: this.getAttributeTagValue(element, \"RefID\", false),\n            id: element.getAttribute(\"ID\")!,\n            name: element.getAttribute(\"Name\")!,\n            width: this.getAttributeTagValue(element, \"Width\", true),\n            height: this.getAttributeTagValue(element, \"Height\", true),\n            rotation: this.getAttributeTagValue(element, \"Rotation\", true),\n            x: this.getAttributeTagValue(element, \"X\", true),\n            y: this.getAttributeTagValue(element, \"Y\", true),\n            nozzles: nozzles,\n            type: ElementType.VISUAL_ELEMENT\n        };\n        // find the elements that are real nozzles \n        let realNozzles = nozzles.filter((el) => { return el.baseClass == \"MTPHMISUCLib/PortObject/Nozzle\" });\n        if (realNozzles.length == 2) {\n            // we will assume that the subelement will be positioned between this two realNozzles\n            visualElement.subElement = {\n                x: Math.min(realNozzles[0].x, realNozzles[1].x),\n                y: Math.min(realNozzles[0].y, realNozzles[1].y),\n                height: realNozzles[0].y < realNozzles[1].y ? realNozzles[1].y - realNozzles[0].y : realNozzles[0].y - realNozzles[1].y,\n                width: Math.sqrt((realNozzles[0].x - realNozzles[1].x) ** 2 + (realNozzles[0].y - realNozzles[1].y) ** 2),\n                rotation: visualElement.rotation            // inherit the rotation from the parent\n            };\n\n            // TODO: decide on when the height or width will be 0\n            if (visualElement.subElement.height < 1) {\n                visualElement.subElement.height = 10;\n            }\n            if (visualElement.subElement.width < 1) {\n                visualElement.subElement.width = 10;\n            }\n        }\n\n        // we need to now search for the communication\n        let communicationElementAttr = file.evaluate(`//InstanceHierarchy[@Name=\"ModuleTypePackage\"]//InternalElement[@Name=\"Communication\"]` +\n            `/InternalElement[@Name=\"InstanceList\"]//Attribute[@Name=\"RefID\"][Value=\"${visualElement.refId}\"]`,\n            file, null, XPathResult.ANY_TYPE, null).iterateNext();\n        let communicationElement = communicationElementAttr ? communicationElementAttr.parentElement : undefined;\n        let communicationObject = undefined;\n        if (communicationElement != null) {\n            let communicationDescription = communicationElement.querySelector(\"Description\")!.textContent!;\n            let interfaceList: CommunicationInterface[] = [];\n            // interate through the attributes and try to get each communication element\n            for (let i = 0; i < communicationElement.childElementCount; i++) {\n                const attrElement = communicationElement.children[i] as Element;\n                if (attrElement.nodeName == \"Attribute\" && attrElement.getAttribute(\"Node\") != \"RefID\") {\n                    let attrValue = attrElement.getElementsByTagName(\"Value\")[0].textContent;\n                    // search for this attribute in the communication lib\n                    let sourceCommunicationElement = file.querySelector(`InstanceHierarchy[Name=\"ModuleTypePackage\"] InternalElement[Name=\"Communication\"] ` +\n                        `InternalElement[Name=\"SourceList\"]  ExternalInterface[ID=\"${attrValue}\"]`);\n                    if (sourceCommunicationElement) {\n                        interfaceList.push({\n                            access: this.getAttributeTagValue(sourceCommunicationElement, \"Access\", false),\n                            identifier: this.getAttributeTagValue(sourceCommunicationElement, \"Identifier\", false),\n                            namespace: this.getAttributeTagValue(sourceCommunicationElement, \"Namespace\", false),\n                            type: ElementType.COMMUNICATION_INTERFACE,\n                            id: sourceCommunicationElement.getAttribute(\"ID\")!,\n                            name: attrElement.getAttribute(\"Name\")!,\n                            endpoint: this.getAttributeTagValue(sourceCommunicationElement.parentElement!, \"Endpoint\", false)\n                        })\n                    }\n                }\n            }\n            communicationObject = {\n                description: communicationDescription,\n                interfaces: interfaceList,\n                type: ElementType.COMMUNICATION_OBJECT,\n                id: communicationElement.getAttribute(\"ID\")!,\n                name: communicationElement.getAttribute(\"Name\")!\n            }\n        }\n        if (communicationObject) {\n            diagram.elements.push({ communication: communicationObject, obj: visualElement });\n        } else {\n            diagram.elements.push({ obj: visualElement });\n        }\n    }\n\n    private parseHmiPipe(element: Element, diagram: HmiDiagram) {\n        let pipe: PipeDefinition = <PipeDefinition>{\n            id: element.getAttribute(\"ID\"),\n            name: element.getAttribute(\"Name\"),\n            type: ElementType.PIPE\n        };\n        // get the parsed path\n        let parsedPath = this.parseEdgePath(this.getAttributeTagValue(element, \"Edgepath\", false));\n        // parse the nozzles\n        pipe.nozzles = this.getNozzleList(element);\n        // check to see if the the source and target points form the path are equal to a nozzle\n        for (const nozzle of pipe.nozzles) {\n            if (parsedPath.source.equals(nozzle)) {\n                pipe.source = nozzle;\n            }\n            if (parsedPath.target.equals(nozzle)) {\n                pipe.target = nozzle;\n            }\n        }\n        // check if the soruce and target were assigned\n        if (!pipe.source) {\n            pipe.source = parsedPath.source;\n        }\n        if (!pipe.target) {\n            pipe.target = parsedPath.target;\n        }\n        pipe.waypoints = parsedPath.waypoints;\n        diagram.pipes.push(pipe);\n    }\n\n    private getNozzleList(element: Element): Nozzle[] {\n        let nozzles: Nozzle[] = [];\n        for (let j = 0; j < element.childElementCount; j++) {\n            const subElement = element.children[j] as Element;\n            if (subElement.nodeName == \"InternalElement\") {\n                nozzles.push({\n                    id: subElement.getAttribute(\"ID\")!,\n                    name: subElement.getAttribute(\"Name\")!,\n                    x: this.getAttributeTagValue(subElement, \"X\", true),\n                    y: this.getAttributeTagValue(subElement, \"Y\", true),\n                    externalConnectorId: element.querySelector('ExternalInterface[Name=\"Connector\"]')!.getAttribute(\"ID\")!,\n                    baseClass: subElement.getAttribute(\"RefBaseSystemUnitPath\")!,\n                    type: ElementType.NOZZLE\n                })\n            }\n        }\n        return nozzles;\n    }\n\n\n    /**\n     * Computes a list of points into a start, end and intermidiate points\n     */\n    private parseEdgePath(edgePath: string): { source: Point, target: Point, waypoints: Point[] } {\n        let tokens = edgePath.split(\";\");\n        return {\n            source: new Point(tokens[0]),\n            target: new Point(tokens[tokens.length - 1]),\n            waypoints: tokens.slice(1, -1).map((el) => { return new Point(el) })\n        }\n    }\n\n    private getAttributeTagValue(parent: Element, attrName: string, asNumber: true): number;\n    private getAttributeTagValue(parent: Element, attrName: string, asNumber: false): string;\n\n    /**\n     * XML parsing fucntion, helping getting the Value tag of a Attribute tag identified by the attrName\n     */\n    private getAttributeTagValue(parent: Element, attrName: string, asNumber: boolean): number | string | undefined | null {\n        let value = parent.querySelector(`Attribute[Name=\"${attrName}\"] > Value`);\n        if (value) {\n            if (asNumber && value.textContent) {\n                return parseFloat(value.textContent);\n            } else {\n                return value.textContent;\n            }\n        }\n    }\n}\n\ninterface Window {\n    MtpFileParser: typeof MtpFileParser\n}\nwindow[\"MtpFileParser\"] = MtpFileParser;", "ColumnPosition" : 26, "DirectLinkUUID" : "", "DisplayName" : "BMTypescriptHost-13", "Exports" : "interface mptFileParser extends TWRuntimeWidget {\t    \t/**\t    \t * Should be invoked to dispatch an event to the Thingworx runtime, causing all actions bound to that event to execute.\n\t    \t * @param event - The name of the event to dispatch.\n\t    \t */\n\t\t\tdispatchEvent(event: string): void;\n\t    \t/**\n\t    \t * Invoked after any property has been updated as a result of a binding.\n\t    \t * This method will be invoked after the specific ..DidUpdateToValue method is invoked.\n\t    \t * Scripts can override this method to react to all property updates.\n\t    \t * @param event - The name of the event to dispatch.\n\t    \t */\n\t\t\tpropertyDidUpdateToValue(property: string, value: any | undefined): void;\n\t    \t/**\n\t    \t * Finds and returns the widget with the given name in the current mashup.\n\t    \t * @param name - The DisplayName of the widget to find.\n\t    \t * @return - The widget object if it was found, undefined otherwise.\n\t    \t */\n\t\t\twidgetNamed(name: string): TWRuntimeWidget | undefined;\n\t    \t/**\n\t    \t * Sends a property update to the given widget as if it came from a binding.\n\t    \t * Supported properties may be updated this way even if they are not bound to anything in the composer.\n\t    \t * @param widget - The widget object whose property should be updated.\n\t    \t * @param args - An object containing additional arguments. This object must have the following properties:\n\t    \t *\t\t\t\t\tforProperty {String} - The name of the property to update.\n\t    \t *\t\t\t\t\tvalue {AnyObject} - The value to which that property should update.\n\t    \t */\n\t\t\tdispatchPropertyUpdateToWidget(widget: any, args: SelfDispatchPropertyUpdateToWidgetArgs): void;\n\t    \t/**\n\t    \t * May be overriden by scripts that create an UI. This method receives the script's container as its parameter.\n\t    \t * It is the script's responsibility to add their content to the supplied container.\n\t    \t * @param container - The container in which the UI elements should be added.\n\t    \t */\n\t\t\trenderWithContainer(container: $): void;\n\t\t}\n", "FullScreen" : true, "Height" : 46, "Id" : "BMTypescriptHost-13", "Left" : 685, "ResponsiveLayout" : false, "RuntimeProperties" : "[]", "Scope" : "global", "ScrollPosition" : 24, "ShowDataLoading" : true, "Title" : "mptFileParser", "Top" : 15, "TranspiledCode" : "\"use strict\";\r\n//#import mtpJsonDef from MTPViewerV2\r\n/**\r\n * A MtpFileParser handles loading a mtp file from the given link,\r\n * parsing it into an HMIDiagram object\r\n */\r\nclass MtpFileParser {\r\n    async loadFile(filePath) {\r\n        try {\r\n            const response = await fetch(filePath);\r\n            const responseText = await response.text();\r\n            const xmlData = new DOMParser().parseFromString(responseText, \"text/xml\");\r\n            return this.parseMtpXml(xmlData);\r\n        }\r\n        catch (e) {\r\n            console.error(\"Failed to load MTP\");\r\n            throw e;\r\n        }\r\n    }\r\n    parseMtpXml(file) {\r\n        let diagram = {\r\n            pipes: [],\r\n            elements: [],\r\n            width: 0,\r\n            height: 0\r\n        };\r\n        // find a referece to the diagram object\r\n        //const hmiDiagramXml = file.querySelector('InstanceHierarchy[Name=\"HMI\"] InternalElement[Name=\"Kat_Formulierung\"]');\r\n        //We consider the first InternalElement element from the HMI node as the HMI diagram in order not to add a widget property in the Composer\r\n        const hmiDiagramXml = file.querySelector('InstanceHierarchy[Name=\"HMI\"] InternalElement');\r\n        if (!hmiDiagramXml) {\r\n            throw \"No hmi diagram found in given file\";\r\n        }\r\n        diagram.width = this.getAttributeTagValue(hmiDiagramXml, \"Width\", true);\r\n        diagram.height = this.getAttributeTagValue(hmiDiagramXml, \"Height\", true);\r\n        // iterate through the internal elements of the diagram and add them to the diagram\r\n        for (let i = 0; i < hmiDiagramXml.childElementCount; i++) {\r\n            const element = hmiDiagramXml.children[i];\r\n            if (element.nodeName == \"InternalElement\") {\r\n                this.parseHmiInternalElement(element, diagram, file);\r\n            }\r\n        }\r\n        return diagram;\r\n    }\r\n    parseHmiInternalElement(element, diagram, file) {\r\n        // if there is a attribute with an edge path, assume it's a line\r\n        if (this.getAttributeTagValue(element, \"Edgepath\", false)) {\r\n            this.parseHmiPipe(element, diagram);\r\n        }\r\n        else if (this.getAttributeTagValue(element, \"eClassClassificationClass\", false)) {\r\n            this.parseDiagramElement(element, diagram, file);\r\n        }\r\n    }\r\n    parseDiagramElement(element, diagram, file) {\r\n        let nozzles = this.getNozzleList(element);\r\n        let visualElement = {\r\n            viewType: this.getAttributeTagValue(element, \"ViewType\", false),\r\n            eClassVersion: this.getAttributeTagValue(element, \"eClassVersion\", false),\r\n            eClassClassification: this.getAttributeTagValue(element, \"eClassClassificationClass\", false),\r\n            eClassIrdi: this.getAttributeTagValue(element, \"eClassIRDI\", false),\r\n            refId: this.getAttributeTagValue(element, \"RefID\", false),\r\n            id: element.getAttribute(\"ID\"),\r\n            name: element.getAttribute(\"Name\"),\r\n            width: this.getAttributeTagValue(element, \"Width\", true),\r\n            height: this.getAttributeTagValue(element, \"Height\", true),\r\n            rotation: this.getAttributeTagValue(element, \"Rotation\", true),\r\n            x: this.getAttributeTagValue(element, \"X\", true),\r\n            y: this.getAttributeTagValue(element, \"Y\", true),\r\n            nozzles: nozzles,\r\n            type: ElementType.VISUAL_ELEMENT\r\n        };\r\n        // find the elements that are real nozzles \r\n        let realNozzles = nozzles.filter((el) => { return el.baseClass == \"MTPHMISUCLib/PortObject/Nozzle\"; });\r\n        if (realNozzles.length == 2) {\r\n            // we will assume that the subelement will be positioned between this two realNozzles\r\n            visualElement.subElement = {\r\n                x: Math.min(realNozzles[0].x, realNozzles[1].x),\r\n                y: Math.min(realNozzles[0].y, realNozzles[1].y),\r\n                height: realNozzles[0].y < realNozzles[1].y ? realNozzles[1].y - realNozzles[0].y : realNozzles[0].y - realNozzles[1].y,\r\n                width: Math.sqrt((realNozzles[0].x - realNozzles[1].x) ** 2 + (realNozzles[0].y - realNozzles[1].y) ** 2),\r\n                rotation: visualElement.rotation // inherit the rotation from the parent\r\n            };\r\n            // TODO: decide on when the height or width will be 0\r\n            if (visualElement.subElement.height < 1) {\r\n                visualElement.subElement.height = 10;\r\n            }\r\n            if (visualElement.subElement.width < 1) {\r\n                visualElement.subElement.width = 10;\r\n            }\r\n        }\r\n        // we need to now search for the communication\r\n        let communicationElementAttr = file.evaluate(`//InstanceHierarchy[@Name=\"ModuleTypePackage\"]//InternalElement[@Name=\"Communication\"]` +\r\n            `/InternalElement[@Name=\"InstanceList\"]//Attribute[@Name=\"RefID\"][Value=\"${visualElement.refId}\"]`, file, null, XPathResult.ANY_TYPE, null).iterateNext();\r\n        let communicationElement = communicationElementAttr ? communicationElementAttr.parentElement : undefined;\r\n        let communicationObject = undefined;\r\n        if (communicationElement != null) {\r\n            let communicationDescription = communicationElement.querySelector(\"Description\").textContent;\r\n            let interfaceList = [];\r\n            // interate through the attributes and try to get each communication element\r\n            for (let i = 0; i < communicationElement.childElementCount; i++) {\r\n                const attrElement = communicationElement.children[i];\r\n                if (attrElement.nodeName == \"Attribute\" && attrElement.getAttribute(\"Node\") != \"RefID\") {\r\n                    let attrValue = attrElement.getElementsByTagName(\"Value\")[0].textContent;\r\n                    // search for this attribute in the communication lib\r\n                    let sourceCommunicationElement = file.querySelector(`InstanceHierarchy[Name=\"ModuleTypePackage\"] InternalElement[Name=\"Communication\"] ` +\r\n                        `InternalElement[Name=\"SourceList\"]  ExternalInterface[ID=\"${attrValue}\"]`);\r\n                    if (sourceCommunicationElement) {\r\n                        interfaceList.push({\r\n                            access: this.getAttributeTagValue(sourceCommunicationElement, \"Access\", false),\r\n                            identifier: this.getAttributeTagValue(sourceCommunicationElement, \"Identifier\", false),\r\n                            namespace: this.getAttributeTagValue(sourceCommunicationElement, \"Namespace\", false),\r\n                            type: ElementType.COMMUNICATION_INTERFACE,\r\n                            id: sourceCommunicationElement.getAttribute(\"ID\"),\r\n                            name: attrElement.getAttribute(\"Name\"),\r\n                            endpoint: this.getAttributeTagValue(sourceCommunicationElement.parentElement, \"Endpoint\", false)\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            communicationObject = {\r\n                description: communicationDescription,\r\n                interfaces: interfaceList,\r\n                type: ElementType.COMMUNICATION_OBJECT,\r\n                id: communicationElement.getAttribute(\"ID\"),\r\n                name: communicationElement.getAttribute(\"Name\")\r\n            };\r\n        }\r\n        if (communicationObject) {\r\n            diagram.elements.push({ communication: communicationObject, obj: visualElement });\r\n        }\r\n        else {\r\n            diagram.elements.push({ obj: visualElement });\r\n        }\r\n    }\r\n    parseHmiPipe(element, diagram) {\r\n        let pipe = {\r\n            id: element.getAttribute(\"ID\"),\r\n            name: element.getAttribute(\"Name\"),\r\n            type: ElementType.PIPE\r\n        };\r\n        // get the parsed path\r\n        let parsedPath = this.parseEdgePath(this.getAttributeTagValue(element, \"Edgepath\", false));\r\n        // parse the nozzles\r\n        pipe.nozzles = this.getNozzleList(element);\r\n        // check to see if the the source and target points form the path are equal to a nozzle\r\n        for (const nozzle of pipe.nozzles) {\r\n            if (parsedPath.source.equals(nozzle)) {\r\n                pipe.source = nozzle;\r\n            }\r\n            if (parsedPath.target.equals(nozzle)) {\r\n                pipe.target = nozzle;\r\n            }\r\n        }\r\n        // check if the soruce and target were assigned\r\n        if (!pipe.source) {\r\n            pipe.source = parsedPath.source;\r\n        }\r\n        if (!pipe.target) {\r\n            pipe.target = parsedPath.target;\r\n        }\r\n        pipe.waypoints = parsedPath.waypoints;\r\n        diagram.pipes.push(pipe);\r\n    }\r\n    getNozzleList(element) {\r\n        let nozzles = [];\r\n        for (let j = 0; j < element.childElementCount; j++) {\r\n            const subElement = element.children[j];\r\n            if (subElement.nodeName == \"InternalElement\") {\r\n                nozzles.push({\r\n                    id: subElement.getAttribute(\"ID\"),\r\n                    name: subElement.getAttribute(\"Name\"),\r\n                    x: this.getAttributeTagValue(subElement, \"X\", true),\r\n                    y: this.getAttributeTagValue(subElement, \"Y\", true),\r\n                    externalConnectorId: element.querySelector('ExternalInterface[Name=\"Connector\"]').getAttribute(\"ID\"),\r\n                    baseClass: subElement.getAttribute(\"RefBaseSystemUnitPath\"),\r\n                    type: ElementType.NOZZLE\r\n                });\r\n            }\r\n        }\r\n        return nozzles;\r\n    }\r\n    /**\r\n     * Computes a list of points into a start, end and intermidiate points\r\n     */\r\n    parseEdgePath(edgePath) {\r\n        let tokens = edgePath.split(\";\");\r\n        return {\r\n            source: new Point(tokens[0]),\r\n            target: new Point(tokens[tokens.length - 1]),\r\n            waypoints: tokens.slice(1, -1).map((el) => { return new Point(el); })\r\n        };\r\n    }\r\n    /**\r\n     * XML parsing fucntion, helping getting the Value tag of a Attribute tag identified by the attrName\r\n     */\r\n    getAttributeTagValue(parent, attrName, asNumber) {\r\n        let value = parent.querySelector(`Attribute[Name=\"${attrName}\"] > Value`);\r\n        if (value) {\r\n            if (asNumber && value.textContent) {\r\n                return parseFloat(value.textContent);\r\n            }\r\n            else {\r\n                return value.textContent;\r\n            }\r\n        }\r\n    }\r\n}\r\nwindow[\"MtpFileParser\"] = MtpFileParser;\r\n//# sourceMappingURL=data:application/json;base64,", "Type" : "BMTypescriptHost", "Visible" : true, "Width" : 144, "Z-index" : 10, "_Height" : 1064, "_Left" : 114, "_NavigationWidth" : 256, "_PropertiesWidth" : 0, "_Top" : 59, "_Width" : 2056, "__TypeDisplayName" : "TypeScript Object" }, "Widgets" : [ ] }, { "Properties" : { "Area" : "UI", "Code" : "//#import mtpJsonDef from MTPViewerV2\n\nconst NOZZLE_WIDTH = 5;\nconst NOZZLE_HEIGHT = 5;\nconst STENCIL_PATH = \"/Thingworx/Common/extensions/mxdiagram_ExtensionPackage/ui/mxdiagram/resources/stencils/\";\nconst STENCIL_LIST = ['agitators.xml', 'apparatus_elements.xml', 'agitators.xml', 'centrifuges.xml', 'compressors.xml',\n    'compressors_iso.xml', 'crushers_grinding.xml', 'driers.xml', 'engines.xml', 'feeders.xml', 'filters.xml', 'fittings.xml',\n    'flow_sensors.xml', 'heat_exchangers.xml', 'instruments.xml', 'misc.xml', 'mixers.xml', 'piping.xml', 'feeders.xml', 'feeders.xml',\n    'pumps.xml', 'pumps_din.xml', 'pumps_iso.xml', 'separators.xml', 'shaping_machines.xml', 'valves.xml', 'vessels.xml'];\n\n/**\n * A MtpFileLoader handles loading a mtp file from the given link, \n * parsing it into an mxgraph graph object and retring it.\n */\nclass MtpJsonToMxGraph {\n    private mxgraph: any;\n    private container: HTMLElement;\n    private shapeMap: { [key: string]: string };\n    /**\n     *  Intializes the MtpFileLoader with the mxgraph namespace\n     */\n    constructor(mxGraphNamespace: any, container: HTMLElement, shapeMap: { [key: string]: string }) {\n        this.mxgraph = mxGraphNamespace;\n        this.container = container;\n        // load all the stencils\n        this.loadStencilFiles(STENCIL_LIST.map((el) => { return STENCIL_PATH + el }));\n        this.shapeMap = shapeMap;\n    }\n\n    public drawMpt(mtpDiagram: HmiDiagram): any {\n        try {\n            \n            let graph = this.initGraph(new this.mxgraph.mxGraph(this.container));\n            // draw the pipes\n            this.drawPipes(graph, graph.getDefaultParent(), mtpDiagram.pipes);\n            // draw the elements\n            this.drawElements(graph, graph.getDefaultParent(), mtpDiagram.elements);\n\n            return graph;\n        } catch (e) {\n            console.error(\"Failed to draw mxgraph for MTP\")\n            throw e;\n        }\n    }\n\n    private drawElements(graph: any, parent: any, elements: InteractibleElement[]) {\n        for (const element of elements) {\n            if (element.obj.subElement) {\n                // draw the element first (container then the subelement)\n                // depending on the rotation of the element we need to offset it across that axis\n                let elementOffsetX = element.obj.subElement.height / 2 * Math.abs(Math.sin(element.obj.rotation * Math.PI / 180));\n                let elementOffsetY = NOZZLE_HEIGHT * Math.abs(Math.cos(element.obj.rotation * Math.PI / 180));\n                graph.insertVertex(parent, element.obj.id, element.obj.name, element.obj.subElement.x - elementOffsetX, element.obj.subElement.y - elementOffsetY,\n                    element.obj.subElement.width, element.obj.subElement.height, `element;shape=${this.shapeMap[element.obj.eClassClassification]};rotation=${element.obj.rotation}`);\n            } else {\n                // if we don't have a subelement, draw the visual object directly\n                graph.insertVertex(parent, element.obj.id, element.obj.name, element.obj.x, element.obj.y,\n                    element.obj.width, element.obj.height, `element;shape=${this.shapeMap[element.obj.eClassClassification]}`);\n            }\n            if (element.communication) {\n                // draw the parent first \n                let elParent = graph.insertVertex(parent, element.communication.id, element.communication.name, element.obj.x, element.obj.y,\n                    element.obj.width, element.obj.height, \"swimlane;childLayout=stackLayout;horizontal=1;startSize=26;horizontalStack=0;resizeParent=1;collapsible=1;resizeParentMax=0;resizeLast=0;\");\n                elParent.collapsed = true;\n                // if we have communication elements, draw them in the container\n                for (const commInterface of element.communication.interfaces) {\n                    let value = document.createElement(\"Value\");\n                    value.setAttribute('label', commInterface.name);\n                    let cell = graph.insertVertex(elParent, commInterface.id, value, 0, 0, element.obj.width, 20, \"interfaceValue\");\n                }\n            }\n        }\n    }\n\n    private drawPipes(graph: any, parent: any, pipes: PipeDefinition[]) {\n        for (const pipe of pipes) {\n            // keep a map of the nozzles\n            let nozzleMap: { [key: string]: any } = {};\n            // draw the nozzles first, then the pipe itself\n            for (const nozzle of pipe.nozzles) {\n                nozzleMap[nozzle.id] = graph.insertVertex(parent, nozzle.id, nozzle.name,\n                    nozzle.x - NOZZLE_WIDTH / 2, nozzle.y - NOZZLE_HEIGHT / 2, NOZZLE_WIDTH, NOZZLE_HEIGHT, nozzle.type);\n            }\n            // draw the pipe itself, but make sure that it's either connected to a nozzle or to a point\n            let edge = new this.mxgraph.mxCell(pipe.name, new this.mxgraph.mxGeometry(), pipe.type);\n            edge.setId(pipe.id);\n            edge.setEdge(true);\n            edge.geometry.relative = true;\n            // set the  waypoints\n            edge.geometry.points = pipe.waypoints.map((point) => { return new this.mxgraph.mxPoint(point.x, point.y) });\n            // soruce and target point to the vertex or to nothing\n            let source = undefined;\n            let target = undefined;\n            if (isNozzle(pipe.source)) {\n                source = nozzleMap[pipe.source.id];\n            } else {\n                // set the starting point a a point\n                edge.geometry.sourcePoint = new this.mxgraph.mxPoint(pipe.source.x, pipe.source.y);\n            }\n            if (isNozzle(pipe.target)) {\n                target = nozzleMap[pipe.target.id];\n            } else {\n                // set the target point a a point\n                edge.geometry.targetPoint = new this.mxgraph.mxPoint(pipe.target.x, pipe.target.y);\n            }\n            graph.addEdge(edge, parent, source, target);\n        }\n    }\n\n    public initGraph(graph: any): any {\n        // Allow panning using the right click buttion\n        graph.setPanning(true);\n        // enable the display of tooltips\n        graph.setTooltips(true);\n        // disable new connections and cloning cells, as well as drag and drop outside\n        graph.setConnectable(false);\n        graph.setCellsCloneable(true);\n        graph.setCellsDeletable(true);\n        graph.setDropEnabled(true);\n        graph.setSplitEnabled(false);\n        graph.resetEdgesOnConnect = false;\n\n        this.declareMxGraphStyles(graph);\n        graph.getModel().prefix = \"autoGenerated\";\n\n        graph.getLabel = function (cell: any) {\n            if (cell) {\n                // get the name of style\n                let cellStyle = cell.style ? (cell.style.split(\";\") ? cell.style.split(\";\")[0] : cell.style) : undefined;\n                if (cellStyle == \"interfaceValue\") {\n                    return `${cell.getAttribute(\"label\")}: ${cell.getAttribute(\"value\", \"N/A\")}`;\n                } else if (cellStyle == \"Nozzle\") {\n                    return \"\";\n                } else if (cellStyle == \"element\") {\n                    return \"\";\n                } else if (cell.edge) {\n                    return \"\"\n                } else {\n                    return cell.value;\n                }\n            }\n        }\n\n        let layout = new this.mxgraph.mxStackLayout(graph, true);\n        layout.resizeParent = true;\n        layout.horizontal = false;\n        layout.spacing = 2;\n        let layoutMgr = new this.mxgraph.mxLayoutManager(graph);\n        layoutMgr.getLayout = function (cell: any) {\n            let cellStyle = cell.style ? (cell.style.split(\";\") ? cell.style.split(\";\")[0] : cell.style) : undefined;\n            if (cellStyle == \"swimlane\") {\n                return layout;\n            }\n\n            return null;\n        };\n\n        return graph;\n    }\n\n    /**\n     * Creates the generic styles for elements\n     */\n    private declareMxGraphStyles(graph: any) {\n        let style = graph.getStylesheet().getDefaultVertexStyle();\n        style[this.mxgraph.mxConstants.STYLE_ROUNDED] = false;\n        style[this.mxgraph.mxConstants.STYLE_FONTCOLOR] = '#1d1b1b';\n        style[this.mxgraph.mxConstants.STYLE_STROKECOLOR] = '#9673A6';\n        style[this.mxgraph.mxConstants.STYLE_FILLCOLOR] = '#f3f4f9';\n\n\n        style = this.mxgraph.mxUtils.clone(style);\n        style[this.mxgraph.mxConstants.STYLE_SHAPE] = 'swimlane';\n        style[this.mxgraph.mxConstants.STYLE_STARTSIZE] = 20;\n        graph.getStylesheet().putCellStyle('swimlane', style);\n\n        style = [];\n        style[this.mxgraph.mxConstants.STYLE_STROKECOLOR] = 'red';\n        style[this.mxgraph.mxConstants.STYLE_SHAPE] = \"ellipse\";\n        graph.getStylesheet().putCellStyle('Nozzle', style);\n\n        style = [];\n        style[this.mxgraph.mxConstants.STYLE_FILLCOLOR] = 'none';\n        style[this.mxgraph.mxConstants.STYLE_STROKECOLOR] = 'none';\n        graph.getStylesheet().putCellStyle('interfaceValue', style);\n\n        style = graph.getStylesheet().getDefaultEdgeStyle();\n        style[this.mxgraph.mxConstants.STYLE_ENDARROW] = 'none';\n        style[this.mxgraph.mxConstants.STYLE_STROKEWIDTH] = 2;\n    }\n    /**\n     * Loads the stencil files for pid diagrams\n     */\n    private loadStencilFiles(files: string[]) {\n        for (const filePath of files) {\n            let req = this.mxgraph.mxUtils.load(filePath);\n            let root = req.getDocumentElement();\n            let prefix = root.getAttribute(\"name\");\n            let shape = root.firstChild;\n\n            while (shape != null) {\n                if (shape.nodeType == this.mxgraph.mxConstants.NODETYPE_ELEMENT) {\n                    let name = prefix + '.' + shape.getAttribute('name').replace(/ /g, '_');\n                    this.mxgraph.mxStencilRegistry.addStencil(name.toLowerCase(), new this.mxgraph.mxStencil(shape));\n                }\n                shape = shape.nextSibling;\n            }\n        }\n    }\n}\ninterface Window {\n    MtpJsonToMxGraph: typeof MtpJsonToMxGraph\n}\nwindow[\"MtpJsonToMxGraph\"] = MtpJsonToMxGraph;", "ColumnPosition" : 8, "DirectLinkUUID" : "", "DisplayName" : "BMTypescriptHost-14", "Exports" : "interface mtpJsonToMxGraph extends TWRuntimeWidget {\r\n\t    \t/**\r\n\t    \t * Should be invoked to dispatch an event to the Thingworx runtime, causing all actions bound to that event to execute.\n\r\n\t    \t * @param event - The name of the event to dispatch.\n\r\n\t    \t */\n\r\n\t\t\tdispatchEvent(event: string): void;\n\r\n\t    \t/**\n\r\n\t    \t * Invoked after any property has been updated as a result of a binding.\n\r\n\t    \t * This method will be invoked after the specific ..DidUpdateToValue method is invoked.\n\r\n\t    \t * Scripts can override this method to react to all property updates.\n\r\n\t    \t * @param event - The name of the event to dispatch.\n\r\n\t    \t */\n\r\n\t\t\tpropertyDidUpdateToValue(property: string, value: any | undefined): void;\n\r\n\t    \t/**\n\r\n\t    \t * Finds and returns the widget with the given name in the current mashup.\n\r\n\t    \t * @param name - The DisplayName of the widget to find.\n\r\n\t    \t * @return - The widget object if it was found, undefined otherwise.\n\r\n\t    \t */\n\r\n\t\t\twidgetNamed(name: string): TWRuntimeWidget | undefined;\n\r\n\t    \t/**\n\r\n\t    \t * Sends a property update to the given widget as if it came from a binding.\n\r\n\t    \t * Supported properties may be updated this way even if they are not bound to anything in the composer.\n\r\n\t    \t * @param widget - The widget object whose property should be updated.\n\r\n\t    \t * @param args - An object containing additional arguments. This object must have the following properties:\n\r\n\t    \t *\t\t\t\t\tforProperty {String} - The name of the property to update.\n\r\n\t    \t *\t\t\t\t\tvalue {AnyObject} - The value to which that property should update.\n\r\n\t    \t */\n\r\n\t\t\tdispatchPropertyUpdateToWidget(widget: any, args: SelfDispatchPropertyUpdateToWidgetArgs): void;\n\r\n\t    \t/**\n\r\n\t    \t * May be overriden by scripts that create an UI. This method receives the script's container as its parameter.\n\r\n\t    \t * It is the script's responsibility to add their content to the supplied container.\n\r\n\t    \t * @param container - The container in which the UI elements should be added.\n\r\n\t    \t */\n\r\n\t\t\trenderWithContainer(container: $): void;\n\r\n\t\t}\n", "FullScreen" : true, "Height" : 44, "Id" : "BMTypescriptHost-14", "Left" : 1000, "ResponsiveLayout" : false, "RuntimeProperties" : "[]", "Scope" : "global", "ScrollPosition" : 191, "ShowDataLoading" : true, "Title" : "mtpJsonToMxGraph", "Top" : 15, "TranspiledCode" : "\"use strict\";\r\n//#import mtpJsonDef from MTPViewerV2\r\nconst NOZZLE_WIDTH = 5;\r\nconst NOZZLE_HEIGHT = 5;\r\nconst STENCIL_PATH = \"/Thingworx/Common/extensions/mxdiagram_ExtensionPackage/ui/mxdiagram/resources/stencils/\";\r\nconst STENCIL_LIST = ['agitators.xml', 'apparatus_elements.xml', 'agitators.xml', 'centrifuges.xml', 'compressors.xml',\r\n    'compressors_iso.xml', 'crushers_grinding.xml', 'driers.xml', 'engines.xml', 'feeders.xml', 'filters.xml', 'fittings.xml',\r\n    'flow_sensors.xml', 'heat_exchangers.xml', 'instruments.xml', 'misc.xml', 'mixers.xml', 'piping.xml', 'feeders.xml', 'feeders.xml',\r\n    'pumps.xml', 'pumps_din.xml', 'pumps_iso.xml', 'separators.xml', 'shaping_machines.xml', 'valves.xml', 'vessels.xml'];\r\n/**\r\n * A MtpFileLoader handles loading a mtp file from the given link,\r\n * parsing it into an mxgraph graph object and retring it.\r\n */\r\nclass MtpJsonToMxGraph {\r\n    /**\r\n     *  Intializes the MtpFileLoader with the mxgraph namespace\r\n     */\r\n    constructor(mxGraphNamespace, container, shapeMap) {\r\n        this.mxgraph = mxGraphNamespace;\r\n        this.container = container;\r\n        // load all the stencils\r\n        this.loadStencilFiles(STENCIL_LIST.map((el) => { return STENCIL_PATH + el; }));\r\n        this.shapeMap = shapeMap;\r\n    }\r\n    drawMpt(mtpDiagram) {\r\n        try {\r\n            let graph = this.initGraph(new this.mxgraph.mxGraph(this.container));\r\n            // draw the pipes\r\n            this.drawPipes(graph, graph.getDefaultParent(), mtpDiagram.pipes);\r\n            // draw the elements\r\n            this.drawElements(graph, graph.getDefaultParent(), mtpDiagram.elements);\r\n            return graph;\r\n        }\r\n        catch (e) {\r\n            console.error(\"Failed to draw mxgraph for MTP\");\r\n            throw e;\r\n        }\r\n    }\r\n    drawElements(graph, parent, elements) {\r\n        for (const element of elements) {\r\n            if (element.obj.subElement) {\r\n                // draw the element first (container then the subelement)\r\n                // depending on the rotation of the element we need to offset it across that axis\r\n                let elementOffsetX = element.obj.subElement.height / 2 * Math.abs(Math.sin(element.obj.rotation * Math.PI / 180));\r\n                let elementOffsetY = NOZZLE_HEIGHT * Math.abs(Math.cos(element.obj.rotation * Math.PI / 180));\r\n                graph.insertVertex(parent, element.obj.id, element.obj.name, element.obj.subElement.x - elementOffsetX, element.obj.subElement.y - elementOffsetY, element.obj.subElement.width, element.obj.subElement.height, `element;shape=${this.shapeMap[element.obj.eClassClassification]};rotation=${element.obj.rotation}`);\r\n            }\r\n            else {\r\n                // if we don't have a subelement, draw the visual object directly\r\n                graph.insertVertex(parent, element.obj.id, element.obj.name, element.obj.x, element.obj.y, element.obj.width, element.obj.height, `element;shape=${this.shapeMap[element.obj.eClassClassification]}`);\r\n            }\r\n            if (element.communication) {\r\n                // draw the parent first \r\n                let elParent = graph.insertVertex(parent, element.communication.id, element.communication.name, element.obj.x, element.obj.y, element.obj.width, element.obj.height, \"swimlane;childLayout=stackLayout;horizontal=1;startSize=26;horizontalStack=0;resizeParent=1;collapsible=1;resizeParentMax=0;resizeLast=0;\");\r\n                elParent.collapsed = true;\r\n                // if we have communication elements, draw them in the container\r\n                for (const commInterface of element.communication.interfaces) {\r\n                    let value = document.createElement(\"Value\");\r\n                    value.setAttribute('label', commInterface.name);\r\n                    let cell = graph.insertVertex(elParent, commInterface.id, value, 0, 0, element.obj.width, 20, \"interfaceValue\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n    drawPipes(graph, parent, pipes) {\r\n        for (const pipe of pipes) {\r\n            // keep a map of the nozzles\r\n            let nozzleMap = {};\r\n            // draw the nozzles first, then the pipe itself\r\n            for (const nozzle of pipe.nozzles) {\r\n                nozzleMap[nozzle.id] = graph.insertVertex(parent, nozzle.id, nozzle.name, nozzle.x - NOZZLE_WIDTH / 2, nozzle.y - NOZZLE_HEIGHT / 2, NOZZLE_WIDTH, NOZZLE_HEIGHT, nozzle.type);\r\n            }\r\n            // draw the pipe itself, but make sure that it's either connected to a nozzle or to a point\r\n            let edge = new this.mxgraph.mxCell(pipe.name, new this.mxgraph.mxGeometry(), pipe.type);\r\n            edge.setId(pipe.id);\r\n            edge.setEdge(true);\r\n            edge.geometry.relative = true;\r\n            // set the  waypoints\r\n            edge.geometry.points = pipe.waypoints.map((point) => { return new this.mxgraph.mxPoint(point.x, point.y); });\r\n            // soruce and target point to the vertex or to nothing\r\n            let source = undefined;\r\n            let target = undefined;\r\n            if (isNozzle(pipe.source)) {\r\n                source = nozzleMap[pipe.source.id];\r\n            }\r\n            else {\r\n                // set the starting point a a point\r\n                edge.geometry.sourcePoint = new this.mxgraph.mxPoint(pipe.source.x, pipe.source.y);\r\n            }\r\n            if (isNozzle(pipe.target)) {\r\n                target = nozzleMap[pipe.target.id];\r\n            }\r\n            else {\r\n                // set the target point a a point\r\n                edge.geometry.targetPoint = new this.mxgraph.mxPoint(pipe.target.x, pipe.target.y);\r\n            }\r\n            graph.addEdge(edge, parent, source, target);\r\n        }\r\n    }\r\n    initGraph(graph) {\r\n        // Allow panning using the right click buttion\r\n        graph.setPanning(true);\r\n        // enable the display of tooltips\r\n        graph.setTooltips(true);\r\n        // disable new connections and cloning cells, as well as drag and drop outside\r\n        graph.setConnectable(false);\r\n        graph.setCellsCloneable(true);\r\n        graph.setCellsDeletable(true);\r\n        graph.setDropEnabled(true);\r\n        graph.setSplitEnabled(false);\r\n        graph.resetEdgesOnConnect = false;\r\n        this.declareMxGraphStyles(graph);\r\n        graph.getModel().prefix = \"autoGenerated\";\r\n        graph.getLabel = function (cell) {\r\n            if (cell) {\r\n                // get the name of style\r\n                let cellStyle = cell.style ? (cell.style.split(\";\") ? cell.style.split(\";\")[0] : cell.style) : undefined;\r\n                if (cellStyle == \"interfaceValue\") {\r\n                    return `${cell.getAttribute(\"label\")}: ${cell.getAttribute(\"value\", \"N/A\")}`;\r\n                }\r\n                else if (cellStyle == \"Nozzle\") {\r\n                    return \"\";\r\n                }\r\n                else if (cellStyle == \"element\") {\r\n                    return \"\";\r\n                }\r\n                else if (cell.edge) {\r\n                    return \"\";\r\n                }\r\n                else {\r\n                    return cell.value;\r\n                }\r\n            }\r\n        };\r\n        let layout = new this.mxgraph.mxStackLayout(graph, true);\r\n        layout.resizeParent = true;\r\n        layout.horizontal = false;\r\n        layout.spacing = 2;\r\n        let layoutMgr = new this.mxgraph.mxLayoutManager(graph);\r\n        layoutMgr.getLayout = function (cell) {\r\n            let cellStyle = cell.style ? (cell.style.split(\";\") ? cell.style.split(\";\")[0] : cell.style) : undefined;\r\n            if (cellStyle == \"swimlane\") {\r\n                return layout;\r\n            }\r\n            return null;\r\n        };\r\n        return graph;\r\n    }\r\n    /**\r\n     * Creates the generic styles for elements\r\n     */\r\n    declareMxGraphStyles(graph) {\r\n        let style = graph.getStylesheet().getDefaultVertexStyle();\r\n        style[this.mxgraph.mxConstants.STYLE_ROUNDED] = false;\r\n        style[this.mxgraph.mxConstants.STYLE_FONTCOLOR] = '#1d1b1b';\r\n        style[this.mxgraph.mxConstants.STYLE_STROKECOLOR] = '#9673A6';\r\n        style[this.mxgraph.mxConstants.STYLE_FILLCOLOR] = '#f3f4f9';\r\n        style = this.mxgraph.mxUtils.clone(style);\r\n        style[this.mxgraph.mxConstants.STYLE_SHAPE] = 'swimlane';\r\n        style[this.mxgraph.mxConstants.STYLE_STARTSIZE] = 20;\r\n        graph.getStylesheet().putCellStyle('swimlane', style);\r\n        style = [];\r\n        style[this.mxgraph.mxConstants.STYLE_STROKECOLOR] = 'red';\r\n        style[this.mxgraph.mxConstants.STYLE_SHAPE] = \"ellipse\";\r\n        graph.getStylesheet().putCellStyle('Nozzle', style);\r\n        style = [];\r\n        style[this.mxgraph.mxConstants.STYLE_FILLCOLOR] = 'none';\r\n        style[this.mxgraph.mxConstants.STYLE_STROKECOLOR] = 'none';\r\n        graph.getStylesheet().putCellStyle('interfaceValue', style);\r\n        style = graph.getStylesheet().getDefaultEdgeStyle();\r\n        style[this.mxgraph.mxConstants.STYLE_ENDARROW] = 'none';\r\n        style[this.mxgraph.mxConstants.STYLE_STROKEWIDTH] = 2;\r\n    }\r\n    /**\r\n     * Loads the stencil files for pid diagrams\r\n     */\r\n    loadStencilFiles(files) {\r\n        for (const filePath of files) {\r\n            let req = this.mxgraph.mxUtils.load(filePath);\r\n            let root = req.getDocumentElement();\r\n            let prefix = root.getAttribute(\"name\");\r\n            let shape = root.firstChild;\r\n            while (shape != null) {\r\n                if (shape.nodeType == this.mxgraph.mxConstants.NODETYPE_ELEMENT) {\r\n                    let name = prefix + '.' + shape.getAttribute('name').replace(/ /g, '_');\r\n                    this.mxgraph.mxStencilRegistry.addStencil(name.toLowerCase(), new this.mxgraph.mxStencil(shape));\r\n                }\r\n                shape = shape.nextSibling;\r\n            }\r\n        }\r\n    }\r\n}\r\nwindow[\"MtpJsonToMxGraph\"] = MtpJsonToMxGraph;\r\n//# sourceMappingURL=data:application/json;base64,", "Type" : "BMTypescriptHost", "Visible" : true, "Width" : 175, "Z-index" : 10, "_Height" : 1012, "_Left" : 114, "_NavigationWidth" : 256, "_PropertiesWidth" : 0, "_Top" : 56, "_Width" : 2056, "__TypeDisplayName" : "TypeScript Object" }, "Widgets" : [ ] } ] } ] }, { "Properties" : { "AnimateExpandCollapse" : true, "Area" : "UI", "BGImageRepeat" : "no-repeat", "BGImageSize" : "auto", "DisplayName" : "Row 1", "ExpandCollapseTabLocation" : "outside", "Expanded" : true, "Id" : "container-3", "MinHeight" : 0, "MinWidth" : 0, "Overlay" : false, "OverlayIsTransparent" : false, "ResponsiveLayout" : true, "ShowDataLoading" : true, "ShowExpandCollapseTab" : false, "Style" : "DefaultContainerStyle", "TabCollapseStyle" : "DefaultTabCollapseStyle", "TabExpandStyle" : "DefaultTabExpandStyle", "TabHeight" : 36, "TabLocation" : "center", "TabOffset" : 0, "TabWidth" : 36, "Type" : "container", "Visible" : true, "Z-index" : 10, "__TypeDisplayName" : "Container", "userCannotRemove" : true }, "Widgets" : [ { "Properties" : { "Area" : "UI", "Columns" : 2, "DisplayName" : "layout-17", "Footer" : false, "FooterHeight" : 0, "Header" : false, "HeaderHeight" : 0, "Id" : "layout-17", "IncludeSpacingInFixedAreas" : false, "IsPrintLayout" : false, "Left" : 435, "LeftSidebar" : true, "LeftSidebarWidth" : 100, "Orientation" : "horizontal", "PctColumn1" : 50, "PctColumn2" : 50, "PctColumn3" : 1, "PctColumn4" : 1, "PctColumn5" : 1, "PctColumn6" : 1, "PctColumn7" : 1, "PctColumn8" : 1, "PctRow1" : 50, "PctRow2" : 50, "PctRow3" : 0, "PctRow4" : 0, "PctRow5" : 0, "PctRow6" : 0, "PctRow7" : 0, "PctRow8" : 0, "PrintMarginLeftRight" : 0.5, "PrintMarginTopBottom" : 0.5, "PrintWidth" : 650, "ResponsiveLayout" : true, "RightSidebar" : false, "RightSidebarWidth" : 0, "Rows" : 0, "ShowDataLoading" : true, "Spacing" : 2, "Top" : 145, "Type" : "layout", "Visible" : true, "Z-index" : 10, "__TypeDisplayName" : "Layout" }, "Widgets" : [ { "Properties" : { "AnimateExpandCollapse" : true, "Area" : "UI", "BGImageRepeat" : "no-repeat", "BGImageSize" : "auto", "DisplayName" : "Left Sidebar", "ExpandCollapseTabLocation" : "outside", "Expanded" : true, "Id" : "container-24", "MinHeight" : 0, "MinWidth" : 0, "Overlay" : false, "OverlayIsTransparent" : false, "ResponsiveLayout" : true, "ShowDataLoading" : true, "ShowExpandCollapseTab" : false, "Style" : "DefaultContainerStyle", "TabCollapseStyle" : "DefaultTabCollapseStyle", "TabExpandStyle" : "DefaultTabExpandStyle", "TabHeight" : 36, "TabLocation" : "center", "TabOffset" : 0, "TabWidth" : 36, "Type" : "container", "Visible" : true, "Z-index" : 10, "__TypeDisplayName" : "Container", "userCannotRemove" : true }, "Widgets" : [ { "Properties" : { "Alignment" : "left", "Area" : "UI", "AutoSelectFirstRow" : false, "ClearIfNoSelection" : false, "ComboDropdownButtonStyle" : "DefaultComboDropdownButtonStyle", "ComboEnableCheckbox" : false, "ComboItemHighlightedStyle" : "DefaultComboItemHighlightedStyle", "ComboTextboxStyle" : "DefaultComboTextboxStyle", "DisableSelectedStyle" : false, "DisplayField" : "name", "DisplayName" : "dhxlist-25", "DropdownButtonStyle" : "DefaultDropdownButtonStyle", "DropdownSelectedStyle" : "DefaultDropdownSelectedStyle", "DropdownStyle" : "DefaultDropdownStyle", "EnableKeyboardSelections" : true, "EnableToolTips" : true, "Height" : 170, "HeightOfDropdownView" : 170, "Id" : "dhxlist-25", "Label" : "", "LabelAlignment" : "left", "Left" : 40, "ListBackgroundStyle" : "DefaultListBackgroundStyle", "ListFocusStyle" : "DefaultFocusStyle", "ListItemAlternateStyle" : "DefaultListItemAlternateStyle", "ListItemHoverStyle" : "DefaultListItemHoverStyle", "ListItemSelectedStyle" : "DefaultListItemSelectedStyle", "ListItemStyle" : "DefaultListItemStyle", "ListLabelStyle" : "DefaultWidgetLabelStyle", "MultiSelect" : false, "NumberOfItemsInDropdownView" : 6, "NumberOfItemsPerPage" : 500, "ResponsiveLayout" : true, "RowHeight" : 28, "ShowDataLoading" : true, "SingleClickSelectOnTablets" : false, "TabSequence" : -1, "TextIfNoSelectionType" : "editable", "TextVerticalAlignment" : 28, "ToolTipStyle" : "DefaultTooltipStyle", "Top" : 95, "Type" : "dhxlist", "ValueField" : "name", "View" : "list", "Visible" : true, "Width" : 110, "WidthOfDropdownView" : 110, "Z-index" : 10, "__TypeDisplayName" : "List", "__supportsLabel" : true, "__supportsTooltip" : true }, "Widgets" : [ ] } ] }, { "Properties" : { "AnimateExpandCollapse" : true, "Area" : "UI", "BGImageRepeat" : "no-repeat", "BGImageSize" : "auto", "DisplayName" : "Column 1", "ExpandCollapseTabLocation" : "outside", "Expanded" : true, "Id" : "container-18", "MinHeight" : 0, "MinWidth" : 0, "Overlay" : false, "OverlayIsTransparent" : false, "ResponsiveLayout" : true, "ShowDataLoading" : true, "ShowExpandCollapseTab" : false, "Style" : "DefaultContainerStyle", "TabCollapseStyle" : "DefaultTabCollapseStyle", "TabExpandStyle" : "DefaultTabExpandStyle", "TabHeight" : 36, "TabLocation" : "center", "TabOffset" : 0, "TabWidth" : 36, "Type" : "container", "Visible" : true, "Z-index" : 10, "__TypeDisplayName" : "Container", "userCannotRemove" : true }, "Widgets" : [ { "Properties" : { "Area" : "UI", "Columns" : 0, "DisplayName" : "layout-30", "Footer" : true, "FooterHeight" : 150, "Header" : false, "HeaderHeight" : 0, "Id" : "layout-30", "IncludeSpacingInFixedAreas" : false, "IsPrintLayout" : false, "Left" : 125, "LeftSidebar" : false, "LeftSidebarWidth" : 0, "Orientation" : "vertical", "PctColumn1" : 50, "PctColumn2" : 50, "PctColumn3" : 1, "PctColumn4" : 1, "PctColumn5" : 1, "PctColumn6" : 1, "PctColumn7" : 1, "PctColumn8" : 1, "PctRow1" : 100, "PctRow2" : 50, "PctRow3" : 0, "PctRow4" : 0, "PctRow5" : 0, "PctRow6" : 0, "PctRow7" : 0, "PctRow8" : 0, "PrintMarginLeftRight" : 0.5, "PrintMarginTopBottom" : 0.5, "PrintWidth" : 650, "ResponsiveLayout" : true, "RightSidebar" : false, "RightSidebarWidth" : 0, "Rows" : 1, "ShowDataLoading" : true, "Spacing" : 0, "Top" : 95, "Type" : "layout", "Visible" : true, "Z-index" : 10, "__TypeDisplayName" : "Layout" }, "Widgets" : [ { "Properties" : { "AnimateExpandCollapse" : true, "Area" : "UI", "BGImageRepeat" : "no-repeat", "BGImageSize" : "auto", "DisplayName" : "Row 1", "ExpandCollapseTabLocation" : "outside", "Expanded" : true, "Id" : "container-31", "MinHeight" : 0, "MinWidth" : 0, "Overlay" : false, "OverlayIsTransparent" : false, "ResponsiveLayout" : true, "ShowDataLoading" : true, "ShowExpandCollapseTab" : false, "Style" : "DefaultContainerStyle", "TabCollapseStyle" : "DefaultTabCollapseStyle", "TabExpandStyle" : "DefaultTabExpandStyle", "TabHeight" : 36, "TabLocation" : "center", "TabOffset" : 0, "TabWidth" : 36, "Type" : "container", "Visible" : true, "Z-index" : 10, "__TypeDisplayName" : "Container", "userCannotRemove" : true }, "Widgets" : [ { "Properties" : { "Area" : "UI", "AutoFit" : true, "AutoLayout" : "None", "DisplayName" : "mtpHMIDiagdam", "EdgeStyle" : "None", "Height" : 800, "Id" : "mxdiagram-4", "JSONArrayGraphCells" : "{}", "Left" : 0, "MTPFilePath" : "{}", "ResponsiveLayout" : true, "ShowDataLoading" : true, "ShowOutline" : false, "ShowTools" : true, "Top" : 0, "Type" : "mxdiagram", "ValueDiagram" : { }, "Visible" : true, "Width" : 640, "XMLDiagram" : "{}", "Z-index" : 10, "__TypeDisplayName" : "mxGraph Diagram", "mtpJson" : "{}" }, "Widgets" : [ ] } ] }, { "Properties" : { "AnimateExpandCollapse" : true, "Area" : "UI", "BGImageRepeat" : "no-repeat", "BGImageSize" : "auto", "DisplayName" : "Footer", "ExpandCollapseTabLocation" : "outside", "Expanded" : true, "Id" : "container-33", "MinHeight" : 0, "MinWidth" : 0, "Overlay" : false, "OverlayIsTransparent" : false, "ResponsiveLayout" : true, "ShowDataLoading" : true, "ShowExpandCollapseTab" : false, "Style" : "DefaultContainerStyle", "TabCollapseStyle" : "DefaultTabCollapseStyle", "TabExpandStyle" : "DefaultTabExpandStyle", "TabHeight" : 36, "TabLocation" : "center", "TabOffset" : 0, "TabWidth" : 36, "Type" : "container", "Visible" : true, "Z-index" : 10, "__TypeDisplayName" : "Container", "userCannotRemove" : true }, "Widgets" : [ { "Properties" : { "Area" : "UI", "Columns" : 2, "DisplayName" : "layout-20", "Footer" : false, "FooterHeight" : 0, "Header" : false, "HeaderHeight" : 0, "Id" : "layout-20", "IncludeSpacingInFixedAreas" : false, "IsPrintLayout" : false, "Left" : 25, "LeftSidebar" : false, "LeftSidebarWidth" : 0, "Orientation" : "horizontal", "PctColumn1" : 50, "PctColumn2" : 50, "PctColumn3" : 1, "PctColumn4" : 1, "PctColumn5" : 1, "PctColumn6" : 1, "PctColumn7" : 1, "PctColumn8" : 1, "PctRow1" : 50, "PctRow2" : 50, "PctRow3" : 0, "PctRow4" : 0, "PctRow5" : 0, "PctRow6" : 0, "PctRow7" : 0, "PctRow8" : 0, "PrintMarginLeftRight" : 0.5, "PrintMarginTopBottom" : 0.5, "PrintWidth" : 650, "ResponsiveLayout" : true, "RightSidebar" : false, "RightSidebarWidth" : 0, "Rows" : 2, "ShowDataLoading" : true, "Spacing" : 2, "Top" : 160, "Type" : "layout", "Visible" : true, "Z-index" : 10, "__TypeDisplayName" : "Layout" }, "Widgets" : [ { "Properties" : { "AnimateExpandCollapse" : true, "Area" : "UI", "BGImageRepeat" : "no-repeat", "BGImageSize" : "auto", "DisplayName" : "Row", "ExpandCollapseTabLocation" : "outside", "Expanded" : true, "Id" : "container-21", "MinHeight" : 0, "MinWidth" : 0, "Overlay" : false, "OverlayIsTransparent" : false, "ResponsiveLayout" : true, "ShowDataLoading" : true, "ShowExpandCollapseTab" : false, "Style" : "DefaultContainerStyle", "TabCollapseStyle" : "DefaultTabCollapseStyle", "TabExpandStyle" : "DefaultTabExpandStyle", "TabHeight" : 36, "TabLocation" : "center", "TabOffset" : 0, "TabWidth" : 36, "Type" : "container", "Visible" : true, "Z-index" : 10, "__TypeDisplayName" : "Container", "userCannotRemove" : true }, "Widgets" : [ { "Properties" : { "Area" : "UI", "Columns" : 0, "DisplayName" : "layout-34", "Footer" : false, "FooterHeight" : 0, "Header" : true, "HeaderHeight" : 15, "Id" : "layout-34", "IncludeSpacingInFixedAreas" : false, "IsPrintLayout" : false, "Left" : 185, "LeftSidebar" : false, "LeftSidebarWidth" : 0, "Orientation" : "vertical", "PctColumn1" : 50, "PctColumn2" : 50, "PctColumn3" : 1, "PctColumn4" : 1, "PctColumn5" : 1, "PctColumn6" : 1, "PctColumn7" : 1, "PctColumn8" : 1, "PctRow1" : 100, "PctRow2" : 0, "PctRow3" : 0, "PctRow4" : 0, "PctRow5" : 0, "PctRow6" : 0, "PctRow7" : 0, "PctRow8" : 0, "PrintMarginLeftRight" : 0.5, "PrintMarginTopBottom" : 0.5, "PrintWidth" : 650, "ResponsiveLayout" : true, "RightSidebar" : false, "RightSidebarWidth" : 0, "Rows" : 1, "ShowDataLoading" : true, "Spacing" : 0, "Top" : 25, "Type" : "layout", "Visible" : true, "Z-index" : 10, "__TypeDisplayName" : "Layout" }, "Widgets" : [ { "Properties" : { "AnimateExpandCollapse" : true, "Area" : "UI", "BGImageRepeat" : "no-repeat", "BGImageSize" : "auto", "DisplayName" : "Header", "ExpandCollapseTabLocation" : "outside", "Expanded" : true, "Id" : "container-35", "MinHeight" : 0, "MinWidth" : 0, "Overlay" : false, "OverlayIsTransparent" : false, "ResponsiveLayout" : true, "ShowDataLoading" : true, "ShowExpandCollapseTab" : false, "Style" : "DefaultContainerStyle", "TabCollapseStyle" : "DefaultTabCollapseStyle", "TabExpandStyle" : "DefaultTabExpandStyle", "TabHeight" : 36, "TabLocation" : "center", "TabOffset" : 0, "TabWidth" : 36, "Type" : "container", "Visible" : true, "Z-index" : 10, "__TypeDisplayName" : "Container", "userCannotRemove" : true }, "Widgets" : [ { "Properties" : { "Alignment" : "left", "Area" : "UI", "BackgroundFill" : "content", "DisplayName" : "valuedisplay-37", "Height" : 22, "Id" : "valuedisplay-37", "ImageScaling" : "Width", "Label" : "", "LabelAlignment" : "left", "Left" : 115, "Overflow" : "hidden", "ResponsiveLayout" : true, "ShowDataLoading" : true, "TextIfNoValue" : "MTP Json", "TextIfNoValueOffset" : 0, "TextIfNoValueStyle" : "DefaultValueDisplayNoTextStyle", "TextWrap" : true, "ToolTipField" : "", "ToolTipStyle" : "DefaultTooltipStyle", "Top" : 30, "Type" : "valuedisplay", "UseTheme" : false, "ValueDisplayLabelStyle" : "DefaultWidgetLabelStyle", "ValueDisplayStyle" : "DefaultValueDisplayStyle", "VerticalAlignment" : "middle", "Visible" : true, "Width" : 100, "Z-index" : 10, "__TypeDisplayName" : "Value Display", "__supportsLabel" : true, "__supportsTooltip" : true }, "Widgets" : [ ] } ] }, { "Properties" : { "AnimateExpandCollapse" : true, "Area" : "UI", "BGImageRepeat" : "no-repeat", "BGImageSize" : "auto", "DisplayName" : "Row", "ExpandCollapseTabLocation" : "outside", "Expanded" : true, "Id" : "container-36", "MinHeight" : 0, "MinWidth" : 0, "Overlay" : false, "OverlayIsTransparent" : false, "ResponsiveLayout" : true, "ShowDataLoading" : true, "ShowExpandCollapseTab" : false, "Style" : "DefaultContainerStyle", "TabCollapseStyle" : "DefaultTabCollapseStyle", "TabExpandStyle" : "DefaultTabExpandStyle", "TabHeight" : 36, "TabLocation" : "center", "TabOffset" : 0, "TabWidth" : 36, "Type" : "container", "Visible" : true, "Z-index" : 10, "__TypeDisplayName" : "Container", "userCannotRemove" : true }, "Widgets" : [ { "Properties" : { "Area" : "UI", "DisplayName" : "textarea-16", "Height" : 200, "Id" : "textarea-16", "InnerShadow" : false, "Label" : "", "LabelAlignment" : "left", "Left" : 210, "ReadOnly" : true, "ResponsiveLayout" : true, "ShowDataLoading" : true, "Style" : "DefaultTextAreaStyle", "TabSequence" : 0, "Text" : "", "TextareaFocusStyle" : "DefaultFocusStyle", "TextareaLabelStyle" : "DefaultWidgetLabelStyle", "ToolTipField" : "", "ToolTipStyle" : "DefaultTooltipStyle", "Top" : 0, "Type" : "textarea", "Visible" : true, "Width" : 300, "Z-index" : 10, "__TypeDisplayName" : "TextArea", "__supportsLabel" : true, "__supportsTooltip" : true }, "Widgets" : [ ] } ] } ] } ] }, { "Properties" : { "AnimateExpandCollapse" : true, "Area" : "UI", "BGImageRepeat" : "no-repeat", "BGImageSize" : "auto", "DisplayName" : "Row", "ExpandCollapseTabLocation" : "outside", "Expanded" : true, "Id" : "container-22", "MinHeight" : 0, "MinWidth" : 0, "Overlay" : false, "OverlayIsTransparent" : false, "ResponsiveLayout" : true, "ShowDataLoading" : true, "ShowExpandCollapseTab" : false, "Style" : "DefaultContainerStyle", "TabCollapseStyle" : "DefaultTabCollapseStyle", "TabExpandStyle" : "DefaultTabExpandStyle", "TabHeight" : 36, "TabLocation" : "center", "TabOffset" : 0, "TabWidth" : 36, "Type" : "container", "Visible" : true, "Z-index" : 10, "__TypeDisplayName" : "Container", "userCannotRemove" : true }, "Widgets" : [ { "Properties" : { "Area" : "UI", "Columns" : 0, "DisplayName" : "layout-38", "Footer" : false, "FooterHeight" : 0, "Header" : true, "HeaderHeight" : 20, "Id" : "layout-38", "IncludeSpacingInFixedAreas" : false, "IsPrintLayout" : false, "Left" : 185, "LeftSidebar" : false, "LeftSidebarWidth" : 0, "Orientation" : "vertical", "PctColumn1" : 50, "PctColumn2" : 50, "PctColumn3" : 1, "PctColumn4" : 1, "PctColumn5" : 1, "PctColumn6" : 1, "PctColumn7" : 1, "PctColumn8" : 1, "PctRow1" : 100, "PctRow2" : 0, "PctRow3" : 0, "PctRow4" : 0, "PctRow5" : 0, "PctRow6" : 0, "PctRow7" : 0, "PctRow8" : 0, "PrintMarginLeftRight" : 0.5, "PrintMarginTopBottom" : 0.5, "PrintWidth" : 650, "ResponsiveLayout" : true, "RightSidebar" : false, "RightSidebarWidth" : 0, "Rows" : 1, "ShowDataLoading" : true, "Spacing" : 0, "Top" : 25, "Type" : "layout", "Visible" : true, "Z-index" : 10, "__TypeDisplayName" : "Layout" }, "Widgets" : [ { "Properties" : { "AnimateExpandCollapse" : true, "Area" : "UI", "BGImageRepeat" : "no-repeat", "BGImageSize" : "auto", "DisplayName" : "Header", "ExpandCollapseTabLocation" : "outside", "Expanded" : true, "Id" : "container-39", "MinHeight" : 0, "MinWidth" : 0, "Overlay" : false, "OverlayIsTransparent" : false, "ResponsiveLayout" : true, "ShowDataLoading" : true, "ShowExpandCollapseTab" : false, "Style" : "DefaultContainerStyle", "TabCollapseStyle" : "DefaultTabCollapseStyle", "TabExpandStyle" : "DefaultTabExpandStyle", "TabHeight" : 36, "TabLocation" : "center", "TabOffset" : 0, "TabWidth" : 36, "Type" : "container", "Visible" : true, "Z-index" : 10, "__TypeDisplayName" : "Container", "userCannotRemove" : true }, "Widgets" : [ { "Properties" : { "Area" : "UI", "DisplayName" : "panel-43", "Height" : 200, "HideScrollbars" : false, "HorizontalAnchor" : "left", "Id" : "panel-43", "Left" : 100, "ResponsiveLayout" : true, "ShowDataLoading" : true, "Style" : "DefaultContainerStyle", "Top" : 5, "Type" : "panel", "VerticalAnchor" : "top", "Visible" : true, "Width" : 300, "Z-index" : 10, "__TypeDisplayName" : "Panel" }, "Widgets" : [ { "Properties" : { "Alignment" : "left", "Area" : "UI", "BackgroundFill" : "content", "DisplayName" : "valuedisplay-40", "Height" : 22, "Id" : "valuedisplay-40", "ImageScaling" : "Width", "Label" : "", "LabelAlignment" : "left", "Left" : 10, "Overflow" : "hidden", "ResponsiveLayout" : false, "ShowDataLoading" : true, "TextIfNoValue" : "MxGraph MTP Def", "TextIfNoValueOffset" : 0, "TextIfNoValueStyle" : "DefaultValueDisplayNoTextStyle", "TextWrap" : true, "ToolTipField" : "", "ToolTipStyle" : "DefaultTooltipStyle", "Top" : 0, "Type" : "valuedisplay", "UseTheme" : false, "ValueDisplayLabelStyle" : "DefaultWidgetLabelStyle", "ValueDisplayStyle" : "DefaultValueDisplayStyle", "VerticalAlignment" : "middle", "Visible" : true, "Width" : 130, "Z-index" : 10, "__TypeDisplayName" : "Value Display", "__supportsLabel" : true, "__supportsTooltip" : true }, "Widgets" : [ ] }, { "Properties" : { "ActiveStyle" : "DefaultButtonActiveStyle", "Area" : "UI", "CancelConfirmationButton" : "button2", "ConfirmationButton1Label" : "Yes", "ConfirmationButton2Label" : "No", "ConfirmationPrompt" : "Do Action?", "ConfirmationRequired" : false, "ConfirmationTitle" : "Confirm Action", "ContextId" : "", "DefaultConfirmationButton" : "button1", "Disabled" : false, "DisabledStyle" : "DefaultButtonDisabledStyle", "DisplayName" : "button-28", "FocusStyle" : "DefaultButtonFocusStyle", "Height" : 20, "HoverStyle" : "DefaultButtonHoverStyle", "IconAlignment" : "left", "Id" : "button-28", "Label" : "↓", "Left" : 210, "ResponsiveLayout" : false, "RoundedCorners" : true, "ShowDataLoading" : true, "SingleClickSelectOnTablets" : true, "Style" : "DefaultButtonStyle", "TabSequence" : 0, "ToolTipField" : "", "ToolTipStyle" : "DefaultTooltipStyle", "Top" : 0, "Type" : "button", "Visible" : true, "Width" : 45, "Z-index" : 10, "__TypeDisplayName" : "Button", "__supportsTooltip" : true }, "Widgets" : [ ] }, { "Properties" : { "ActiveStyle" : "DefaultButtonActiveStyle", "Area" : "UI", "CancelConfirmationButton" : "button2", "ConfirmationButton1Label" : "Yes", "ConfirmationButton2Label" : "No", "ConfirmationPrompt" : "Do Action?", "ConfirmationRequired" : false, "ConfirmationTitle" : "Confirm Action", "ContextId" : "", "DefaultConfirmationButton" : "button1", "Disabled" : false, "DisabledStyle" : "DefaultButtonDisabledStyle", "DisplayName" : "button-44", "FocusStyle" : "DefaultButtonFocusStyle", "Height" : 20, "HoverStyle" : "DefaultButtonHoverStyle", "IconAlignment" : "left", "Id" : "button-44", "Label" : "↑", "Left" : 160, "ResponsiveLayout" : false, "RoundedCorners" : true, "ShowDataLoading" : true, "SingleClickSelectOnTablets" : true, "Style" : "DefaultButtonStyle", "TabSequence" : 0, "ToolTipField" : "", "ToolTipStyle" : "DefaultTooltipStyle", "Top" : 0, "Type" : "button", "Visible" : true, "Width" : 45, "Z-index" : 10, "__TypeDisplayName" : "Button", "__supportsTooltip" : true }, "Widgets" : [ ] } ] } ] }, { "Properties" : { "AnimateExpandCollapse" : true, "Area" : "UI", "BGImageRepeat" : "no-repeat", "BGImageSize" : "auto", "DisplayName" : "Row", "ExpandCollapseTabLocation" : "outside", "Expanded" : true, "Id" : "container-41", "MinHeight" : 0, "MinWidth" : 0, "Overlay" : false, "OverlayIsTransparent" : false, "ResponsiveLayout" : true, "ShowDataLoading" : true, "ShowExpandCollapseTab" : false, "Style" : "DefaultContainerStyle", "TabCollapseStyle" : "DefaultTabCollapseStyle", "TabExpandStyle" : "DefaultTabExpandStyle", "TabHeight" : 36, "TabLocation" : "center", "TabOffset" : 0, "TabWidth" : 36, "Type" : "container", "Visible" : true, "Z-index" : 10, "__TypeDisplayName" : "Container", "userCannotRemove" : true }, "Widgets" : [ { "Properties" : { "Area" : "UI", "DisplayName" : "textarea-42", "Height" : 200, "Id" : "textarea-42", "InnerShadow" : false, "Label" : "", "LabelAlignment" : "left", "Left" : 210, "ReadOnly" : false, "ResponsiveLayout" : true, "ShowDataLoading" : true, "Style" : "DefaultTextAreaStyle", "TabSequence" : 0, "Text" : "", "TextareaFocusStyle" : "DefaultFocusStyle", "TextareaLabelStyle" : "DefaultWidgetLabelStyle", "ToolTipField" : "", "ToolTipStyle" : "DefaultTooltipStyle", "Top" : 0, "Type" : "textarea", "Visible" : true, "Width" : 300, "Z-index" : 10, "__TypeDisplayName" : "TextArea", "__supportsLabel" : true, "__supportsTooltip" : true }, "Widgets" : [ ] } ] } ] } ] } ] } ] } ] } ] }, { "Properties" : { "AnimateExpandCollapse" : true, "Area" : "UI", "BGImageRepeat" : "no-repeat", "BGImageSize" : "auto", "DisplayName" : "Column", "ExpandCollapseTabLocation" : "outside", "Expanded" : true, "Id" : "container-26", "MinHeight" : 0, "MinWidth" : 0, "Overlay" : false, "OverlayIsTransparent" : false, "ResponsiveLayout" : true, "ShowDataLoading" : true, "ShowExpandCollapseTab" : false, "Style" : "DefaultContainerStyle", "TabCollapseStyle" : "DefaultTabCollapseStyle", "TabExpandStyle" : "DefaultTabExpandStyle", "TabHeight" : 36, "TabLocation" : "center", "TabOffset" : 0, "TabWidth" : 36, "Type" : "container", "Visible" : true, "Z-index" : 10, "__TypeDisplayName" : "Container", "userCannotRemove" : true }, "Widgets" : [ { "Properties" : { "Area" : "UI", "Columns" : 0, "DisplayName" : "layout-45", "Footer" : false, "FooterHeight" : 0, "Header" : true, "HeaderHeight" : 100, "Id" : "layout-45", "IncludeSpacingInFixedAreas" : false, "IsPrintLayout" : false, "Left" : 345, "LeftSidebar" : false, "LeftSidebarWidth" : 0, "Orientation" : "vertical", "PctColumn1" : 50, "PctColumn2" : 50, "PctColumn3" : 1, "PctColumn4" : 1, "PctColumn5" : 1, "PctColumn6" : 1, "PctColumn7" : 1, "PctColumn8" : 1, "PctRow1" : 100, "PctRow2" : 0, "PctRow3" : 0, "PctRow4" : 0, "PctRow5" : 0, "PctRow6" : 0, "PctRow7" : 0, "PctRow8" : 0, "PrintMarginLeftRight" : 0.5, "PrintMarginTopBottom" : 0.5, "PrintWidth" : 650, "ResponsiveLayout" : true, "RightSidebar" : false, "RightSidebarWidth" : 0, "Rows" : 1, "ShowDataLoading" : true, "Spacing" : 2, "Top" : 205, "Type" : "layout", "Visible" : true, "Z-index" : 10, "__TypeDisplayName" : "Layout" }, "Widgets" : [ { "Properties" : { "AnimateExpandCollapse" : true, "Area" : "UI", "BGImageRepeat" : "no-repeat", "BGImageSize" : "auto", "DisplayName" : "Header", "ExpandCollapseTabLocation" : "outside", "Expanded" : true, "Id" : "container-46", "MinHeight" : 0, "MinWidth" : 0, "Overlay" : false, "OverlayIsTransparent" : false, "ResponsiveLayout" : true, "ShowDataLoading" : true, "ShowExpandCollapseTab" : false, "Style" : "DefaultContainerStyle", "TabCollapseStyle" : "DefaultTabCollapseStyle", "TabExpandStyle" : "DefaultTabExpandStyle", "TabHeight" : 36, "TabLocation" : "center", "TabOffset" : 0, "TabWidth" : 36, "Type" : "container", "Visible" : true, "Z-index" : 10, "__TypeDisplayName" : "Container", "userCannotRemove" : true }, "Widgets" : [ { "Properties" : { "Area" : "UI", "DisplayName" : "panel-49", "Height" : 200, "HideScrollbars" : false, "HorizontalAnchor" : "left", "Id" : "panel-49", "Left" : 20, "ResponsiveLayout" : true, "ShowDataLoading" : true, "Style" : "DefaultPanelStyle", "Top" : 20, "Type" : "panel", "VerticalAnchor" : "top", "Visible" : true, "Width" : 300, "Z-index" : 10, "__TypeDisplayName" : "Panel" }, "Widgets" : [ { "Properties" : { "Area" : "UI", "DisplayName" : "entitypicker-50", "EntityType" : "ThingTemplates", "FocusStyle" : "DefaultFocusStyle", "Height" : 30, "Id" : "entitypicker-50", "IncludeSystemObjects" : true, "Left" : 20, "PlaceholderText" : "Select thing template", "ResponsiveLayout" : false, "SearchIncludesDescriptions" : true, "SearchTerm" : "", "ShowAdvanced" : true, "ShowDataLoading" : true, "TabSequence" : 0, "ThingTemplate" : "RemoteThing", "Top" : 10, "Type" : "entitypicker", "UseMostRecentlyUsed" : true, "Visible" : true, "Width" : 175, "Z-index" : 10, "__TypeDisplayName" : "Entity Picker" }, "Widgets" : [ ] }, { "Properties" : { "Area" : "UI", "DisplayName" : "entitypicker-51", "EntityType" : "Things", "FocusStyle" : "DefaultFocusStyle", "Height" : 30, "Id" : "entitypicker-51", "IncludeSystemObjects" : false, "Left" : 20, "PlaceholderText" : "Select industrial gateway", "ResponsiveLayout" : false, "SearchIncludesDescriptions" : true, "SearchTerm" : "", "ShowAdvanced" : true, "ShowDataLoading" : true, "TabSequence" : 0, "ThingTemplate" : "IndustrialGateway", "Top" : 50, "Type" : "entitypicker", "UseMostRecentlyUsed" : true, "Visible" : true, "Width" : 175, "Z-index" : 10, "__TypeDisplayName" : "Entity Picker" }, "Widgets" : [ ] }, { "Properties" : { "Area" : "UI", "CursorPosition" : 0, "DefaultTextboxFocusStyle" : "DefaultFocusStyle", "DisplayName" : "textbox-52", "Height" : 24, "Id" : "textbox-52", "InnerShadow" : false, "Label" : "", "LabelAlignment" : "left", "Left" : 220, "MaskInputCharacters" : false, "PlaceholderText" : "EntityPrefix", "ReadOnly" : false, "ResponsiveLayout" : false, "ShowDataLoading" : true, "Style" : "DefaultTextBoxStyle", "TabSequence" : 0, "Text" : "", "TextAlign" : "left", "TextboxLabelStyle" : "DefaultWidgetLabelStyle", "ToolTipField" : "", "ToolTipStyle" : "DefaultTooltipStyle", "Top" : 10, "Type" : "textbox", "Visible" : true, "Width" : 200, "Z-index" : 10, "__TypeDisplayName" : "TextBox", "__supportsLabel" : true, "__supportsTooltip" : true }, "Widgets" : [ ] }, { "Properties" : { "Area" : "UI", "DisplayName" : "tagpicker-54", "Height" : 18, "Id" : "tagpicker-54", "Left" : 225, "MultiSelect" : true, "ResponsiveLayout" : false, "ShowDataLoading" : true, "TagType" : "ModelTags", "Top" : 45, "Type" : "tagpicker", "Visible" : true, "VocabularyRestriction" : "", "Width" : 35, "Z-index" : 10, "__TypeDisplayName" : "Tag Picker" }, "Widgets" : [ ] }, { "Properties" : { "ActiveStyle" : "DefaultButtonActiveStyle", "Area" : "UI", "CancelConfirmationButton" : "button2", "ConfirmationButton1Label" : "Yes", "ConfirmationButton2Label" : "No", "ConfirmationPrompt" : "Do Action?", "ConfirmationRequired" : false, "ConfirmationTitle" : "Confirm Action", "ContextId" : "", "DefaultConfirmationButton" : "button1", "Disabled" : false, "DisabledStyle" : "DefaultButtonDisabledStyle", "DisplayName" : "button-55", "FocusStyle" : "DefaultButtonFocusStyle", "Height" : 30, "HoverStyle" : "DefaultButtonHoverStyle", "IconAlignment" : "left", "Id" : "button-55", "Label" : "Create ThingModel", "Left" : 325, "ResponsiveLayout" : false, "RoundedCorners" : true, "ShowDataLoading" : true, "SingleClickSelectOnTablets" : true, "Style" : "DefaultButtonStyle", "TabSequence" : 0, "ToolTipField" : "", "ToolTipStyle" : "DefaultTooltipStyle", "Top" : 45, "Type" : "button", "Visible" : true, "Width" : 90, "Z-index" : 10, "__TypeDisplayName" : "Button", "__supportsTooltip" : true }, "Widgets" : [ ] }, { "Properties" : { "ActiveStyle" : "DefaultButtonActiveStyle", "Area" : "UI", "AutoRefresh" : false, "AutoRefreshTabSequence" : 0, "DisplayName" : "autorefresh-56", "FocusStyle" : "DefaultButtonFocusStyle", "Height" : 28, "HoverStyle" : "DefaultButtonHoverStyle", "IconAlignment" : "right", "Id" : "autorefresh-56", "Label" : "Test Data", "Left" : 440, "RefreshInterval" : 30, "RefreshNowTabSequence" : 0, "RefreshToggleLabel" : "On", "RefreshToggleLabelOff" : "Off", "RefreshToggleSliderStyle" : "DefaultAutoRefreshToggleSliderStyle", "RefreshToggleStyle" : "DefaultAutoRefreshToggleStyle", "RefreshToggleStyleOff" : "DefaultAutoRefreshToggleOffStyle", "ResponsiveLayout" : false, "ShowControls" : true, "ShowDataLoading" : true, "Style" : "DefaultButtonStyle", "Top" : 10, "Type" : "autorefresh", "UseTheme" : false, "Visible" : true, "Width" : 125, "Z-index" : 10, "__TypeDisplayName" : "Auto Refresh" }, "Widgets" : [ ] }, { "Properties" : { "ActiveStyle" : "DefaultButtonActiveStyle", "Area" : "UI", "CancelConfirmationButton" : "button2", "ConfirmationButton1Label" : "Yes", "ConfirmationButton2Label" : "No", "ConfirmationPrompt" : "Do Action?", "ConfirmationRequired" : false, "ConfirmationTitle" : "Confirm Action", "ContextId" : "", "DefaultConfirmationButton" : "button1", "Disabled" : false, "DisabledStyle" : "DefaultButtonDisabledStyle", "DisplayName" : "button-57", "FocusStyle" : "DefaultButtonFocusStyle", "Height" : 30, "HoverStyle" : "DefaultButtonHoverStyle", "IconAlignment" : "left", "Id" : "button-57", "Label" : "Save Definiton", "Left" : 420, "ResponsiveLayout" : false, "RoundedCorners" : true, "ShowDataLoading" : true, "SingleClickSelectOnTablets" : true, "Style" : "DefaultButtonStyle", "TabSequence" : 0, "ToolTipField" : "", "ToolTipStyle" : "DefaultTooltipStyle", "Top" : 45, "Type" : "button", "Visible" : true, "Width" : 90, "Z-index" : 10, "__TypeDisplayName" : "Button", "__supportsTooltip" : true }, "Widgets" : [ ] } ] } ] }, { "Properties" : { "AnimateExpandCollapse" : true, "Area" : "UI", "BGImageRepeat" : "no-repeat", "BGImageSize" : "auto", "DisplayName" : "Row 1", "ExpandCollapseTabLocation" : "outside", "Expanded" : true, "Id" : "container-47", "MinHeight" : 0, "MinWidth" : 0, "Overlay" : false, "OverlayIsTransparent" : false, "ResponsiveLayout" : true, "ShowDataLoading" : true, "ShowExpandCollapseTab" : false, "Style" : "DefaultContainerStyle", "TabCollapseStyle" : "DefaultTabCollapseStyle", "TabExpandStyle" : "DefaultTabExpandStyle", "TabHeight" : 36, "TabLocation" : "center", "TabOffset" : 0, "TabWidth" : 36, "Type" : "container", "Visible" : true, "Z-index" : 10, "__TypeDisplayName" : "Container", "userCannotRemove" : true }, "Widgets" : [ { "Properties" : { "AlignHeader" : false, "Area" : "UI", "AutoSelectFirstRow" : false, "CellTextWrapping" : false, "ColumnFormat" : { "formatInfo" : [ { "Align" : "left", "AllowEdit" : false, "FieldName" : "isSystemObject", "FormatOptions" : { "FormatString" : "checkbox", "renderer" : "BOOLEAN" }, "Title" : "isSystemObject", "ValidationExpression" : "", "ValidationMessage" : "", "Width" : "auto" }, { "Align" : "left", "AllowEdit" : false, "FieldName" : "name", "FormatOptions" : { "FormatString" : "full", "renderer" : "STRING" }, "Title" : "name", "ValidationExpression" : "", "ValidationMessage" : "", "Width" : "auto" }, { "Align" : "left", "AllowEdit" : false, "FieldName" : "description", "FormatOptions" : { "FormatString" : "full", "renderer" : "STRING" }, "Title" : "description", "ValidationExpression" : "", "ValidationMessage" : "", "Width" : "auto" }, { "Align" : "left", "AllowEdit" : false, "FieldName" : "homeMashup", "FormatOptions" : { "FormatString" : "full", "renderer" : "STRING" }, "Title" : "homeMashup", "ValidationExpression" : "", "ValidationMessage" : "", "Width" : "auto" }, { "Align" : "left", "AllowEdit" : false, "FieldName" : "avatar", "FormatOptions" : { "FormatString" : "image", "renderer" : "IMAGELINK" }, "Title" : "avatar", "ValidationExpression" : "", "ValidationMessage" : "", "Width" : "auto" }, { "Align" : "left", "AllowEdit" : false, "FieldName" : "tags", "FormatOptions" : { "FormatString" : "plain", "renderer" : "TAGS" }, "Title" : "tags", "ValidationExpression" : "", "ValidationMessage" : "", "Width" : "auto" } ] }, "CurrentScrollTop" : 0, "DisplayName" : "dhxgrid-48", "FocusStyle" : "DefaultFocusStyle", "GridBackgroundStyle" : "DefaultGridBackgroundStyle", "GridEditableFieldStyle" : "DefaultGridEditableFieldStyle", "GridHeaderStyle" : "DefaultGridHeaderStyle", "GridHeaderTextCase" : "capitalize", "GridInvalidFieldStyle" : "DefaultGridInvalidFieldStyle", "Height" : 200, "Id" : "dhxgrid-48", "IsEditable" : false, "IsPrintLayout" : false, "Left" : 240, "MultiSelect" : false, "ResponsiveLayout" : true, "RowAlternateBackgroundStyle" : "DefaultRowAlternateBackgroundStyle", "RowBackgroundStyle" : "DefaultRowBackgroundStyle", "RowFormat_StateParameters" : [ ], "RowHeight" : 30, "RowHoverStyle" : "DefaultRowHoverStyle", "RowSelectedStyle" : "DefaultRowSelectedStyle", "ScrollTop" : 0, "ShowAllColumns" : false, "ShowDataLoading" : true, "TabSequence" : 0, "Top" : 130, "Type" : "dhxgrid", "Visible" : true, "Width" : 400, "Z-index" : 10, "__TypeDisplayName" : "Grid" }, "Widgets" : [ ] } ] } ] } ] } ] } ] } ] } ] }, "mashupType" : "mashup" }]]></mashupContent>
			<preview/>
			<ConfigurationChanges>
				<ConfigurationChange changeAction="CREATE" changeReason="" timestamp="2019-07-18T11:37:22.253+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="Mashup : design : updated&#10;" timestamp="2019-07-18T17:25:24.999+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="Mashup : design : updated&#10;" timestamp="2019-07-18T17:36:10.317+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="Mashup : design : updated&#10;" timestamp="2019-07-18T17:56:54.866+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="Mashup : design : updated&#10;" timestamp="2019-07-18T17:59:30.887+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="Mashup : design : updated&#10;" timestamp="2019-07-18T18:01:25.107+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="Mashup : design : updated&#10;" timestamp="2019-07-18T18:06:30.163+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="Mashup : design : updated&#10;" timestamp="2019-07-18T18:19:35.747+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="Mashup : design : updated&#10;" timestamp="2019-07-19T12:29:36.252+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="Mashup : design : updated&#10;" timestamp="2019-07-19T12:58:58.584+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="Mashup : design : updated&#10;" timestamp="2019-07-19T12:59:05.822+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="Mashup : design : updated&#10;" timestamp="2019-07-19T13:00:54.764+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="Mashup : design : updated&#10;" timestamp="2019-07-19T13:01:08.433+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="Mashup : design : updated&#10;" timestamp="2019-07-19T14:47:40.693+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="Mashup : design : updated&#10;" timestamp="2019-07-30T14:21:55.254+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="Mashup : design : updated&#10;" timestamp="2019-07-31T12:59:56.815+03:00" user="Administrator"/>
			</ConfigurationChanges>
		</Mashup>
		<Mashup aspect.isResponsive="true" aspect.mashupType="mashup" columns="0.0" description="" documentationContent="" homeMashup="" lastModifiedDate="2019-07-18T11:37:18.294+03:00" name="MtpConfigurationViewer" projectName="MTP" rows="0.0" tags="">
			<Owner name="Administrator" type="User"/>
			<avatar/>
			<DesignTimePermissions>
				<Create/>
				<Read/>
				<Update/>
				<Delete/>
				<Metadata/>
			</DesignTimePermissions>
			<RunTimePermissions/>
			<VisibilityPermissions>
				<Visibility/>
			</VisibilityPermissions>
			<ConfigurationTableDefinitions/>
			<ConfigurationTables/>
			<ParameterDefinitions/>
			<Things>
				<Thing>MtpMxgraphUtilities</Thing>
				<Thing>MtpThingModelOptions</Thing>
			</Things>
			<ThingShapes/>
			<ThingTemplates/>
			<mashupContent><![CDATA[{ "ConfigurationTables" : { }, "CustomMashupCss" : "", "Data" : { "Session" : { "DataName" : "Session", "EntityName" : "", "EntityType" : "Session", "Id" : "session", "Services" : [ { "APIMethod" : "post", "Characteristic" : "Services", "Id" : "SessionInterface", "Name" : "GetGlobalSessionValues", "Parameters" : { }, "RefreshInterval" : 0, "Target" : "GetGlobalSessionValues" } ] }, "Things_MtpMxgraphUtilities" : { "DataName" : "Things_MtpMxgraphUtilities", "EntityName" : "MtpMxgraphUtilities", "EntityType" : "Things", "Id" : "7d91f3db-f8de-4583-b34c-47d8b88219b8", "Services" : [ { "APIMethod" : "get", "Characteristic" : "Services", "Id" : "54289561-5dc6-4f1b-9258-0545d8155f4c", "Name" : "GetProperties", "Parameters" : { }, "RefreshInterval" : 0, "Target" : "GetProperties" } ] }, "Things_MtpThingModelOptions" : { "DataName" : "Things_MtpThingModelOptions", "EntityName" : "MtpThingModelOptions", "EntityType" : "Things", "Id" : "94b0b9b8-44de-4057-a893-093ef11e639b", "Services" : [ { "APIMethod" : "post", "Characteristic" : "Services", "Id" : "c3d288d1-57df-49a2-a971-b1ca65f9b8a7", "Name" : "CollectDataForMtp", "Parameters" : { }, "RefreshInterval" : 0, "Target" : "CollectDataForMtp" }, { "APIMethod" : "get", "Characteristic" : "Services", "Id" : "6410a630-8421-4d4a-9dd0-7af556d9d739", "Name" : "GetProperties", "Parameters" : { }, "RefreshInterval" : 0, "Target" : "GetProperties" } ] }, "UserExtensions" : { "DataName" : "UserExtensions", "EntityName" : "", "EntityType" : "UserExtensions", "Id" : "UserExtensions", "Services" : [ { "APIMethod" : "post", "Characteristic" : "Services", "Id" : "UserExtensionInterface", "Name" : "GetCurrentUserExtensionProperties", "Parameters" : { }, "RefreshInterval" : 0, "Target" : "GetCurrentUserExtensionProperties" } ] } }, "DataBindings" : [ { "Id" : "5be47f2c-bff0-4cdd-8dce-0101d8bcf9fa", "PropertyMaps" : [ { "SourceProperty" : "", "SourcePropertyBaseType" : "INFOTABLE", "SourcePropertyType" : "InfoTable", "TargetProperty" : "mtpData", "TargetPropertyBaseType" : "INFOTABLE", "TargetPropertyType" : "property" } ], "SourceArea" : "Data", "SourceDetails" : "AllData", "SourceId" : "CollectDataForMtp", "SourceSection" : "Things_MtpThingModelOptions", "TargetArea" : "UI", "TargetId" : "BMTypescriptHost-7", "TargetSection" : "" }, { "Id" : "78192391-b907-4a32-b9e4-0ae7724c6935", "PropertyMaps" : [ { "SourceProperty" : "MtpSavedModules", "SourcePropertyBaseType" : "INFOTABLE", "SourcePropertyType" : "Property", "TargetProperty" : "Data", "TargetPropertyBaseType" : "INFOTABLE", "TargetPropertyType" : "property" } ], "SourceArea" : "Data", "SourceDetails" : "AllData", "SourceId" : "GetProperties", "SourceSection" : "Things_MtpThingModelOptions", "TargetArea" : "UI", "TargetId" : "dhxlist-25", "TargetSection" : "" }, { "Id" : "0eba3c03-bb9a-45ad-b95b-3b14872e4594", "PropertyMaps" : [ { "SourceProperty" : "MtpSavedModules[SelectedRows].graph", "SourcePropertyBaseType" : "STRING", "SourcePropertyType" : "Property", "TargetProperty" : "XMLDiagram", "TargetPropertyBaseType" : "TEXT", "TargetPropertyType" : "property" } ], "SourceArea" : "Data", "SourceDetails" : "AllData", "SourceId" : "GetProperties", "SourceSection" : "Things_MtpThingModelOptions", "TargetArea" : "UI", "TargetId" : "mxdiagram-4", "TargetSection" : "" }, { "Id" : "cb8e1622-16f4-4e1b-8793-094becb11af7", "PropertyMaps" : [ { "SourceProperty" : "MtpSavedModules[SelectedRows].mtpJson", "SourcePropertyBaseType" : "STRING", "SourcePropertyType" : "Property", "TargetProperty" : "Text", "TargetPropertyBaseType" : "STRING", "TargetPropertyType" : "property" } ], "SourceArea" : "Data", "SourceDetails" : "AllData", "SourceId" : "GetProperties", "SourceSection" : "Things_MtpThingModelOptions", "TargetArea" : "UI", "TargetId" : "textarea-16", "TargetSection" : "" }, { "Id" : "7dea7690-e755-4792-8bc0-e0b3a8b1fe10", "PropertyMaps" : [ { "SourceProperty" : "MtpSavedModules[SelectedRows].prefix", "SourcePropertyBaseType" : "STRING", "TargetProperty" : "prefix", "TargetPropertyBaseType" : "STRING", "TargetPropertyType" : "Parameter" } ], "SourceArea" : "Data", "SourceDetails" : "AllData", "SourceId" : "GetProperties", "SourceSection" : "Things_MtpThingModelOptions", "TargetArea" : "Data", "TargetId" : "CollectDataForMtp", "TargetSection" : "Things_MtpThingModelOptions" }, { "Id" : "2e2f2490-f50e-4799-abfe-27a71f4bfdcf", "PropertyMaps" : [ { "SourceProperty" : "MtpSavedModules[SelectedRows].mtpJson", "SourcePropertyBaseType" : "STRING", "TargetProperty" : "jsonMtp", "TargetPropertyBaseType" : "STRING", "TargetPropertyType" : "Parameter" } ], "SourceArea" : "Data", "SourceDetails" : "AllData", "SourceId" : "GetProperties", "SourceSection" : "Things_MtpThingModelOptions", "TargetArea" : "Data", "TargetId" : "CollectDataForMtp", "TargetSection" : "Things_MtpThingModelOptions" } ], "DesignTimePermissions" : { "Create" : [ ], "Delete" : [ ], "Metadata" : [ ], "Read" : [ ], "Update" : [ ] }, "Events" : [ { "EventHandlerArea" : "UI", "EventHandlerId" : "BMTypescriptHost-7", "EventHandlerService" : "mashupDidFinishLoading", "EventTriggerArea" : "Mashup", "EventTriggerEvent" : "Loaded", "EventTriggerId" : "mashup-root", "EventTriggerSection" : "", "Id" : "d23a1753-706e-4b70-9737-c3d90eecae4a" }, { "EventHandlerArea" : "UI", "EventHandlerId" : "BMCodeHost-11", "EventHandlerService" : "execute", "EventTriggerArea" : "UI", "EventTriggerEvent" : "loadSymbols", "EventTriggerId" : "BMTypescriptHost-7", "EventTriggerSection" : "", "Id" : "2bdaf292-ece2-47a0-82e2-3a2b1c923042" }, { "EventHandlerArea" : "Data", "EventHandlerId" : "Things_MtpMxgraphUtilities", "EventHandlerService" : "GetProperties", "EventTriggerArea" : "Mashup", "EventTriggerEvent" : "Loaded", "EventTriggerId" : "mashup-root", "EventTriggerSection" : "", "Id" : "39816aea-76d7-4e8f-aefb-e77a9db915fc" }, { "EventHandlerArea" : "UI", "EventHandlerId" : "mxdiagram-4", "EventHandlerService" : "GenerateXML", "EventTriggerArea" : "UI", "EventTriggerEvent" : "Clicked", "EventTriggerId" : "button-28", "EventTriggerSection" : "", "Id" : "13d5c3b4-2a1f-4da2-8672-86d98e25c4d6" }, { "EventHandlerArea" : "UI", "EventHandlerId" : "BMTypescriptHost-7", "EventHandlerService" : "updateMtpMxGraph", "EventTriggerArea" : "UI", "EventTriggerEvent" : "Clicked", "EventTriggerId" : "button-44", "EventTriggerSection" : "", "Id" : "a34ae58f-8fe7-46fe-b1a4-cc9485855c1b" }, { "EventHandlerArea" : "Data", "EventHandlerId" : "Things_MtpThingModelOptions", "EventHandlerService" : "CollectDataForMtp", "EventTriggerArea" : "UI", "EventTriggerEvent" : "Refresh", "EventTriggerId" : "autorefresh-56", "EventTriggerSection" : "", "Id" : "59a0b41f-a46c-4f65-be88-ac84db6f2a58" }, { "EventHandlerArea" : "Data", "EventHandlerId" : "Things_MtpThingModelOptions", "EventHandlerService" : "GetProperties", "EventTriggerArea" : "Mashup", "EventTriggerEvent" : "Loaded", "EventTriggerId" : "mashup-root", "EventTriggerSection" : "", "Id" : "3e144b62-bdbe-408e-ae97-cf180ed7597b" }, { "EventHandlerArea" : "UI", "EventHandlerId" : "BMTypescriptHost-7", "EventHandlerService" : "loadFile", "EventTriggerArea" : "Data", "EventTriggerEvent" : "MtpSavedModules.SelectedRowsChanged", "EventTriggerId" : "GetProperties", "EventTriggerSection" : "Things_MtpThingModelOptions", "Id" : "2131b099-bfdb-4fa8-ad24-5d0c16f8bc86" } ], "RunTimePermissions" : { "permissions" : [ ] }, "UI" : { "Properties" : { "AddToDashboardButtonStyle" : "DefaultAddToDashboardButtonStyle", "Area" : "Mashup", "BGImageRepeat" : "no-repeat", "BGImageSize" : "auto", "Columns" : 0, "ConfigureGadgetButtonStyle" : "DefaultConfigureGadgetButtonStyle", "DisplayName" : "Mashup", "EnableParameterEditing" : false, "Height" : 618, "Id" : "mashup-root", "IgnoreWarningsInViewMashup" : false, "IsPrintLayout" : false, "Left" : 0, "MashupToEditGadget" : "DefaultMashupToEditGadget", "MinHeight" : 0, "MinWidth" : 0, "ResponsiveLayout" : true, "Rows" : 0, "ShowDataLoading" : true, "Style" : "DefaultMashupStyle", "Title" : "", "TitleBar" : false, "TitleBarStyle" : "DefaultTitleBarStyle", "TitleBarText" : "Gadget Title Here", "Top" : 0, "Type" : "mashup", "Visible" : true, "Width" : 1024, "Z-index" : 10, "__TypeDisplayName" : "Mashup", "id_index" : 57, "supportsAutoResize" : true }, "Widgets" : [ { "Properties" : { "Area" : "UI", "Columns" : 0, "DisplayName" : "layout-1", "Footer" : false, "FooterHeight" : 0, "Header" : true, "HeaderHeight" : 100, "Id" : "layout-1", "IncludeSpacingInFixedAreas" : false, "IsPrintLayout" : false, "Left" : 500, "LeftSidebar" : false, "LeftSidebarWidth" : 0, "Orientation" : "vertical", "PctColumn1" : 50, "PctColumn2" : 50, "PctColumn3" : 1, "PctColumn4" : 1, "PctColumn5" : 1, "PctColumn6" : 1, "PctColumn7" : 1, "PctColumn8" : 1, "PctRow1" : 100, "PctRow2" : 0, "PctRow3" : 0, "PctRow4" : 0, "PctRow5" : 0, "PctRow6" : 0, "PctRow7" : 0, "PctRow8" : 0, "PrintMarginLeftRight" : 0.5, "PrintMarginTopBottom" : 0.5, "PrintWidth" : 650, "ResponsiveLayout" : true, "RightSidebar" : false, "RightSidebarWidth" : 0, "Rows" : 1, "ShowDataLoading" : true, "Spacing" : 2, "Top" : 160, "Type" : "layout", "Visible" : true, "Z-index" : 10, "__TypeDisplayName" : "Layout" }, "Widgets" : [ { "Properties" : { "AnimateExpandCollapse" : true, "Area" : "UI", "BGImageRepeat" : "no-repeat", "BGImageSize" : "auto", "DisplayName" : "Header", "ExpandCollapseTabLocation" : "outside", "Expanded" : true, "Id" : "container-2", "MinHeight" : 0, "MinWidth" : 0, "Overlay" : true, "OverlayIsTransparent" : true, "ResponsiveLayout" : true, "ShowDataLoading" : true, "ShowExpandCollapseTab" : false, "Style" : "DefaultContainerStyle", "TabCollapseStyle" : "DefaultTabCollapseStyle", "TabExpandStyle" : "DefaultTabExpandStyle", "TabHeight" : 36, "TabLocation" : "center", "TabOffset" : 0, "TabWidth" : 36, "Type" : "container", "Visible" : true, "Z-index" : 10, "__TypeDisplayName" : "Container" }, "Widgets" : [ { "Properties" : { "Area" : "UI", "DisplayName" : "panel-6", "Height" : 200, "HideScrollbars" : false, "HorizontalAnchor" : "left", "Id" : "panel-6", "Left" : 185, "ResponsiveLayout" : true, "ShowDataLoading" : true, "Style" : "DefaultContainerStyle", "Top" : 75, "Type" : "panel", "VerticalAnchor" : "top", "Visible" : true, "Width" : 300, "Z-index" : 10, "__TypeDisplayName" : "Panel" }, "Widgets" : [ { "Properties" : { "Area" : "UI", "Code" : "//#import mptFileParser from MTPViewerV2\n//#import mtpJsonDef from MTPViewerV2\n//#import mtpJsonToMxGraph from MTPViewerV2\n\n\n// exectutes when the mashup finishes loading\nlet diagramWdg: any;\nlet diagramRenderer: MtpJsonToMxGraph;\nlet eClassShapeMap: any = {};\nlet graph: any;\nself.mashupDidFinishLoading = function () {\n    // get a reference to the mx diagram widget based on its display name\n    diagramWdg = $w('mtpHMIDiagdam') as any;\n    diagramWdg.graphChanged = (newGraph: any) => {\n        diagramRenderer.initGraph(newGraph);\n        newGraph.refresh();\n        newGraph.getView().revalidate();\n        graph = newGraph;\n    }\n}\n\ndeclare interface Window {\n    [key: string]: any;\n}\n\nself.loadFile = async () => {\n    if (!diagramRenderer) {\n        // add all of mxgraph to window\n        for (const key in diagramWdg.mxGraphNamespace.mxgraph) {\n            if (diagramWdg.mxGraphNamespace.mxgraph.hasOwnProperty(key)) {\n                window[key] = diagramWdg.mxGraphNamespace.mxgraph[key]\n            }\n            self.dispatchEvent('loadSymbols');\n        }\n        diagramRenderer = new MtpJsonToMxGraph(diagramWdg.mxGraphNamespace.mxgraph, diagramWdg.jqElement[0], eClassShapeMap);\n\n    }\n}\n\nself.mtpDataDidUpdateToValue = (value: INFOTABLE) => {\n    if (!graph) {\n        return;\n    }\n    for (const row of value.rows) {\n        let cell = graph.getModel().getCell(row.elementId);\n        if (cell && cell.hasAttribute(\"label\")) {\n            cell.setAttribute(\"value\", isNaN(row.value) ? row.value : parseFloat(row.value).toFixed(2));\n            graph.getModel().setValue(cell, cell.value);\n        }\n    }\n}\n", "ColumnPosition" : 1, "DirectLinkUUID" : "", "DisplayName" : "BMTypescriptHost-7", "Exports" : "interface mtpFileController extends TWRuntimeWidget {mtpData: INFOTABLE; \n\t    \t/**\n\t    \t * Invoked whenever the mtpData property is about to be updated to a new value as a result of a binding.\n\t    \t * Scripts can override this method to respond the incoming change and accept or reject the new value.\n\t    \t * The default implementation does nothing and accepts all new values.\n\t    \t * @param value - The property's new value.\n\t    \t * @param args - An object containing additional arguments including the previous value (args.fromValue).\n\t    \t * @return - True if the new value should be accepted, false otherwise.\n\t    \t */\n\t\t\tmtpDataShouldUpdateToValue(value: any, args: SelfShouldUpdateToValueArgs): boolean; \n\t    \t/**\n\t    \t * Invoked after the mtpData property has been updated as a result of a binding.\n\t    \t * This method is only invoked if the corresponding ..ShouldUpdateToValue method has returned true.\n\t    \t * Scripts can override this method to respond to property updates.\n\t    \t * The default implementation does nothing.\n\t    \t * @param value - The property's new value.\n\t    \t * @param args - An object containing additional arguments including the previous value (args.fromValue).\n\t    \t */\n\t\t\tmtpDataDidUpdateToValue(value: any, args: SelfShouldUpdateToValueArgs); \nmashupDidFinishLoading(); loadFile(); \t    \t/**\t    \t * Should be invoked to dispatch an event to the Thingworx runtime, causing all actions bound to that event to execute.\n\t    \t * @param event - The name of the event to dispatch.\n\t    \t */\n\t\t\tdispatchEvent(event: string): void;\n\t    \t/**\n\t    \t * Invoked after any property has been updated as a result of a binding.\n\t    \t * This method will be invoked after the specific ..DidUpdateToValue method is invoked.\n\t    \t * Scripts can override this method to react to all property updates.\n\t    \t * @param event - The name of the event to dispatch.\n\t    \t */\n\t\t\tpropertyDidUpdateToValue(property: string, value: any | undefined): void;\n\t    \t/**\n\t    \t * Finds and returns the widget with the given name in the current mashup.\n\t    \t * @param name - The DisplayName of the widget to find.\n\t    \t * @return - The widget object if it was found, undefined otherwise.\n\t    \t */\n\t\t\twidgetNamed(name: string): TWRuntimeWidget | undefined;\n\t    \t/**\n\t    \t * Sends a property update to the given widget as if it came from a binding.\n\t    \t * Supported properties may be updated this way even if they are not bound to anything in the composer.\n\t    \t * @param widget - The widget object whose property should be updated.\n\t    \t * @param args - An object containing additional arguments. This object must have the following properties:\n\t    \t *\t\t\t\t\tforProperty {String} - The name of the property to update.\n\t    \t *\t\t\t\t\tvalue {AnyObject} - The value to which that property should update.\n\t    \t */\n\t\t\tdispatchPropertyUpdateToWidget(widget: any, args: SelfDispatchPropertyUpdateToWidgetArgs): void;\n\t    \t/**\n\t    \t * May be overriden by scripts that create an UI. This method receives the script's container as its parameter.\n\t    \t * It is the script's responsibility to add their content to the supplied container.\n\t    \t * @param container - The container in which the UI elements should be added.\n\t    \t */\n\t\t\trenderWithContainer(container: $): void;\n\t\t}\n", "FullScreen" : false, "Height" : 46, "Id" : "BMTypescriptHost-7", "Left" : 30, "ResponsiveLayout" : false, "RuntimeProperties" : "[{\"name\":\"mtpData\",\"dataType\":\"INFOTABLE\",\"type\":\"property\"},{\"name\":\"mashupDidFinishLoading\",\"dataType\":\"STRING\",\"type\":\"service\"},{\"name\":\"loadFile\",\"dataType\":\"STRING\",\"type\":\"service\"},{\"name\":\"loadSymbols\",\"dataType\":\"STRING\",\"type\":\"event\"}]", "Scope" : "local", "ScrollPosition" : 4, "ShowDataLoading" : true, "Title" : "mtpFileController", "Top" : 20, "TranspiledCode" : "\"use strict\";\r\n//#import mptFileParser from MTPViewerV2\r\n//#import mtpJsonDef from MTPViewerV2\r\n//#import mtpJsonToMxGraph from MTPViewerV2\r\n// exectutes when the mashup finishes loading\r\nlet diagramWdg;\r\nlet diagramRenderer;\r\nlet eClassShapeMap = {};\r\nlet graph;\r\nself.mashupDidFinishLoading = function () {\r\n    // get a reference to the mx diagram widget based on its display name\r\n    diagramWdg = $w('mtpHMIDiagdam');\r\n    diagramWdg.graphChanged = (newGraph) => {\r\n        diagramRenderer.initGraph(newGraph);\r\n        newGraph.refresh();\r\n        newGraph.getView().revalidate();\r\n        graph = newGraph;\r\n    };\r\n};\r\nself.loadFile = async () => {\r\n    if (!diagramRenderer) {\r\n        // add all of mxgraph to window\r\n        for (const key in diagramWdg.mxGraphNamespace.mxgraph) {\r\n            if (diagramWdg.mxGraphNamespace.mxgraph.hasOwnProperty(key)) {\r\n                window[key] = diagramWdg.mxGraphNamespace.mxgraph[key];\r\n            }\r\n            self.dispatchEvent('loadSymbols');\r\n        }\r\n        diagramRenderer = new MtpJsonToMxGraph(diagramWdg.mxGraphNamespace.mxgraph, diagramWdg.jqElement[0], eClassShapeMap);\r\n    }\r\n};\r\nself.mtpDataDidUpdateToValue = (value) => {\r\n    if (!graph) {\r\n        return;\r\n    }\r\n    for (const row of value.rows) {\r\n        let cell = graph.getModel().getCell(row.elementId);\r\n        if (cell && cell.hasAttribute(\"label\")) {\r\n            cell.setAttribute(\"value\", isNaN(row.value) ? row.value : parseFloat(row.value).toFixed(2));\r\n            graph.getModel().setValue(cell, cell.value);\r\n        }\r\n    }\r\n};\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyI0OSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsd0NBQXdDO0FBQ3hDLHFDQUFxQztBQUNyQywyQ0FBMkM7QUFHM0MsNkNBQTZDO0FBQzdDLElBQUksVUFBZSxDQUFDO0FBQ3BCLElBQUksZUFBaUMsQ0FBQztBQUN0QyxJQUFJLGNBQWMsR0FBUSxFQUFFLENBQUM7QUFDN0IsSUFBSSxLQUFVLENBQUM7QUFDZixJQUFJLENBQUMsc0JBQXNCLEdBQUc7SUFDMUIscUVBQXFFO0lBQ3JFLFVBQVUsR0FBRyxFQUFFLENBQUMsZUFBZSxDQUFRLENBQUM7SUFDeEMsVUFBVSxDQUFDLFlBQVksR0FBRyxDQUFDLFFBQWEsRUFBRSxFQUFFO1FBQ3hDLGVBQWUsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDcEMsUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ25CLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUNoQyxLQUFLLEdBQUcsUUFBUSxDQUFDO0lBQ3JCLENBQUMsQ0FBQTtBQUNMLENBQUMsQ0FBQTtBQU1ELElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxJQUFJLEVBQUU7SUFDdkIsSUFBSSxDQUFDLGVBQWUsRUFBRTtRQUNsQiwrQkFBK0I7UUFDL0IsS0FBSyxNQUFNLEdBQUcsSUFBSSxVQUFVLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFO1lBQ25ELElBQUksVUFBVSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQ3pELE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxVQUFVLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFBO2FBQ3pEO1lBQ0QsSUFBSSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsQ0FBQztTQUNyQztRQUNELGVBQWUsR0FBRyxJQUFJLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxjQUFjLENBQUMsQ0FBQztLQUV4SDtBQUNMLENBQUMsQ0FBQTtBQUVELElBQUksQ0FBQyx1QkFBdUIsR0FBRyxDQUFDLEtBQWdCLEVBQUUsRUFBRTtJQUNoRCxJQUFJLENBQUMsS0FBSyxFQUFFO1FBQ1IsT0FBTztLQUNWO0lBQ0QsS0FBSyxNQUFNLEdBQUcsSUFBSSxLQUFLLENBQUMsSUFBSSxFQUFFO1FBQzFCLElBQUksSUFBSSxHQUFHLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ25ELElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDcEMsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM1RixLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDL0M7S0FDSjtBQUNMLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vI2ltcG9ydCBtcHRGaWxlUGFyc2VyIGZyb20gTVRQVmlld2VyVjJcbi8vI2ltcG9ydCBtdHBKc29uRGVmIGZyb20gTVRQVmlld2VyVjJcbi8vI2ltcG9ydCBtdHBKc29uVG9NeEdyYXBoIGZyb20gTVRQVmlld2VyVjJcblxuXG4vLyBleGVjdHV0ZXMgd2hlbiB0aGUgbWFzaHVwIGZpbmlzaGVzIGxvYWRpbmdcbmxldCBkaWFncmFtV2RnOiBhbnk7XG5sZXQgZGlhZ3JhbVJlbmRlcmVyOiBNdHBKc29uVG9NeEdyYXBoO1xubGV0IGVDbGFzc1NoYXBlTWFwOiBhbnkgPSB7fTtcbmxldCBncmFwaDogYW55O1xuc2VsZi5tYXNodXBEaWRGaW5pc2hMb2FkaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIGdldCBhIHJlZmVyZW5jZSB0byB0aGUgbXggZGlhZ3JhbSB3aWRnZXQgYmFzZWQgb24gaXRzIGRpc3BsYXkgbmFtZVxuICAgIGRpYWdyYW1XZGcgPSAkdygnbXRwSE1JRGlhZ2RhbScpIGFzIGFueTtcbiAgICBkaWFncmFtV2RnLmdyYXBoQ2hhbmdlZCA9IChuZXdHcmFwaDogYW55KSA9PiB7XG4gICAgICAgIGRpYWdyYW1SZW5kZXJlci5pbml0R3JhcGgobmV3R3JhcGgpO1xuICAgICAgICBuZXdHcmFwaC5yZWZyZXNoKCk7XG4gICAgICAgIG5ld0dyYXBoLmdldFZpZXcoKS5yZXZhbGlkYXRlKCk7XG4gICAgICAgIGdyYXBoID0gbmV3R3JhcGg7XG4gICAgfVxufVxuXG5kZWNsYXJlIGludGVyZmFjZSBXaW5kb3cge1xuICAgIFtrZXk6IHN0cmluZ106IGFueTtcbn1cblxuc2VsZi5sb2FkRmlsZSA9IGFzeW5jICgpID0+IHtcbiAgICBpZiAoIWRpYWdyYW1SZW5kZXJlcikge1xuICAgICAgICAvLyBhZGQgYWxsIG9mIG14Z3JhcGggdG8gd2luZG93XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIGRpYWdyYW1XZGcubXhHcmFwaE5hbWVzcGFjZS5teGdyYXBoKSB7XG4gICAgICAgICAgICBpZiAoZGlhZ3JhbVdkZy5teEdyYXBoTmFtZXNwYWNlLm14Z3JhcGguaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICAgIHdpbmRvd1trZXldID0gZGlhZ3JhbVdkZy5teEdyYXBoTmFtZXNwYWNlLm14Z3JhcGhba2V5XVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VsZi5kaXNwYXRjaEV2ZW50KCdsb2FkU3ltYm9scycpO1xuICAgICAgICB9XG4gICAgICAgIGRpYWdyYW1SZW5kZXJlciA9IG5ldyBNdHBKc29uVG9NeEdyYXBoKGRpYWdyYW1XZGcubXhHcmFwaE5hbWVzcGFjZS5teGdyYXBoLCBkaWFncmFtV2RnLmpxRWxlbWVudFswXSwgZUNsYXNzU2hhcGVNYXApO1xuXG4gICAgfVxufVxuXG5zZWxmLm10cERhdGFEaWRVcGRhdGVUb1ZhbHVlID0gKHZhbHVlOiBJTkZPVEFCTEUpID0+IHtcbiAgICBpZiAoIWdyYXBoKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZm9yIChjb25zdCByb3cgb2YgdmFsdWUucm93cykge1xuICAgICAgICBsZXQgY2VsbCA9IGdyYXBoLmdldE1vZGVsKCkuZ2V0Q2VsbChyb3cuZWxlbWVudElkKTtcbiAgICAgICAgaWYgKGNlbGwgJiYgY2VsbC5oYXNBdHRyaWJ1dGUoXCJsYWJlbFwiKSkge1xuICAgICAgICAgICAgY2VsbC5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLCBpc05hTihyb3cudmFsdWUpID8gcm93LnZhbHVlIDogcGFyc2VGbG9hdChyb3cudmFsdWUpLnRvRml4ZWQoMikpO1xuICAgICAgICAgICAgZ3JhcGguZ2V0TW9kZWwoKS5zZXRWYWx1ZShjZWxsLCBjZWxsLnZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==", "Type" : "BMTypescriptHost", "Visible" : true, "Width" : 164, "Z-index" : 10, "__TypeDisplayName" : "TypeScript Object" }, "Widgets" : [ ] }, { "Properties" : { "Area" : "UI", "Code" : "\n\n/**\n * $Id: mxPidValves.js,v 1.5 2013/10/22 12:55:55 mate Exp $\n * Copyright (c) 2006-2013, JGraph Ltd\n */\nself.execute = function () {\n    //**********************************************************************************************************************************************************\n    //Valve\n    //**********************************************************************************************************************************************************\n    /**\n     * Extends mxShape.\n     */\n    function mxShapePidValve(bounds, fill, stroke, strokewidth) {\n        mxShape.call(this);\n        this.bounds = bounds;\n        this.fill = fill;\n        this.stroke = stroke;\n        this.strokewidth = (strokewidth != null) ? strokewidth : 1;\n    };\n\n    /**\n     * Extends mxShape.\n     */\n    mxUtils.extend(mxShapePidValve, mxShape);\n\n    mxShapePidValve.prototype.cst = {\n        SHAPE_VALVE: 'mxgraph.pid2valves.valve',\n        //states\n        DEFAULT_STATE: 'defState',\n        CLOSED: 'closed',\n        OPEN: 'open',\n        //actuators\n        ACTUATOR: 'actuator',\n        MANUAL: 'man',\n        DIAPHRAGM: 'diaph',\n        BALANCED_DIAPHRAGM: 'balDiaph',\n        MOTOR: 'motor',\n        NONE: 'none',\n        SPRING: 'spring',\n        PILOT: 'pilot',\n        POWERED: 'powered',\n        SOLENOID: 'solenoid',\n        SOLENOID_MANUAL_RESET: 'solenoidManRes',\n        SINGLE_ACTING: 'singActing',\n        DOUBLE_ACTING: 'dblActing',\n        PILOT_CYLINDER: 'pilotCyl',\n        DIGITAL: 'digital',\n        WEIGHT: 'weight',\n        KEY: 'key',\n        ELECTRO_HYDRAULIC: 'elHyd',\n        //types\n        VALVE_TYPE: 'valveType',\n        BUTTERFLY: 'butterfly',\n        CHECK: 'check',\n        GATE: 'gate',\n        GLOBE: 'globe',\n        NEEDLE: 'needle',\n        PLUG: 'plug',\n        SELF_DRAINING: 'selfDrain',\n        ANGLE: 'angle',\n        ANGLE_GLOBE: 'angleGlobe',\n        THREE_WAY: 'threeWay',\n        ANGLE_BLOWDOWN: 'angBlow',\n        BALL: 'ball'\n    };\n\n    /**\n     * Function: paintVertexShape\n     * \n     * Paints the vertex shape.\n     */\n    mxShapePidValve.prototype.paintVertexShape = function (c, x, y, w, h) {\n        var valveType = mxUtils.getValue(this.style, mxShapePidValve.prototype.cst.VALVE_TYPE, 'gate');\n        var actuator = mxUtils.getValue(this.style, mxShapePidValve.prototype.cst.ACTUATOR, mxShapePidValve.prototype.cst.NONE);\n        var actH = 0;\n\n        if (actuator !== 'none') {\n            if (this.isAngleVariant(valveType)) {\n                actH = h * 0.3333;\n            }\n            else {\n                actH = h * 0.4;\n            }\n        }\n\n        c.translate(x, y);\n        c.setLineJoin('round');\n\n        this.background(c, x, y, w, h, valveType, actuator, actH);\n        c.setShadow(false);\n        this.foreground(c, x, y, w, h, valveType, actuator, actH);\n    };\n\n    mxShapePidValve.prototype.background = function (c, x, y, w, h, valveType, actuator, actH) {\n        //draw the actuator\n        if (actuator !== mxShapePidValve.prototype.cst.NONE) {\n            if (this.isAngleVariant(valveType)) {\n                this.drawActuatorBg(c, x, y, w, h / 1.2, actuator, actH);\n            }\n            else {\n                this.drawActuatorBg(c, x, y, w, h, actuator, actH);\n            }\n        }\n\n        //draw the valve body\n        if (this.isGateVariant(valveType)) {\n            this.drawGateVariantBg(c, 0, 0, w, h, valveType, actuator, actH);\n        }\n        else if (this.isAngleVariant(valveType)) {\n            this.drawAngleVariantBg(c, 0, 0, w, h, valveType, actuator, actH);\n        }\n        else if (valveType === mxShapePidValve.prototype.cst.BUTTERFLY) {\n            this.drawButterflyValve(c, 0, 0, w, h, actuator, actH);\n        }\n        else if (valveType === mxShapePidValve.prototype.cst.CHECK) {\n            this.drawCheckValve(c, 0, 0, w, h, actuator, actH);\n        }\n    };\n\n    mxShapePidValve.prototype.foreground = function (c, x, y, w, h, valveType, actuator, actH) {\n        var valveType = mxUtils.getValue(this.style, mxShapePidValve.prototype.cst.VALVE_TYPE, 'gate');\n\n        //draw the actuator\n        if (actuator !== mxShapePidValve.prototype.cst.NONE) {\n            if (this.isAngleVariant(valveType)) {\n                this.drawActuatorFg(c, x, y, w, h / 1.2, actuator, actH);\n            }\n            else {\n                this.drawActuatorFg(c, x, y, w, h, actuator, actH);\n            }\n        }\n\n        if (this.isGateVariant(valveType)) {\n            this.drawGateVariantFg(c, 0, 0, w, h, valveType, actuator, actH);\n        }\n        if (this.isAngleVariant(valveType)) {\n            this.drawAngleVariantFg(c, 0, 0, w, h, valveType, actuator, actH);\n        }\n    };\n\n    mxShapePidValve.prototype.drawActuatorBg = function (c, x, y, w, h, actuator) {\n        if (this.isSquareVariant(actuator)) {\n            c.translate(w * 0.325, 0);\n            this.drawSquareAct(c, w * 0.35, h * 0.7, actuator);\n            c.translate(- w * 0.325, 0);\n        }\n        else if (actuator === mxShapePidValve.prototype.cst.MANUAL) {\n            c.translate(w * 0.25, h * 0.15);\n            this.drawManAct(c, w * 0.5, h * 0.55);\n            c.translate(- w * 0.25, - h * 0.15);\n        }\n        else if (actuator === mxShapePidValve.prototype.cst.DIAPHRAGM) {\n            c.translate(w * 0.25, h * 0.1);\n            this.drawDiaphAct(c, w * 0.5, h * 0.6);\n            c.translate(- w * 0.25, - h * 0.1);\n        }\n        else if (actuator === mxShapePidValve.prototype.cst.BALANCED_DIAPHRAGM) {\n            c.translate(w * 0.25, h * 0.1);\n            this.drawBalDiaphActBg(c, w * 0.5, h * 0.6);\n            c.translate(- w * 0.25, - h * 0.1);\n        }\n        else if (actuator === mxShapePidValve.prototype.cst.MOTOR || actuator === mxShapePidValve.prototype.cst.ELECTRO_HYDRAULIC) {\n            c.translate(w * 0.325, 0);\n            this.drawCircleAct(c, w * 0.35, h * 0.7, actuator);\n            c.translate(- w * 0.325, 0);\n        }\n        else if (actuator === mxShapePidValve.prototype.cst.SPRING) {\n            c.translate(w * 0.36, 0);\n            this.drawSpringAct(c, w * 0.28, h * 0.7);\n            c.translate(- w * 0.36, 0);\n        }\n        else if (actuator === mxShapePidValve.prototype.cst.SOLENOID_MANUAL_RESET) {\n            c.translate(w * 0.325, 0);\n            this.drawSolenoidManResetAct(c, w * 0.575, h * 0.7);\n            c.translate(- w * 0.325, 0);\n        }\n        else if (actuator === mxShapePidValve.prototype.cst.SINGLE_ACTING) {\n            c.translate(w * 0.35, 0);\n            this.drawSingActingActBg(c, w * 0.65, h * 0.7);\n            c.translate(- w * 0.35, 0);\n        }\n        else if (actuator === mxShapePidValve.prototype.cst.DOUBLE_ACTING) {\n            c.translate(w * 0.35, 0);\n            this.drawDblActingActBg(c, w * 0.65, h * 0.7);\n            c.translate(- w * 0.35, 0);\n        }\n        else if (actuator === mxShapePidValve.prototype.cst.PILOT_CYLINDER) {\n            c.translate(w * 0.35, 0);\n            this.drawPilotCylinderActBg(c, w * 0.65, h * 0.7);\n            c.translate(- w * 0.35, 0);\n        }\n        else if (actuator === mxShapePidValve.prototype.cst.ANGLE_BLOWDOWN) {\n            c.translate(w * 0.5, h * 0.2);\n            this.drawAngleBlowdownAct(c, w * 0.4, h * 0.5);\n            c.translate(- w * 0.5, - h * 0.2);\n        }\n    };\n\n    mxShapePidValve.prototype.drawActuatorFg = function (c, x, y, w, h, actuator) {\n        if (actuator === mxShapePidValve.prototype.cst.BALANCED_DIAPHRAGM) {\n            c.translate(w * 0.25, h * 0.1);\n            this.drawBalDiaphActFg(c, w * 0.5, h * 0.6);\n            c.translate(- w * 0.25, - h * 0.1);\n        }\n        else if (actuator === mxShapePidValve.prototype.cst.SINGLE_ACTING ||\n            actuator === mxShapePidValve.prototype.cst.DOUBLE_ACTING ||\n            actuator === mxShapePidValve.prototype.cst.PILOT_CYLINDER) {\n            c.translate(w * 0.35, 0);\n            this.drawActingActFg(c, w * 0.65, h * 0.7);\n            c.translate(- w * 0.35, 0);\n        }\n    };\n\n    mxShapePidValve.prototype.drawManAct = function (c, w, h) {\n        c.begin();\n        c.moveTo(0, 0);\n        c.lineTo(w, 0);\n        c.moveTo(w * 0.5, 0);\n        c.lineTo(w * 0.5, h);\n        c.stroke();\n    };\n\n    mxShapePidValve.prototype.drawDiaphAct = function (c, w, h) {\n        c.begin();\n        c.moveTo(w * 0.5, h * 0.2);\n        c.lineTo(w * 0.5, h);\n        c.stroke();\n\n        c.begin();\n        c.moveTo(0, h * 0.2);\n        c.arcTo(w * 0.6, h * 0.4, 0, 0, 1, w, h * 0.2);\n        c.close();\n        c.fillAndStroke();\n    };\n\n    mxShapePidValve.prototype.drawBalDiaphActBg = function (c, w, h) {\n        c.ellipse(0, 0, w, h * 0.3);\n        c.fillAndStroke();\n\n        c.begin();\n        c.moveTo(w * 0.5, h * 0.3);\n        c.lineTo(w * 0.5, h);\n        c.stroke();\n    };\n\n    mxShapePidValve.prototype.drawBalDiaphActFg = function (c, w, h) {\n        c.begin();\n        c.moveTo(0, h * 0.15);\n        c.lineTo(w, h * 0.15);\n        c.stroke();\n    };\n\n    mxShapePidValve.prototype.drawCircleAct = function (c, w, h, actuator) {\n        c.ellipse(0, 0, w, h * 0.5);\n        c.fillAndStroke();\n\n        c.begin();\n        c.moveTo(w * 0.5, h * 0.5);\n        c.lineTo(w * 0.5, h);\n        c.stroke();\n\n        var m = '';\n\n        if (actuator === mxShapePidValve.prototype.cst.MOTOR) {\n            m = 'M';\n        }\n        else if (actuator === mxShapePidValve.prototype.cst.ELECTRO_HYDRAULIC) {\n            m = 'E/H';\n        }\n\n        c.setFontStyle(1);\n        c.setFontFamily('Helvetica');\n        c.setFontSize(Math.min(w, h) * 0.4);\n        c.text(w * 0.5, h * 0.25, 0, 0, m, mxConstants.ALIGN_CENTER, mxConstants.ALIGN_MIDDLE, 0, null, 0, 0, 0);\n    };\n\n    mxShapePidValve.prototype.drawSpringAct = function (c, w, h) {\n        c.begin();\n        c.moveTo(w * 0.5, 0);\n        c.lineTo(w * 0.5, h);\n        c.moveTo(w * 0.32, h * 0.16);\n        c.lineTo(w * 0.68, h * 0.08);\n        c.moveTo(w * 0.21, h * 0.32);\n        c.lineTo(w * 0.79, h * 0.20);\n        c.moveTo(w * 0.1, h * 0.52);\n        c.lineTo(w * 0.9, h * 0.36);\n        c.moveTo(0, h * 0.72);\n        c.lineTo(w, h * 0.5);\n        c.stroke();\n    };\n\n    mxShapePidValve.prototype.drawSolenoidManResetAct = function (c, w, h) {\n        c.rect(0, 0, w * 0.61, h * 0.46);\n        c.fillAndStroke();\n\n        c.begin();\n        c.moveTo(w * 0.56, h * 0.6);\n        c.lineTo(w * 0.78, h * 0.5);\n        c.lineTo(w, h * 0.6);\n        c.lineTo(w * 0.78, h * 0.7);\n        c.close();\n        c.fillAndStroke();\n\n        c.begin();\n        c.moveTo(w * 0.305, h * 0.46);\n        c.lineTo(w * 0.305, h);\n        c.moveTo(w * 0.305, h * 0.6);\n        c.lineTo(w * 0.56, h * 0.6);\n        c.stroke();\n\n        c.setFontStyle(1);\n        c.setFontFamily('Helvetica');\n        c.setFontSize(Math.min(w, h) * 0.4);\n        c.text(w * 0.305, h * 0.23, 0, 0, 'S', mxConstants.ALIGN_CENTER, mxConstants.ALIGN_MIDDLE, 0, null, 0, 0, 0);\n\n        c.setFontStyle(0);\n        c.setFontSize(Math.min(w, h) * 0.15);\n        c.text(w * 0.78, h * 0.6, 0, 0, 'R', mxConstants.ALIGN_CENTER, mxConstants.ALIGN_MIDDLE, 0, null, 0, 0, 0);\n    };\n\n    mxShapePidValve.prototype.drawSingActingActBg = function (c, w, h) {\n        c.rect(0, 0, w * 0.46, h * 0.46);\n        c.fillAndStroke();\n\n        c.begin();\n        c.moveTo(w * 0.23, h * 0.46);\n        c.lineTo(w * 0.23, h);\n        c.moveTo(w * 0.46, h * 0.23);\n        c.lineTo(w, h * 0.23);\n        c.moveTo(w * 0.77, h * 0.15);\n        c.lineTo(w * 0.69, h * 0.31);\n        c.moveTo(w * 0.82, h * 0.15);\n        c.lineTo(w * 0.74, h * 0.31);\n        c.stroke();\n    };\n\n    mxShapePidValve.prototype.drawActingActFg = function (c, w, h) {\n        c.begin();\n        c.moveTo(w * 0.23, h * 0.23);\n        c.lineTo(w * 0.23, h * 0.46);\n        c.moveTo(0, h * 0.23);\n        c.lineTo(w * 0.46, h * 0.23);\n        c.stroke();\n    };\n\n    mxShapePidValve.prototype.drawDblActingActBg = function (c, w, h) {\n        c.rect(0, 0, w * 0.46, h * 0.46);\n        c.fillAndStroke();\n\n        c.begin();\n        c.moveTo(w * 0.23, h * 0.46);\n        c.lineTo(w * 0.23, h);\n        c.moveTo(w * 0.46, h * 0.115);\n        c.lineTo(w, h * 0.115);\n        c.moveTo(w * 0.77, h * 0.035);\n        c.lineTo(w * 0.69, h * 0.195);\n        c.moveTo(w * 0.82, h * 0.035);\n        c.lineTo(w * 0.74, h * 0.195);\n        c.moveTo(w * 0.46, h * 0.345);\n        c.lineTo(w, h * 0.345);\n        c.moveTo(w * 0.77, h * 0.265);\n        c.lineTo(w * 0.69, h * 0.425);\n        c.moveTo(w * 0.82, h * 0.265);\n        c.lineTo(w * 0.74, h * 0.425);\n        c.stroke();\n    };\n\n    mxShapePidValve.prototype.drawPilotCylinderActBg = function (c, w, h) {\n        c.rect(0, 0, w * 0.46, h * 0.46);\n        c.fillAndStroke();\n\n        c.begin();\n        c.moveTo(w * 0.23, h * 0.46);\n        c.lineTo(w * 0.23, h);\n        c.moveTo(w * 0.46, h * 0.23);\n        c.lineTo(w * 0.77, h * 0.23);\n        c.stroke();\n\n        c.rect(w * 0.77, h * 0.115, w * 0.23, h * 0.23);\n        c.fillAndStroke();\n\n        c.setFontStyle(0);\n        c.setFontFamily('Helvetica');\n        c.setFontSize(Math.min(w, h) * 0.15);\n        c.text(w * 0.885, h * 0.23, 0, 0, 'P', mxConstants.ALIGN_CENTER, mxConstants.ALIGN_MIDDLE, 0, null, 0, 0, 0);\n    };\n\n    mxShapePidValve.prototype.drawAngleBlowdownAct = function (c, w, h) {\n        c.begin();\n        c.moveTo(w * 0.34, 0);\n        c.lineTo(w, h * 0.405);\n        c.moveTo(0, h);\n        c.lineTo(w * 0.665, h * 0.205);\n        c.stroke();\n    };\n\n    mxShapePidValve.prototype.drawSquareAct = function (c, w, h, actuator) {\n        c.rect(0, 0, w, h * 0.5);\n        c.fillAndStroke();\n\n        c.begin();\n        c.moveTo(w * 0.5, h * 0.5);\n        c.lineTo(w * 0.5, h);\n        c.stroke();\n\n        var m = '';\n\n        if (actuator === mxShapePidValve.prototype.cst.PILOT) {\n            m = 'P';\n        }\n        else if (actuator === mxShapePidValve.prototype.cst.SOLENOID) {\n            m = 'S';\n        }\n        else if (actuator === mxShapePidValve.prototype.cst.DIGITAL) {\n            m = 'D';\n        }\n        else if (actuator === mxShapePidValve.prototype.cst.WEIGHT) {\n            m = 'W';\n        }\n        else if (actuator === mxShapePidValve.prototype.cst.KEY) {\n            m = 'K';\n        }\n\n        c.setFontStyle(1);\n        c.setFontFamily('Helvetica');\n        c.setFontSize(Math.min(w, h) * 0.4);\n        c.text(w * 0.5, h * 0.25, 0, 0, m, mxConstants.ALIGN_CENTER, mxConstants.ALIGN_MIDDLE, 0, null, 0, 0, 0);\n    };\n\n    mxShapePidValve.prototype.drawGateVariantFg = function (c, x, y, w, h, valveType, actuator, actH) {\n        var defState = mxUtils.getValue(this.style, mxShapePidValve.prototype.cst.DEFAULT_STATE, 'open');\n        var fillColor = mxUtils.getValue(this.style, mxConstants.STYLE_FILLCOLOR, '#ffffff');\n        var strokeColor = mxUtils.getValue(this.style, mxConstants.STYLE_STROKECOLOR, '#000000');\n\n        if (valveType === mxShapePidValve.prototype.cst.BALL) {\n            c.ellipse(x + w * 0.3, y + actH + (h - actH) * 0.18, w * 0.4, (h - actH) * 0.64);\n            c.fillAndStroke();\n        }\n        else if (valveType === mxShapePidValve.prototype.cst.GLOBE) {\n            c.ellipse(x + w * 0.3, y + actH + (h - actH) * 0.18, w * 0.4, (h - actH) * 0.64);\n            c.setFillColor(strokeColor);\n            c.fillAndStroke();\n            c.setFillColor(fillColor);\n        }\n        else if (valveType === mxShapePidValve.prototype.cst.PLUG) {\n            this.drawPlug(c, x + w * 0.4, y + actH + (h - actH) * 0.25, w * 0.2, (h - actH) * 0.5);\n        }\n        else if (valveType === mxShapePidValve.prototype.cst.NEEDLE) {\n            this.drawNeedle(c, x + w * 0.45, y + actH + (h - actH) * 0.1, w * 0.1, (h - actH) * 0.9);\n        }\n        else if (valveType === mxShapePidValve.prototype.cst.SELF_DRAINING) {\n            this.drawDrain(c, x + w * 0.48, y + actH + (h - actH) * 0.5, w * 0.04, (h - actH) * 0.49);\n        }\n    };\n\n    mxShapePidValve.prototype.drawAngleVariantFg = function (c, x, y, w, h, valveType, actuator, actH) {\n        var defState = mxUtils.getValue(this.style, mxShapePidValve.prototype.cst.DEFAULT_STATE, 'open');\n        var fillColor = mxUtils.getValue(this.style, mxConstants.STYLE_FILLCOLOR, '#ffffff');\n        var strokeColor = mxUtils.getValue(this.style, mxConstants.STYLE_STROKECOLOR, '#000000');\n\n        if (valveType === mxShapePidValve.prototype.cst.ANGLE_GLOBE) {\n            if (actuator === 'none') {\n                c.ellipse(w * 0.34, h * 0.175, w * 0.32, h * 0.4);\n            }\n            else {\n                c.ellipse(w * 0.34, h * 0.45, w * 0.32, h * 0.2667);\n            }\n            c.setFillColor(strokeColor);\n            c.fillAndStroke();\n            c.setFillColor(fillColor);\n        }\n    };\n\n    mxShapePidValve.prototype.drawGateVariantBg = function (c, x, y, w, h, valveType, actuator, actH) {\n        if (valveType === mxShapePidValve.prototype.cst.GATE) {\n            this.drawGateValve(c, x, y + actH, w, h - actH);\n        }\n        else if (valveType === mxShapePidValve.prototype.cst.BALL || valveType === mxShapePidValve.prototype.cst.GLOBE) {\n            c.ellipse(x + w * 0.3, y + actH + (h - actH) * 0.18, w * 0.4, (h - actH) * 0.64);\n            c.fillAndStroke();\n            this.drawGateValve(c, x, y + actH, w, h - actH);\n        }\n        else if (valveType === mxShapePidValve.prototype.cst.PLUG) {\n            this.drawPlug(c, x + w * 0.4, y + actH + (h - actH) * 0.25, w * 0.2, (h - actH) * 0.5);\n            this.drawGateValve(c, x, y + actH, w, h - actH);\n        }\n        else if (valveType === mxShapePidValve.prototype.cst.NEEDLE) {\n            this.drawNeedle(c, x + w * 0.45, y + actH + (h - actH) * 0.1, w * 0.1, (h - actH) * 0.9);\n            this.drawGateValve(c, x, y + actH, w, h - actH);\n        }\n        else if (valveType === mxShapePidValve.prototype.cst.SELF_DRAINING) {\n            this.drawDrain(c, x + w * 0.48, y + actH + (h - actH) * 0.5, w * 0.04, (h - actH) * 0.49);\n            this.drawGateValve(c, x, y + actH, w, h - actH);\n        }\n    };\n\n    mxShapePidValve.prototype.drawAngleVariantBg = function (c, x, y, w, h, valveType, actuator, actH) {\n        if (valveType === mxShapePidValve.prototype.cst.ANGLE) {\n            this.drawAngleValve(c, w * 0.2, y + actH, w * 0.8, h - actH);\n        }\n        else if (valveType === mxShapePidValve.prototype.cst.ANGLE_GLOBE) {\n            this.drawAngleGlobeValveBg(c, w * 0.2, y + actH, w * 0.8, h - actH);\n        }\n        else if (valveType === mxShapePidValve.prototype.cst.THREE_WAY) {\n            this.drawThreeWayValve(c, 0, y + actH, w, h - actH);\n        }\n        else if (valveType === mxShapePidValve.prototype.cst.ANGLE_BLOWDOWN) {\n            this.drawAngleBlowdownValve(c, x, y + actH, w, h - actH);\n        }\n    };\n\n    mxShapePidValve.prototype.drawPlug = function (c, x, y, w, h) {\n        c.translate(x, y);\n        c.begin();\n        c.moveTo(0, h * 0.5);\n        c.lineTo(w * 0.5, 0);\n        c.lineTo(w, h * 0.5);\n        c.lineTo(w * 0.5, h);\n        c.close();\n        c.fillAndStroke();\n        c.translate(-x, -y);\n    };\n\n    mxShapePidValve.prototype.drawNeedle = function (c, x, y, w, h) {\n        var fillColor = mxUtils.getValue(this.style, mxConstants.STYLE_FILLCOLOR, '#ffffff');\n        var strokeColor = mxUtils.getValue(this.style, mxConstants.STYLE_STROKECOLOR, '#000000');\n\n        c.translate(x, y);\n        c.begin();\n        c.moveTo(0, 0);\n        c.lineTo(w, 0);\n        c.lineTo(w * 0.5, h);\n        c.close();\n        c.setFillColor(strokeColor);\n        c.fillAndStroke();\n        c.setFillColor(fillColor);\n        c.translate(-x, -y);\n    };\n\n    mxShapePidValve.prototype.drawDrain = function (c, x, y, w, h) {\n        var fillColor = mxUtils.getValue(this.style, mxConstants.STYLE_FILLCOLOR, '#ffffff');\n        var strokeColor = mxUtils.getValue(this.style, mxConstants.STYLE_STROKECOLOR, '#000000');\n\n        c.translate(x, y);\n        c.begin();\n        c.moveTo(w * 0.5, 0);\n        c.lineTo(w * 0.5, h * 0.96);\n        c.stroke();\n\n        c.begin();\n        c.moveTo(0, h * 0.9);\n        c.lineTo(w, h * 0.9);\n        c.lineTo(w * 0.5, h);\n        c.close();\n        c.setFillColor(strokeColor);\n        c.fillAndStroke();\n        c.setFillColor(fillColor);\n        c.translate(-x, -y);\n    };\n\n    mxShapePidValve.prototype.drawGateValve = function (c, x, y, w, h) {\n        var defState = mxUtils.getValue(this.style, mxShapePidValve.prototype.cst.DEFAULT_STATE, 'open');\n        var fillColor = mxUtils.getValue(this.style, mxConstants.STYLE_FILLCOLOR, '#ffffff');\n        var strokeColor = mxUtils.getValue(this.style, mxConstants.STYLE_STROKECOLOR, '#000000');\n\n        c.translate(x, y);\n        c.begin();\n        c.moveTo(0, 0);\n        c.lineTo(w * 0.5, h * 0.5);\n        c.lineTo(0, h);\n        c.close();\n        c.moveTo(w, 0);\n        c.lineTo(w * 0.5, h * 0.5);\n        c.lineTo(w, h);\n        c.close();\n\n        if (defState === mxShapePidValve.prototype.cst.CLOSED) {\n            c.setFillColor(strokeColor);\n            c.fillAndStroke();\n            c.setFillColor(fillColor);\n        }\n        else {\n            c.fillAndStroke();\n        }\n\n        c.translate(-x, -y);\n    };\n\n    mxShapePidValve.prototype.drawAngleValve = function (c, x, y, w, h) {\n        c.translate(x, y);\n\n        c.begin();\n        c.moveTo(w * 0.375, h * 0.375);\n        c.lineTo(w, 0);\n        c.lineTo(w, h * 0.75);\n        c.close();\n        c.moveTo(w * 0.375, h * 0.375);\n        c.lineTo(w * 0.75, h);\n        c.lineTo(0, h);\n        c.close();\n        c.fillAndStroke();\n\n        c.translate(-x, -y);\n    };\n\n    mxShapePidValve.prototype.drawAngleGlobeValveBg = function (c, x, y, w, h) {\n        c.translate(x, y);\n\n        c.ellipse(w * 0.175, h * 0.175, w * 0.4, h * 0.4);\n        c.fillAndStroke();\n        c.begin();\n        c.moveTo(w * 0.375, h * 0.375);\n        c.lineTo(w, 0);\n        c.lineTo(w, h * 0.75);\n        c.close();\n        c.moveTo(w * 0.375, h * 0.375);\n        c.lineTo(w * 0.75, h);\n        c.lineTo(0, h);\n        c.close();\n        c.fillAndStroke();\n        c.translate(-x, -y);\n    };\n\n    mxShapePidValve.prototype.drawAngleGlobeValveFg = function (c, x, y, w, h) {\n        c.translate(x, y);\n        c.ellipse(w * 0.275, h * 0.275, w * 0.2, h * 0.2);\n        c.fillAndStroke();\n        c.translate(-x, -y);\n    };\n\n    mxShapePidValve.prototype.drawThreeWayValve = function (c, x, y, w, h) {\n        c.translate(x, y);\n\n        c.begin();\n        c.moveTo(0, 0);\n        c.lineTo(w * 0.5, h * 0.375);\n        c.lineTo(0, h * 0.75);\n        c.close();\n\n        c.moveTo(w, 0);\n        c.lineTo(w * 0.5, h * 0.375);\n        c.lineTo(w, h * 0.75);\n        c.close();\n\n        c.moveTo(w * 0.5, h * 0.375);\n        c.lineTo(w * 0.8, h);\n        c.lineTo(w * 0.2, h);\n        c.close();\n        c.fillAndStroke();\n\n        c.translate(-x, -y);\n    };\n\n    mxShapePidValve.prototype.drawAngleBlowdownValve = function (c, x, y, w, h) {\n\n    };\n\n\n    mxShapePidValve.prototype.drawButterflyValve = function (c, x, y, w, h, actuator, actH) {\n        var fillColor = mxUtils.getValue(this.style, mxConstants.STYLE_FILLCOLOR, '#ffffff');\n        var strokeColor = mxUtils.getValue(this.style, mxConstants.STYLE_STROKECOLOR, '#000000');\n\n        var yv = y + actH;\n        var hv = h - actH;\n\n        c.translate(x, yv);\n        c.begin();\n        c.moveTo(0, 0);\n        c.lineTo(0, hv);\n        c.moveTo(w, 0);\n        c.lineTo(w, hv);\n\n        c.moveTo(w * 0.05, hv * 0.05);\n        c.lineTo(w * 0.95, hv * 0.95);\n\n        c.fillAndStroke();\n\n        c.ellipse(w * 0.4, hv * 0.33, w * 0.2, hv * 0.33);\n        c.fillAndStroke();\n\n        c.translate(-x, -y);\n    };\n\n    mxShapePidValve.prototype.drawCheckValve = function (c, x, y, w, h, actuator, actH) {\n        var fillColor = mxUtils.getValue(this.style, mxConstants.STYLE_FILLCOLOR, '#ffffff');\n        var strokeColor = mxUtils.getValue(this.style, mxConstants.STYLE_STROKECOLOR, '#000000');\n\n        var yv = y + actH;\n        var hv = h - actH;\n\n        c.translate(x, yv);\n        c.begin();\n        c.moveTo(0, 0);\n        c.lineTo(0, hv);\n        c.moveTo(w, 0);\n        c.lineTo(w, hv);\n        c.moveTo(w * 0.05, hv * 0.05);\n        c.lineTo(w * 0.95, hv * 0.95);\n        c.fillAndStroke();\n\n        c.begin();\n        c.moveTo(w * 0.8925, hv * 0.815);\n        c.lineTo(w * 0.957, hv * 0.955);\n        c.lineTo(w * 0.85, hv * 0.928);\n        c.close();\n        c.setFillColor(strokeColor);\n        c.fillAndStroke();\n        c.setFillColor(fillColor);\n\n        c.translate(-x, -y);\n    };\n\n    mxShapePidValve.prototype.isGateVariant = function (valveType) {\n        if (valveType === mxShapePidValve.prototype.cst.GATE ||\n            valveType === mxShapePidValve.prototype.cst.BALL ||\n            valveType === mxShapePidValve.prototype.cst.PLUG ||\n            valveType === mxShapePidValve.prototype.cst.NEEDLE ||\n            valveType === mxShapePidValve.prototype.cst.SELF_DRAINING ||\n            valveType === mxShapePidValve.prototype.cst.GLOBE) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n\n    mxShapePidValve.prototype.isAngleVariant = function (valveType) {\n        if (valveType === mxShapePidValve.prototype.cst.ANGLE ||\n            valveType === mxShapePidValve.prototype.cst.ANGLE_GLOBE ||\n            valveType === mxShapePidValve.prototype.cst.THREE_WAY ||\n            valveType === mxShapePidValve.prototype.cst.ANGLE_BLOWDOWN) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n\n    mxShapePidValve.prototype.isSquareVariant = function (actType) {\n        if (actType === mxShapePidValve.prototype.cst.PILOT ||\n            actType === mxShapePidValve.prototype.cst.SOLENOID ||\n            actType === mxShapePidValve.prototype.cst.POWERED ||\n            actType === mxShapePidValve.prototype.cst.DIGITAL ||\n            actType === mxShapePidValve.prototype.cst.WEIGHT ||\n            actType === mxShapePidValve.prototype.cst.KEY) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n\n    mxCellRenderer.registerShape(mxShapePidValve.prototype.cst.SHAPE_VALVE, mxShapePidValve);\n\n    //**********************************************************************************************************************************************************\n    //Integrated Block And Bleed Valve\n    //**********************************************************************************************************************************************************\n    /**\n    * Extends mxShape.\n    */\n    function mxShapePidIntBlockBleedValve(bounds, fill, stroke, strokewidth) {\n        mxShape.call(this);\n        this.bounds = bounds;\n        this.fill = fill;\n        this.stroke = stroke;\n        this.strokewidth = (strokewidth != null) ? strokewidth : 1;\n    };\n\n    /**\n    * Extends mxShapePidValve.\n    */\n    mxUtils.extend(mxShapePidIntBlockBleedValve, mxShapePidValve);\n\n    /**\n    * Function: paintVertexShape\n    * \n    * Paints the vertex shape.\n    */\n    mxShapePidIntBlockBleedValve.prototype.paintVertexShape = function (c, x, y, w, h) {\n        var actuator = mxUtils.getValue(this.style, mxShapePidIntBlockBleedValve.prototype.cst.ACTUATOR, mxShapePidIntBlockBleedValve.prototype.cst.NONE);\n        var actH = 0;\n\n        if (actuator !== 'none') {\n            actH = h * 0.2353;\n        }\n\n        c.translate(x, y);\n        c.setLineJoin('round');\n\n        this.background(c, x, y, w, h, actuator, actH);\n        c.setShadow(false);\n        this.foreground(c, x, y, w, h, actuator, actH);\n    };\n\n    mxShapePidIntBlockBleedValve.prototype.background = function (c, x, y, w, h, actuator, actH) {\n        //draw the actuator\n        if (actuator !== mxShapePidIntBlockBleedValve.prototype.cst.NONE) {\n            this.drawActuatorBg(c, x, y, w, h, actuator);\n        }\n\n        //draw the valve body\n        this.drawValveBg(c, 0, actH, w, h - actH);\n    };\n\n    mxShapePidIntBlockBleedValve.prototype.foreground = function (c, x, y, w, h, actuator, actH) {\n        //draw the actuator\n        if (actuator !== mxShapePidIntBlockBleedValve.prototype.cst.NONE) {\n            this.drawActuatorFg(c, x, y, w, h, actuator);\n        }\n    };\n\n    mxShapePidIntBlockBleedValve.prototype.drawValveBg = function (c, x, y, w, h) {\n        var fillColor = mxUtils.getValue(this.style, mxConstants.STYLE_FILLCOLOR, '#ffffff');\n        var strokeColor = mxUtils.getValue(this.style, mxConstants.STYLE_STROKECOLOR, '#000000');\n\n        c.translate(x, y);\n        c.begin();\n        c.moveTo(0, 0);\n        c.lineTo(w * 0.5, h * 0.23);\n        c.lineTo(0, h * 0.46);\n        c.close();\n        c.moveTo(w * 0.5, h * 0.23);\n        c.lineTo(w, 0);\n        c.lineTo(w, h * 0.46);\n        c.close();\n        c.fillAndStroke();\n\n        c.begin();\n        c.moveTo(w * 0.5, h * 0.23);\n        c.lineTo(w * 0.5, h * 0.5);\n        c.stroke();\n\n        c.setFillColor(strokeColor);\n        c.begin();\n        c.moveTo(w * 0.3, h * 0.5);\n        c.lineTo(w * 0.7, h * 0.5);\n        c.lineTo(w * 0.5, h * 0.75);\n        c.close();\n        c.fillAndStroke();\n\n        c.begin();\n        c.moveTo(w * 0.3, h);\n        c.lineTo(w * 0.5, h * 0.75);\n        c.lineTo(w * 0.7, h);\n        c.fillAndStroke();\n        c.setFillColor(fillColor);\n\n        c.translate(-x, -y);\n    };\n\n    mxShapePidIntBlockBleedValve.prototype.drawActuatorBg = function (c, x, y, w, h, actuator) {\n        if (this.isSquareVariant(actuator)) {\n            c.translate(w * 0.325, 0);\n            this.drawSquareAct(c, w * 0.35, h * 0.4112, actuator);\n            c.translate(- w * 0.325, 0);\n        }\n        else if (actuator === mxShapePidIntBlockBleedValve.prototype.cst.MANUAL) {\n            c.translate(w * 0.25, h * 0.0882);\n            this.drawManAct(c, w * 0.5, h * 0.323);\n            c.translate(- w * 0.25, - h * 0.0882);\n        }\n        else if (actuator === mxShapePidIntBlockBleedValve.prototype.cst.DIAPHRAGM) {\n            c.translate(w * 0.25, h * 0.0588);\n            this.drawDiaphAct(c, w * 0.5, h * 0.3524);\n            c.translate(- w * 0.25, - h * 0.0588);\n        }\n        else if (actuator === mxShapePidIntBlockBleedValve.prototype.cst.BALANCED_DIAPHRAGM) {\n            c.translate(w * 0.25, h * 0.0588);\n            this.drawBalDiaphActBg(c, w * 0.5, h * 0.3524);\n            c.translate(- w * 0.25, - h * 0.0588);\n        }\n        else if (actuator === mxShapePidIntBlockBleedValve.prototype.cst.MOTOR || actuator === mxShapePidIntBlockBleedValve.prototype.cst.ELECTRO_HYDRAULIC) {\n            c.translate(w * 0.325, 0);\n            this.drawCircleAct(c, w * 0.35, h * 0.4112, actuator);\n            c.translate(- w * 0.325, 0);\n        }\n        else if (actuator === mxShapePidIntBlockBleedValve.prototype.cst.SPRING) {\n            c.translate(w * 0.36, 0);\n            this.drawSpringAct(c, w * 0.28, h * 0.4112);\n            c.translate(- w * 0.36, 0);\n        }\n        else if (actuator === mxShapePidIntBlockBleedValve.prototype.cst.SOLENOID_MANUAL_RESET) {\n            c.translate(w * 0.325, 0);\n            this.drawSolenoidManResetAct(c, w * 0.575, h * 0.4112);\n            c.translate(- w * 0.325, 0);\n        }\n        else if (actuator === mxShapePidIntBlockBleedValve.prototype.cst.SINGLE_ACTING) {\n            c.translate(w * 0.35, 0);\n            this.drawSingActingActBg(c, w * 0.65, h * 0.4112);\n            c.translate(- w * 0.35, 0);\n        }\n        else if (actuator === mxShapePidIntBlockBleedValve.prototype.cst.DOUBLE_ACTING) {\n            c.translate(w * 0.35, 0);\n            this.drawDblActingActBg(c, w * 0.65, h * 0.4112);\n            c.translate(- w * 0.35, 0);\n        }\n        else if (actuator === mxShapePidIntBlockBleedValve.prototype.cst.PILOT_CYLINDER) {\n            c.translate(w * 0.35, 0);\n            this.drawPilotCylinderActBg(c, w * 0.65, h * 0.4112);\n            c.translate(- w * 0.35, 0);\n        }\n    };\n\n    mxShapePidIntBlockBleedValve.prototype.drawActuatorFg = function (c, x, y, w, h, actuator) {\n        if (actuator === mxShapePidIntBlockBleedValve.prototype.cst.BALANCED_DIAPHRAGM) {\n            c.translate(w * 0.25, h * 0.0588);\n            this.drawBalDiaphActFg(c, w * 0.5, h * 0.3524);\n            c.translate(- w * 0.25, - h * 0.0588);\n        }\n        else if (actuator === mxShapePidIntBlockBleedValve.prototype.cst.SINGLE_ACTING ||\n            actuator === mxShapePidIntBlockBleedValve.prototype.cst.DOUBLE_ACTING ||\n            actuator === mxShapePidIntBlockBleedValve.prototype.cst.PILOT_CYLINDER) {\n            c.translate(w * 0.35, 0);\n            this.drawActingActFg(c, w * 0.65, h * 0.4112);\n            c.translate(- w * 0.35, 0);\n        }\n    };\n\n    mxCellRenderer.registerShape('mxgraph.pid2valves.blockBleedValve', mxShapePidIntBlockBleedValve);\n\n    //**********************************************************************************************************************************************************\n    //Auto Recirculation Valve\n    //**********************************************************************************************************************************************************\n    /**\n     * Extends mxShape.\n     */\n    function mxShapePidAutoRecircValve(bounds, fill, stroke, strokewidth) {\n        mxShape.call(this);\n        this.bounds = bounds;\n        this.fill = fill;\n        this.stroke = stroke;\n        this.strokewidth = (strokewidth != null) ? strokewidth : 1;\n    };\n\n    /**\n     * Extends mxShape.\n     */\n    mxUtils.extend(mxShapePidAutoRecircValve, mxShape);\n\n\n    /**\n     * Function: paintVertexShape\n     * \n     * Paints the vertex shape.\n     */\n    mxShapePidAutoRecircValve.prototype.paintVertexShape = function (c, x, y, w, h) {\n        c.setLineJoin('round');\n        c.translate(x, y);\n\n        //background\n        c.rect(0, 0, w, h);\n        c.fillAndStroke();\n        c.setShadow(false);\n\n        //foreground\n        c.begin();\n        c.moveTo(w * 0.08, h * 0.08);\n        c.lineTo(w * 0.08, h * 0.92);\n        c.moveTo(w * 0.92, h * 0.08);\n        c.lineTo(w * 0.92, h * 0.92);\n        c.moveTo(w * 0.12, h * 0.122);\n        c.lineTo(w * 0.8738, h * 0.8837);\n\n        c.moveTo(w * 0.5, 0);\n        c.lineTo(w * 0.55, h * 0.05);\n        c.lineTo(w * 0.45, h * 0.15);\n        c.lineTo(w * 0.55, h * 0.25);\n        c.lineTo(w * 0.45, h * 0.35);\n        c.lineTo(w * 0.55, h * 0.45);\n        c.lineTo(w * 0.49, h * 0.5);\n        c.stroke();\n\n        var fillColor = mxUtils.getValue(this.style, mxConstants.STYLE_FILLCOLOR, '#ffffff');\n        var strokeColor = mxUtils.getValue(this.style, mxConstants.STYLE_STROKECOLOR, '#000000');\n\n        c.begin();\n        c.moveTo(w * 0.8257, h * 0.7695);\n        c.lineTo(w * 0.8797, h * 0.888);\n        c.lineTo(w * 0.79, h * 0.8651);\n        c.close();\n        c.setFillColor(strokeColor);\n        c.fillAndStroke();\n        c.setFillColor(fillColor);\n    };\n\n    mxCellRenderer.registerShape('mxgraph.pid2valves.autoRecircValve', mxShapePidAutoRecircValve);\n    /**\n     * $Id: mxPidInstruments.js,v 1.4 2014/01/21 13:10:17 gaudenz Exp $\n     * Copyright (c) 2006-2013, JGraph Ltd\n     */\n\n    //**********************************************************************************************************************************************************\n    //Discrete Instrument\n    //**********************************************************************************************************************************************************\n    /**\n     * Extends mxShape.\n     */\n    function mxShapePidDiscInst(bounds, fill, stroke, strokewidth) {\n        mxShape.call(this);\n        this.bounds = bounds;\n        this.fill = fill;\n        this.stroke = stroke;\n        this.strokewidth = (strokewidth != null) ? strokewidth : 1;\n    };\n\n    /**\n     * Extends mxShape.\n     */\n    mxUtils.extend(mxShapePidDiscInst, mxShape);\n\n    mxShapePidDiscInst.prototype.cst = {\n        SHAPE_DISC_INST: 'mxgraph.pid2inst.discInst',\n        MOUNTING: 'mounting',\n        FIELD: 'field',\n        ROOM: 'room',\n        INACCESSIBLE: 'inaccessible',\n        LOCAL: 'local'\n    };\n\n    /**\n     * Function: paintVertexShape\n     * \n     * Paints the vertex shape.\n     */\n    mxShapePidDiscInst.prototype.paintVertexShape = function (c, x, y, w, h) {\n        c.translate(x, y);\n        this.background(c, x, y, w, h);\n        c.setShadow(false);\n        this.foreground(c, x, y, w, h);\n    };\n\n    mxShapePidDiscInst.prototype.background = function (c, x, y, w, h) {\n        c.ellipse(0, 0, w, h);\n        c.fillAndStroke();\n    };\n\n    mxShapePidDiscInst.prototype.foreground = function (c, x, y, w, h) {\n        var mounting = mxUtils.getValue(this.style, mxShapePidDiscInst.prototype.cst.MOUNTING, 'field');\n\n        if (mounting === mxShapePidDiscInst.prototype.cst.ROOM) {\n            c.begin();\n            c.moveTo(0, h * 0.5);\n            c.lineTo(w, h * 0.5);\n            c.stroke();\n        }\n        else if (mounting === mxShapePidDiscInst.prototype.cst.INACCESSIBLE) {\n            c.setDashed(true);\n            c.begin();\n            c.moveTo(0, h * 0.5);\n            c.lineTo(w, h * 0.5);\n            c.stroke();\n        }\n        else if (mounting === mxShapePidDiscInst.prototype.cst.LOCAL) {\n            c.begin();\n            c.moveTo(w * 0.005, h * 0.48);\n            c.lineTo(w * 0.995, h * 0.48);\n            c.moveTo(w * 0.005, h * 0.52);\n            c.lineTo(w * 0.995, h * 0.52);\n            c.stroke();\n        }\n    };\n\n    mxCellRenderer.registerShape(mxShapePidDiscInst.prototype.cst.SHAPE_DISC_INST, mxShapePidDiscInst);\n\n    mxShapePidDiscInst.prototype.constraints = [\n        new mxConnectionConstraint(new mxPoint(0.5, 0), true),\n        new mxConnectionConstraint(new mxPoint(0.5, 1), true),\n        new mxConnectionConstraint(new mxPoint(0, 0.5), true),\n        new mxConnectionConstraint(new mxPoint(1, 0.5), true),\n        new mxConnectionConstraint(new mxPoint(0.145, 0.145), false),\n        new mxConnectionConstraint(new mxPoint(0.145, 0.855), false),\n        new mxConnectionConstraint(new mxPoint(0.855, 0.145), false),\n        new mxConnectionConstraint(new mxPoint(0.855, 0.855), false)\n    ];\n\n    //**********************************************************************************************************************************************************\n    //Shared Control/Display\n    //**********************************************************************************************************************************************************\n    /**\n    * Extends mxShape.\n    */\n    function mxShapePidSharedCont(bounds, fill, stroke, strokewidth) {\n        mxShape.call(this);\n        this.bounds = bounds;\n        this.fill = fill;\n        this.stroke = stroke;\n        this.strokewidth = (strokewidth != null) ? strokewidth : 1;\n    };\n\n    /**\n    * Extends mxShape.\n    */\n    mxUtils.extend(mxShapePidSharedCont, mxShape);\n\n    mxShapePidSharedCont.prototype.cst = {\n        SHAPE_SHARED_CONT: 'mxgraph.pid2inst.sharedCont',\n        MOUNTING: 'mounting',\n        FIELD: 'field',\n        ROOM: 'room',\n        INACCESSIBLE: 'inaccessible',\n        LOCAL: 'local'\n    };\n\n    /**\n    * Function: paintVertexShape\n    * \n    * Paints the vertex shape.\n    */\n    mxShapePidSharedCont.prototype.paintVertexShape = function (c, x, y, w, h) {\n        c.translate(x, y);\n        this.background(c, x, y, w, h);\n        c.setShadow(false);\n        this.foreground(c, x, y, w, h);\n    };\n\n    mxShapePidSharedCont.prototype.background = function (c, x, y, w, h) {\n        c.rect(0, 0, w, h);\n        c.fillAndStroke();\n    };\n\n    mxShapePidSharedCont.prototype.foreground = function (c, x, y, w, h) {\n        var mounting = mxUtils.getValue(this.style, mxShapePidSharedCont.prototype.cst.MOUNTING, 'field');\n\n        c.ellipse(0, 0, w, h);\n        c.fillAndStroke();\n\n        if (mounting === mxShapePidSharedCont.prototype.cst.ROOM) {\n            c.begin();\n            c.moveTo(0, h * 0.5);\n            c.lineTo(w, h * 0.5);\n            c.stroke();\n        }\n        else if (mounting === mxShapePidSharedCont.prototype.cst.INACCESSIBLE) {\n            c.setDashed(true);\n            c.begin();\n            c.moveTo(0, h * 0.5);\n            c.lineTo(w, h * 0.5);\n            c.stroke();\n        }\n        else if (mounting === mxShapePidDiscInst.prototype.cst.LOCAL) {\n            c.begin();\n            c.moveTo(w * 0.005, h * 0.48);\n            c.lineTo(w * 0.995, h * 0.48);\n            c.moveTo(w * 0.005, h * 0.52);\n            c.lineTo(w * 0.995, h * 0.52);\n            c.stroke();\n        }\n    };\n\n    mxCellRenderer.registerShape(mxShapePidSharedCont.prototype.cst.SHAPE_SHARED_CONT, mxShapePidSharedCont);\n\n    mxShapePidSharedCont.prototype.constraints = [\n        new mxConnectionConstraint(new mxPoint(0.5, 0), true),\n        new mxConnectionConstraint(new mxPoint(0.5, 1), true),\n        new mxConnectionConstraint(new mxPoint(0, 0.5), true),\n        new mxConnectionConstraint(new mxPoint(1, 0.5), true),\n        new mxConnectionConstraint(new mxPoint(0, 0), false),\n        new mxConnectionConstraint(new mxPoint(0, 1), false),\n        new mxConnectionConstraint(new mxPoint(1, 0), false),\n        new mxConnectionConstraint(new mxPoint(1, 1), false)\n    ];\n\n    //**********************************************************************************************************************************************************\n    //Computer Function\n    //**********************************************************************************************************************************************************\n    /**\n    * Extends mxShape.\n    */\n    function mxShapePidCompFunc(bounds, fill, stroke, strokewidth) {\n        mxShape.call(this);\n        this.bounds = bounds;\n        this.fill = fill;\n        this.stroke = stroke;\n        this.strokewidth = (strokewidth != null) ? strokewidth : 1;\n    };\n\n    /**\n    * Extends mxShape.\n    */\n    mxUtils.extend(mxShapePidCompFunc, mxShape);\n\n    mxShapePidCompFunc.prototype.cst = {\n        SHAPE_COMP_FUNC: 'mxgraph.pid2inst.compFunc',\n        MOUNTING: 'mounting',\n        FIELD: 'field',\n        ROOM: 'room',\n        INACCESSIBLE: 'inaccessible',\n        LOCAL: 'local'\n    };\n\n    /**\n    * Function: paintVertexShape\n    * \n    * Paints the vertex shape.\n    */\n    mxShapePidCompFunc.prototype.paintVertexShape = function (c, x, y, w, h) {\n        c.translate(x, y);\n        this.background(c, x, y, w, h);\n        c.setShadow(false);\n        this.foreground(c, x, y, w, h);\n    };\n\n    mxShapePidCompFunc.prototype.background = function (c, x, y, w, h) {\n        c.begin();\n        c.moveTo(0, h * 0.5);\n        c.lineTo(w * 0.25, 0);\n        c.lineTo(w * 0.75, 0);\n        c.lineTo(w, h * 0.5);\n        c.lineTo(w * 0.75, h);\n        c.lineTo(w * 0.25, h);\n        c.close();\n        c.fillAndStroke();\n    };\n\n    mxShapePidCompFunc.prototype.foreground = function (c, x, y, w, h) {\n        var mounting = mxUtils.getValue(this.style, mxShapePidCompFunc.prototype.cst.MOUNTING, 'field');\n\n        if (mounting === mxShapePidCompFunc.prototype.cst.ROOM) {\n            c.begin();\n            c.moveTo(0, h * 0.5);\n            c.lineTo(w, h * 0.5);\n            c.stroke();\n        }\n        else if (mounting === mxShapePidCompFunc.prototype.cst.INACCESSIBLE) {\n            c.setDashed(true);\n            c.begin();\n            c.moveTo(0, h * 0.5);\n            c.lineTo(w, h * 0.5);\n            c.stroke();\n        }\n        else if (mounting === mxShapePidDiscInst.prototype.cst.LOCAL) {\n            c.begin();\n            c.moveTo(w * 0.01, h * 0.48);\n            c.lineTo(w * 0.99, h * 0.48);\n            c.moveTo(w * 0.01, h * 0.52);\n            c.lineTo(w * 0.99, h * 0.52);\n            c.stroke();\n        }\n    };\n\n    mxCellRenderer.registerShape(mxShapePidCompFunc.prototype.cst.SHAPE_COMP_FUNC, mxShapePidCompFunc);\n\n    mxShapePidCompFunc.prototype.constraints = [\n        new mxConnectionConstraint(new mxPoint(0.5, 0), true),\n        new mxConnectionConstraint(new mxPoint(0.5, 1), true),\n        new mxConnectionConstraint(new mxPoint(0, 0.5), true),\n        new mxConnectionConstraint(new mxPoint(1, 0.5), true),\n        new mxConnectionConstraint(new mxPoint(0.25, 0), false),\n        new mxConnectionConstraint(new mxPoint(0.75, 0), false),\n        new mxConnectionConstraint(new mxPoint(0.25, 1), false),\n        new mxConnectionConstraint(new mxPoint(0.75, 1), false)\n    ];\n\n    //**********************************************************************************************************************************************************\n    //Computer Function\n    //**********************************************************************************************************************************************************\n    /**\n    * Extends mxShape.\n    */\n    function mxShapePidProgLogCont(bounds, fill, stroke, strokewidth) {\n        mxShape.call(this);\n        this.bounds = bounds;\n        this.fill = fill;\n        this.stroke = stroke;\n        this.strokewidth = (strokewidth != null) ? strokewidth : 1;\n    };\n\n    /**\n    * Extends mxShape.\n    */\n    mxUtils.extend(mxShapePidProgLogCont, mxShape);\n\n    mxShapePidProgLogCont.prototype.cst = {\n        SHAPE_PROG_LOG_CONT: 'mxgraph.pid2inst.progLogCont',\n        MOUNTING: 'mounting',\n        FIELD: 'field',\n        ROOM: 'room',\n        INACCESSIBLE: 'inaccessible',\n        LOCAL: 'local'\n    };\n\n    /**\n    * Function: paintVertexShape\n    * \n    * Paints the vertex shape.\n    */\n    mxShapePidProgLogCont.prototype.paintVertexShape = function (c, x, y, w, h) {\n        c.translate(x, y);\n        this.background(c, x, y, w, h);\n        c.setShadow(false);\n        this.foreground(c, x, y, w, h);\n    };\n\n    mxShapePidProgLogCont.prototype.background = function (c, x, y, w, h) {\n        c.rect(0, 0, w, h);\n        c.fillAndStroke();\n    };\n\n    mxShapePidProgLogCont.prototype.foreground = function (c, x, y, w, h) {\n        var mounting = mxUtils.getValue(this.style, mxShapePidProgLogCont.prototype.cst.MOUNTING, 'field');\n\n        c.begin();\n        c.moveTo(0, h * 0.5);\n        c.lineTo(w * 0.5, 0);\n        c.lineTo(w, h * 0.5);\n        c.lineTo(w * 0.5, h);\n        c.close();\n        c.stroke();\n\n        if (mounting === mxShapePidProgLogCont.prototype.cst.ROOM) {\n            c.begin();\n            c.moveTo(0, h * 0.5);\n            c.lineTo(w, h * 0.5);\n            c.stroke();\n        }\n        else if (mounting === mxShapePidProgLogCont.prototype.cst.INACCESSIBLE) {\n            c.setDashed(true);\n            c.begin();\n            c.moveTo(0, h * 0.5);\n            c.lineTo(w, h * 0.5);\n            c.stroke();\n        }\n        else if (mounting === mxShapePidDiscInst.prototype.cst.LOCAL) {\n            c.begin();\n            c.moveTo(w * 0.02, h * 0.48);\n            c.lineTo(w * 0.98, h * 0.48);\n            c.moveTo(w * 0.02, h * 0.52);\n            c.lineTo(w * 0.98, h * 0.52);\n            c.stroke();\n        }\n    };\n\n    mxCellRenderer.registerShape(mxShapePidProgLogCont.prototype.cst.SHAPE_PROG_LOG_CONT, mxShapePidProgLogCont);\n\n    mxShapePidProgLogCont.prototype.constraints = [\n        new mxConnectionConstraint(new mxPoint(0.5, 0), true),\n        new mxConnectionConstraint(new mxPoint(0.5, 1), true),\n        new mxConnectionConstraint(new mxPoint(0, 0.5), true),\n        new mxConnectionConstraint(new mxPoint(1, 0.5), true),\n        new mxConnectionConstraint(new mxPoint(0, 0), false),\n        new mxConnectionConstraint(new mxPoint(0, 1), false),\n        new mxConnectionConstraint(new mxPoint(1, 0), false),\n        new mxConnectionConstraint(new mxPoint(1, 1), false)\n    ];\n\n    //**********************************************************************************************************************************************************\n    //Indicator\n    //**********************************************************************************************************************************************************\n    /**\n    * Extends mxShape.\n    */\n    function mxShapePidIndicator(bounds, fill, stroke, strokewidth) {\n        mxShape.call(this);\n        this.bounds = bounds;\n        this.fill = fill;\n        this.stroke = stroke;\n        this.strokewidth = (strokewidth != null) ? strokewidth : 1;\n    };\n\n    /**\n    * Extends mxShape.\n    */\n    mxUtils.extend(mxShapePidIndicator, mxShape);\n\n    mxShapePidIndicator.prototype.cst = {\n        SHAPE_INDICATOR: 'mxgraph.pid2inst.indicator',\n        MOUNTING: 'mounting',\n        FIELD: 'field',\n        ROOM: 'room',\n        INACCESSIBLE: 'inaccessible',\n        LOCAL: 'local',\n        IND_TYPE: 'indType',\n        INSTRUMENT: 'inst',\n        CONTROL: 'ctrl',\n        FUNCTION: 'func',\n        PLC: 'plc'\n    };\n\n    /**\n    * Function: paintVertexShape\n    * \n    * Paints the vertex shape.\n    */\n    mxShapePidIndicator.prototype.paintVertexShape = function (c, x, y, w, h) {\n        c.translate(x, y);\n        this.background(c, x, y, w, h);\n        c.setShadow(false);\n        this.foreground(c, x, y, w, h);\n    };\n\n    mxShapePidIndicator.prototype.background = function (c, x, y, w, h) {\n        var type = mxUtils.getValue(this.style, mxShapePidIndicator.prototype.cst.IND_TYPE, 'inst');\n\n        c.begin();\n        c.moveTo(w * 0.5, w);\n        c.lineTo(w * 0.5, h);\n        c.stroke();\n\n        if (type === mxShapePidIndicator.prototype.cst.INSTRUMENT) {\n            c.ellipse(0, 0, w, w);\n            c.fillAndStroke();\n        }\n        else if (type === mxShapePidIndicator.prototype.cst.CONTROL) {\n            c.rect(0, 0, w, w);\n            c.fillAndStroke();\n        }\n        else if (type === mxShapePidIndicator.prototype.cst.FUNCTION) {\n            c.begin();\n            c.moveTo(0, w * 0.5);\n            c.lineTo(w * 0.25, 0);\n            c.lineTo(w * 0.75, 0);\n            c.lineTo(w, w * 0.5);\n            c.lineTo(w * 0.75, w);\n            c.lineTo(w * 0.25, w);\n            c.close();\n            c.fillAndStroke();\n        }\n        else if (type === mxShapePidIndicator.prototype.cst.PLC) {\n            c.rect(0, 0, w, w);\n            c.fillAndStroke();\n        }\n    };\n\n    mxShapePidIndicator.prototype.foreground = function (c, x, y, w, h) {\n        var mounting = mxUtils.getValue(this.style, mxShapePidIndicator.prototype.cst.MOUNTING, 'field');\n        var type = mxUtils.getValue(this.style, mxShapePidIndicator.prototype.cst.IND_TYPE, 'inst');\n\n        if (type === mxShapePidIndicator.prototype.cst.CONTROL) {\n            c.ellipse(0, 0, w, w);\n            c.stroke();\n        }\n        else if (type === mxShapePidIndicator.prototype.cst.PLC) {\n            c.begin();\n            c.moveTo(0, w * 0.5);\n            c.lineTo(w * 0.5, 0);\n            c.lineTo(w, w * 0.5);\n            c.lineTo(w * 0.5, w);\n            c.close();\n            c.stroke();\n        }\n\n        if (mounting === mxShapePidIndicator.prototype.cst.ROOM) {\n            c.begin();\n            c.moveTo(0, w * 0.5);\n            c.lineTo(w, w * 0.5);\n            c.stroke();\n        }\n        else if (mounting === mxShapePidIndicator.prototype.cst.INACCESSIBLE) {\n            c.setDashed(true);\n            c.begin();\n            c.moveTo(0, w * 0.5);\n            c.lineTo(w, w * 0.5);\n            c.stroke();\n        }\n        else if (mounting === mxShapePidIndicator.prototype.cst.LOCAL) {\n            c.begin();\n            c.moveTo(w * 0.005, w * 0.48);\n            c.lineTo(w * 0.995, w * 0.48);\n            c.moveTo(w * 0.005, w * 0.52);\n            c.lineTo(w * 0.995, w * 0.52);\n            c.stroke();\n        }\n    };\n\n    mxCellRenderer.registerShape(mxShapePidIndicator.prototype.cst.SHAPE_INDICATOR, mxShapePidIndicator);\n\n    mxShapePidIndicator.prototype.constraints = [new mxConnectionConstraint(new mxPoint(0.5, 1), true)];\n\n    //**********************************************************************************************************************************************************\n    //Logic\n    //**********************************************************************************************************************************************************\n    /**\n    * Extends mxShape.\n    */\n    function mxShapePidLogic(bounds, fill, stroke, strokewidth) {\n        mxShape.call(this);\n        this.bounds = bounds;\n        this.fill = fill;\n        this.stroke = stroke;\n        this.strokewidth = (strokewidth != null) ? strokewidth : 1;\n    };\n\n    /**\n    * Extends mxShape.\n    */\n    mxUtils.extend(mxShapePidLogic, mxShape);\n\n    mxShapePidLogic.prototype.cst = {\n        SHAPE_LOGIC: 'mxgraph.pid2inst.logic',\n        MOUNTING: 'mounting',\n        FIELD: 'field',\n        ROOM: 'room',\n        INACCESSIBLE: 'inaccessible',\n        LOCAL: 'local'\n    };\n\n    /**\n    * Function: paintVertexShape\n    * \n    * Paints the vertex shape.\n    */\n    mxShapePidLogic.prototype.paintVertexShape = function (c, x, y, w, h) {\n        c.translate(x, y);\n        this.background(c, x, y, w, h);\n        c.setShadow(false);\n        this.foreground(c, x, y, w, h);\n    };\n\n    mxShapePidLogic.prototype.background = function (c, x, y, w, h) {\n        c.begin();\n        c.moveTo(0, h * 0.5);\n        c.lineTo(w * 0.5, 0);\n        c.lineTo(w, h * 0.5);\n        c.lineTo(w * 0.5, h);\n        c.close();\n        c.fillAndStroke();\n    };\n\n    mxShapePidLogic.prototype.foreground = function (c, x, y, w, h) {\n        var mounting = mxUtils.getValue(this.style, mxShapePidLogic.prototype.cst.MOUNTING, 'field');\n\n        if (mounting === mxShapePidLogic.prototype.cst.ROOM) {\n            c.begin();\n            c.moveTo(0, h * 0.5);\n            c.lineTo(w, h * 0.5);\n            c.stroke();\n        }\n        else if (mounting === mxShapePidLogic.prototype.cst.INACCESSIBLE) {\n            c.setDashed(true);\n            c.begin();\n            c.moveTo(0, h * 0.5);\n            c.lineTo(w, h * 0.5);\n            c.stroke();\n        }\n        else if (mounting === mxShapePidLogic.prototype.cst.LOCAL) {\n            c.begin();\n            c.moveTo(w * 0.02, h * 0.48);\n            c.lineTo(w * 0.98, h * 0.48);\n            c.moveTo(w * 0.02, h * 0.52);\n            c.lineTo(w * 0.98, h * 0.52);\n            c.stroke();\n        }\n    };\n\n    mxCellRenderer.registerShape(mxShapePidLogic.prototype.cst.SHAPE_LOGIC, mxShapePidLogic);\n\n    mxShapePidLogic.prototype.constraints = [\n        new mxConnectionConstraint(new mxPoint(0.5, 0), true),\n        new mxConnectionConstraint(new mxPoint(0.5, 1), true),\n        new mxConnectionConstraint(new mxPoint(0, 0.5), true),\n        new mxConnectionConstraint(new mxPoint(1, 0.5), true),\n        new mxConnectionConstraint(new mxPoint(0.25, 0.25), false),\n        new mxConnectionConstraint(new mxPoint(0.25, 0.75), false),\n        new mxConnectionConstraint(new mxPoint(0.75, 0.25), false),\n        new mxConnectionConstraint(new mxPoint(0.75, 0.75), false)\n    ];\n}", "ColumnPosition" : 31, "DirectLinkUUID" : "", "DisplayName" : "BMCodeHost-11", "Exports" : "interface shapeCatalogue extends TWRuntimeWidget {execute(); \t    \t/**\t    \t * Should be invoked to dispatch an event to the Thingworx runtime, causing all actions bound to that event to execute.\n\t    \t * @param event - The name of the event to dispatch.\n\t    \t */\n\t\t\tdispatchEvent(event: string): void;\n\t    \t/**\n\t    \t * Invoked after any property has been updated as a result of a binding.\n\t    \t * This method will be invoked after the specific ..DidUpdateToValue method is invoked.\n\t    \t * Scripts can override this method to react to all property updates.\n\t    \t * @param event - The name of the event to dispatch.\n\t    \t */\n\t\t\tpropertyDidUpdateToValue(property: string, value: any | undefined): void;\n\t    \t/**\n\t    \t * Finds and returns the widget with the given name in the current mashup.\n\t    \t * @param name - The DisplayName of the widget to find.\n\t    \t * @return - The widget object if it was found, undefined otherwise.\n\t    \t */\n\t\t\twidgetNamed(name: string): TWRuntimeWidget | undefined;\n\t    \t/**\n\t    \t * Sends a property update to the given widget as if it came from a binding.\n\t    \t * Supported properties may be updated this way even if they are not bound to anything in the composer.\n\t    \t * @param widget - The widget object whose property should be updated.\n\t    \t * @param args - An object containing additional arguments. This object must have the following properties:\n\t    \t *\t\t\t\t\tforProperty {String} - The name of the property to update.\n\t    \t *\t\t\t\t\tvalue {AnyObject} - The value to which that property should update.\n\t    \t */\n\t\t\tdispatchPropertyUpdateToWidget(widget: any, args: SelfDispatchPropertyUpdateToWidgetArgs): void;\n\t    \t/**\n\t    \t * May be overriden by scripts that create an UI. This method receives the script's container as its parameter.\n\t    \t * It is the script's responsibility to add their content to the supplied container.\n\t    \t * @param container - The container in which the UI elements should be added.\n\t    \t */\n\t\t\trenderWithContainer(container: $): void;\n\t\t}\n", "FullScreen" : false, "Height" : 46, "Id" : "BMCodeHost-11", "Left" : 310, "ResponsiveLayout" : false, "RuntimeProperties" : "[{\"name\":\"execute\",\"dataType\":\"STRING\",\"type\":\"service\"}]", "Scope" : "local", "ScrollPosition" : 322, "ShowDataLoading" : true, "Title" : "shapeCatalogue", "Top" : 25, "Type" : "BMCodeHost", "Visible" : true, "Width" : 169, "Z-index" : 10, "__TypeDisplayName" : "Object" }, "Widgets" : [ ] }, { "Properties" : { "Area" : "UI", "Code" : "// defines the internal structure of a JSON mtp file\ninterface IPoint {\n    x: number;\n    y: number;\n}\n\nclass Point implements IPoint {\n    x: number;\n    y: number;\n\n    constructor(x: number, y: number) \n    constructor(value: string)\n    constructor(xOrValue: number | string, y?: number) {\n        if(typeof xOrValue == \"string\") {\n            const tokens = xOrValue.split(\",\");\n            if (tokens.length < 2) {\n                throw \"We need two points to create a mxPoint\"\n            }\n            this.x = parseFloat(tokens[0])\n            this.y = parseFloat(tokens[1])\n        } else {\n            this.x = xOrValue;\n            this.y = y as number;\n        }\n    }\n\n    equals(otherPoint: IPoint) {\n        return this.x == otherPoint.x && this.y == otherPoint.y;\n    }\n}\n\nfunction isNozzle(object: IPoint | Nozzle): object is Nozzle {\n    return 'type' in object && object.type == ElementType.NOZZLE;\n}\n\ninterface Shape extends IPoint {\n    width: number;\n    height: number;\n    rotation: number;\n}\n\nenum ElementType {\n    PIPE = \"Pipe\", \n    NOZZLE = \"Nozzle\",\n    VISUAL_ELEMENT = \"VisualElement\", \n    COMMUNICATION_INTERFACE = \"CommunicationInterface\", \n    COMMUNICATION_OBJECT = \"CommunicationObject\"\n}\n\ninterface GenericMptElement {\n    id: string;\n    name: string;\n    type: ElementType;\n}\n\ninterface PositionableElement extends IPoint {\n    // empty\n}\n\ninterface Nozzle extends GenericMptElement, PositionableElement {\n    externalConnectorId: string;\n    baseClass: string;\n}\n\ninterface VisualObject extends Shape, GenericMptElement {\n    viewType: string;\n    eClassVersion: string;\n    eClassClassification: string;\n    eClassIrdi: string;\n    refId: string;\n    nozzles: Nozzle[];\n    subElement?: Shape;\n}\n\ninterface PipeDefinition extends GenericMptElement {\n    source: IPoint | Nozzle;\n    target: IPoint | Nozzle;\n    waypoints: IPoint[];\n    nozzles: Nozzle[];\n}\n\ninterface CommunicationInterface extends GenericMptElement {\n    identifier: string;\n    namespace: string;\n    access: string;\n    endpoint: string;\n}\n\ninterface CommunicationObject extends GenericMptElement {\n    description: string;\n    interfaces: CommunicationInterface[];\n}\n\ninterface InteractibleElement {\n    obj: VisualObject;\n    communication?: CommunicationObject;\n}\n\ninterface HmiDiagram {\n    width: number;\n    height: number;\n    elements: InteractibleElement[];\n    pipes: PipeDefinition[];\n}\n\ninterface Window {\n    Point: typeof Point\n    ElementType: typeof ElementType,\n    isNozzle: typeof isNozzle\n}\nwindow[\"Point\"] = Point;\nwindow[\"ElementType\"] = ElementType;\nwindow[\"isNozzle\"] = isNozzle;", "ColumnPosition" : 1, "Description" : "", "DirectLinkUUID" : "", "DisplayName" : "BMTypescriptHost-12", "Exports" : "interface mtpJsonDef extends TWRuntimeWidget {\t    \t/**\t    \t * Should be invoked to dispatch an event to the Thingworx runtime, causing all actions bound to that event to execute.\n\t    \t * @param event - The name of the event to dispatch.\n\t    \t */\n\t\t\tdispatchEvent(event: string): void;\n\t    \t/**\n\t    \t * Invoked after any property has been updated as a result of a binding.\n\t    \t * This method will be invoked after the specific ..DidUpdateToValue method is invoked.\n\t    \t * Scripts can override this method to react to all property updates.\n\t    \t * @param event - The name of the event to dispatch.\n\t    \t */\n\t\t\tpropertyDidUpdateToValue(property: string, value: any | undefined): void;\n\t    \t/**\n\t    \t * Finds and returns the widget with the given name in the current mashup.\n\t    \t * @param name - The DisplayName of the widget to find.\n\t    \t * @return - The widget object if it was found, undefined otherwise.\n\t    \t */\n\t\t\twidgetNamed(name: string): TWRuntimeWidget | undefined;\n\t    \t/**\n\t    \t * Sends a property update to the given widget as if it came from a binding.\n\t    \t * Supported properties may be updated this way even if they are not bound to anything in the composer.\n\t    \t * @param widget - The widget object whose property should be updated.\n\t    \t * @param args - An object containing additional arguments. This object must have the following properties:\n\t    \t *\t\t\t\t\tforProperty {String} - The name of the property to update.\n\t    \t *\t\t\t\t\tvalue {AnyObject} - The value to which that property should update.\n\t    \t */\n\t\t\tdispatchPropertyUpdateToWidget(widget: any, args: SelfDispatchPropertyUpdateToWidgetArgs): void;\n\t    \t/**\n\t    \t * May be overriden by scripts that create an UI. This method receives the script's container as its parameter.\n\t    \t * It is the script's responsibility to add their content to the supplied container.\n\t    \t * @param container - The container in which the UI elements should be added.\n\t    \t */\n\t\t\trenderWithContainer(container: $): void;\n\t\t}\n", "FullScreen" : false, "Height" : 48, "Id" : "BMTypescriptHost-12", "Left" : 855, "ResponsiveLayout" : false, "RuntimeProperties" : "[]", "Scope" : "global", "ScrollPosition" : 1, "ShowDataLoading" : true, "Title" : "mtpJsonDef", "Top" : 15, "TranspiledCode" : "\"use strict\";\r\nclass Point {\r\n    constructor(xOrValue, y) {\r\n        if (typeof xOrValue == \"string\") {\r\n            const tokens = xOrValue.split(\",\");\r\n            if (tokens.length < 2) {\r\n                throw \"We need two points to create a mxPoint\";\r\n            }\r\n            this.x = parseFloat(tokens[0]);\r\n            this.y = parseFloat(tokens[1]);\r\n        }\r\n        else {\r\n            this.x = xOrValue;\r\n            this.y = y;\r\n        }\r\n    }\r\n    equals(otherPoint) {\r\n        return this.x == otherPoint.x && this.y == otherPoint.y;\r\n    }\r\n}\r\nfunction isNozzle(object) {\r\n    return 'type' in object && object.type == ElementType.NOZZLE;\r\n}\r\nvar ElementType;\r\n(function (ElementType) {\r\n    ElementType[\"PIPE\"] = \"Pipe\";\r\n    ElementType[\"NOZZLE\"] = \"Nozzle\";\r\n    ElementType[\"VISUAL_ELEMENT\"] = \"VisualElement\";\r\n    ElementType[\"COMMUNICATION_INTERFACE\"] = \"CommunicationInterface\";\r\n    ElementType[\"COMMUNICATION_OBJECT\"] = \"CommunicationObject\";\r\n})(ElementType || (ElementType = {}));\r\nwindow[\"Point\"] = Point;\r\nwindow[\"ElementType\"] = ElementType;\r\nwindow[\"isNozzle\"] = isNozzle;\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIjkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQU1BO0lBTUksWUFBWSxRQUF5QixFQUFFLENBQVU7UUFDN0MsSUFBRyxPQUFPLFFBQVEsSUFBSSxRQUFRLEVBQUU7WUFDNUIsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNuQyxJQUFJLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUNuQixNQUFNLHdDQUF3QyxDQUFBO2FBQ2pEO1lBQ0QsSUFBSSxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDOUIsSUFBSSxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7U0FDakM7YUFBTTtZQUNILElBQUksQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDO1lBQ2xCLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBVyxDQUFDO1NBQ3hCO0lBQ0wsQ0FBQztJQUVELE1BQU0sQ0FBQyxVQUFrQjtRQUNyQixPQUFPLElBQUksQ0FBQyxDQUFDLElBQUksVUFBVSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxDQUFDLENBQUM7SUFDNUQsQ0FBQztDQUNKO0FBRUQsa0JBQWtCLE1BQXVCO0lBQ3JDLE9BQU8sTUFBTSxJQUFJLE1BQU0sSUFBSSxNQUFNLENBQUMsSUFBSSxJQUFJLFdBQVcsQ0FBQyxNQUFNLENBQUM7QUFDakUsQ0FBQztBQVFELElBQUssV0FNSjtBQU5ELFdBQUssV0FBVztJQUNaLDRCQUFhLENBQUE7SUFDYixnQ0FBaUIsQ0FBQTtJQUNqQiwrQ0FBZ0MsQ0FBQTtJQUNoQyxpRUFBa0QsQ0FBQTtJQUNsRCwyREFBNEMsQ0FBQTtBQUNoRCxDQUFDLEVBTkksV0FBVyxLQUFYLFdBQVcsUUFNZjtBQStERCxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsS0FBSyxDQUFDO0FBQ3hCLE1BQU0sQ0FBQyxhQUFhLENBQUMsR0FBRyxXQUFXLENBQUM7QUFDcEMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGRlZmluZXMgdGhlIGludGVybmFsIHN0cnVjdHVyZSBvZiBhIEpTT04gbXRwIGZpbGVcbmludGVyZmFjZSBJUG9pbnQge1xuICAgIHg6IG51bWJlcjtcbiAgICB5OiBudW1iZXI7XG59XG5cbmNsYXNzIFBvaW50IGltcGxlbWVudHMgSVBvaW50IHtcbiAgICB4OiBudW1iZXI7XG4gICAgeTogbnVtYmVyO1xuXG4gICAgY29uc3RydWN0b3IoeDogbnVtYmVyLCB5OiBudW1iZXIpIFxuICAgIGNvbnN0cnVjdG9yKHZhbHVlOiBzdHJpbmcpXG4gICAgY29uc3RydWN0b3IoeE9yVmFsdWU6IG51bWJlciB8IHN0cmluZywgeT86IG51bWJlcikge1xuICAgICAgICBpZih0eXBlb2YgeE9yVmFsdWUgPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgY29uc3QgdG9rZW5zID0geE9yVmFsdWUuc3BsaXQoXCIsXCIpO1xuICAgICAgICAgICAgaWYgKHRva2Vucy5sZW5ndGggPCAyKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgXCJXZSBuZWVkIHR3byBwb2ludHMgdG8gY3JlYXRlIGEgbXhQb2ludFwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnggPSBwYXJzZUZsb2F0KHRva2Vuc1swXSlcbiAgICAgICAgICAgIHRoaXMueSA9IHBhcnNlRmxvYXQodG9rZW5zWzFdKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy54ID0geE9yVmFsdWU7XG4gICAgICAgICAgICB0aGlzLnkgPSB5IGFzIG51bWJlcjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGVxdWFscyhvdGhlclBvaW50OiBJUG9pbnQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMueCA9PSBvdGhlclBvaW50LnggJiYgdGhpcy55ID09IG90aGVyUG9pbnQueTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGlzTm96emxlKG9iamVjdDogSVBvaW50IHwgTm96emxlKTogb2JqZWN0IGlzIE5venpsZSB7XG4gICAgcmV0dXJuICd0eXBlJyBpbiBvYmplY3QgJiYgb2JqZWN0LnR5cGUgPT0gRWxlbWVudFR5cGUuTk9aWkxFO1xufVxuXG5pbnRlcmZhY2UgU2hhcGUgZXh0ZW5kcyBJUG9pbnQge1xuICAgIHdpZHRoOiBudW1iZXI7XG4gICAgaGVpZ2h0OiBudW1iZXI7XG4gICAgcm90YXRpb246IG51bWJlcjtcbn1cblxuZW51bSBFbGVtZW50VHlwZSB7XG4gICAgUElQRSA9IFwiUGlwZVwiLCBcbiAgICBOT1paTEUgPSBcIk5venpsZVwiLFxuICAgIFZJU1VBTF9FTEVNRU5UID0gXCJWaXN1YWxFbGVtZW50XCIsIFxuICAgIENPTU1VTklDQVRJT05fSU5URVJGQUNFID0gXCJDb21tdW5pY2F0aW9uSW50ZXJmYWNlXCIsIFxuICAgIENPTU1VTklDQVRJT05fT0JKRUNUID0gXCJDb21tdW5pY2F0aW9uT2JqZWN0XCJcbn1cblxuaW50ZXJmYWNlIEdlbmVyaWNNcHRFbGVtZW50IHtcbiAgICBpZDogc3RyaW5nO1xuICAgIG5hbWU6IHN0cmluZztcbiAgICB0eXBlOiBFbGVtZW50VHlwZTtcbn1cblxuaW50ZXJmYWNlIFBvc2l0aW9uYWJsZUVsZW1lbnQgZXh0ZW5kcyBJUG9pbnQge1xuICAgIC8vIGVtcHR5XG59XG5cbmludGVyZmFjZSBOb3p6bGUgZXh0ZW5kcyBHZW5lcmljTXB0RWxlbWVudCwgUG9zaXRpb25hYmxlRWxlbWVudCB7XG4gICAgZXh0ZXJuYWxDb25uZWN0b3JJZDogc3RyaW5nO1xuICAgIGJhc2VDbGFzczogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgVmlzdWFsT2JqZWN0IGV4dGVuZHMgU2hhcGUsIEdlbmVyaWNNcHRFbGVtZW50IHtcbiAgICB2aWV3VHlwZTogc3RyaW5nO1xuICAgIGVDbGFzc1ZlcnNpb246IHN0cmluZztcbiAgICBlQ2xhc3NDbGFzc2lmaWNhdGlvbjogc3RyaW5nO1xuICAgIGVDbGFzc0lyZGk6IHN0cmluZztcbiAgICByZWZJZDogc3RyaW5nO1xuICAgIG5venpsZXM6IE5venpsZVtdO1xuICAgIHN1YkVsZW1lbnQ/OiBTaGFwZTtcbn1cblxuaW50ZXJmYWNlIFBpcGVEZWZpbml0aW9uIGV4dGVuZHMgR2VuZXJpY01wdEVsZW1lbnQge1xuICAgIHNvdXJjZTogSVBvaW50IHwgTm96emxlO1xuICAgIHRhcmdldDogSVBvaW50IHwgTm96emxlO1xuICAgIHdheXBvaW50czogSVBvaW50W107XG4gICAgbm96emxlczogTm96emxlW107XG59XG5cbmludGVyZmFjZSBDb21tdW5pY2F0aW9uSW50ZXJmYWNlIGV4dGVuZHMgR2VuZXJpY01wdEVsZW1lbnQge1xuICAgIGlkZW50aWZpZXI6IHN0cmluZztcbiAgICBuYW1lc3BhY2U6IHN0cmluZztcbiAgICBhY2Nlc3M6IHN0cmluZztcbiAgICBlbmRwb2ludDogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgQ29tbXVuaWNhdGlvbk9iamVjdCBleHRlbmRzIEdlbmVyaWNNcHRFbGVtZW50IHtcbiAgICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICAgIGludGVyZmFjZXM6IENvbW11bmljYXRpb25JbnRlcmZhY2VbXTtcbn1cblxuaW50ZXJmYWNlIEludGVyYWN0aWJsZUVsZW1lbnQge1xuICAgIG9iajogVmlzdWFsT2JqZWN0O1xuICAgIGNvbW11bmljYXRpb24/OiBDb21tdW5pY2F0aW9uT2JqZWN0O1xufVxuXG5pbnRlcmZhY2UgSG1pRGlhZ3JhbSB7XG4gICAgd2lkdGg6IG51bWJlcjtcbiAgICBoZWlnaHQ6IG51bWJlcjtcbiAgICBlbGVtZW50czogSW50ZXJhY3RpYmxlRWxlbWVudFtdO1xuICAgIHBpcGVzOiBQaXBlRGVmaW5pdGlvbltdO1xufVxuXG5pbnRlcmZhY2UgV2luZG93IHtcbiAgICBQb2ludDogdHlwZW9mIFBvaW50XG4gICAgRWxlbWVudFR5cGU6IHR5cGVvZiBFbGVtZW50VHlwZSxcbiAgICBpc05venpsZTogdHlwZW9mIGlzTm96emxlXG59XG53aW5kb3dbXCJQb2ludFwiXSA9IFBvaW50O1xud2luZG93W1wiRWxlbWVudFR5cGVcIl0gPSBFbGVtZW50VHlwZTtcbndpbmRvd1tcImlzTm96emxlXCJdID0gaXNOb3p6bGU7Il19", "Type" : "BMTypescriptHost", "Visible" : true, "Width" : 128, "Z-index" : 10, "__TypeDisplayName" : "TypeScript Object" }, "Widgets" : [ ] }, { "Properties" : { "Area" : "UI", "Code" : "//#import mtpJsonDef from MTPViewerV2\n\n/**\n * A MtpFileParser handles loading a mtp file from the given link,\n * parsing it into an HMIDiagram object\n */\nclass MtpFileParser {\n\n    public async loadFile(filePath: string): Promise<HmiDiagram> {\n        try {\n            const response = await fetch(filePath);\n            const responseText = await response.text();\n            const xmlData = new DOMParser().parseFromString(responseText, \"text/xml\");\n            return this.parseMtpXml(xmlData);\n        } catch (e) {\n            console.error(\"Failed to load MTP\")\n            throw e;\n        }\n    }\n\n    private parseMtpXml(file: Document): HmiDiagram {\n        let diagram: HmiDiagram = {\n            pipes: [],\n            elements: [],\n            width: 0,\n            height: 0\n        };\n\n        // find a referece to the diagram object\n        const hmiDiagramXml = file.querySelector('InstanceHierarchy[Name=\"HMI\"] InternalElement[Name=\"Visu_Main\"]');\n        if (!hmiDiagramXml) {\n            throw \"No hmi diagram found in given file\"\n        }\n        diagram.width = this.getAttributeTagValue(hmiDiagramXml, \"Width\", true);\n        diagram.height = this.getAttributeTagValue(hmiDiagramXml, \"Height\", true);\n\n        // iterate through the internal elements of the diagram and add them to the diagram\n        for (let i = 0; i < hmiDiagramXml.childElementCount; i++) {\n            const element = hmiDiagramXml.children[i] as Element;\n            if (element.nodeName == \"InternalElement\") {\n                this.parseHmiInternalElement(element, diagram, file);\n            }\n        }\n\n        return diagram;\n    }\n\n    private parseHmiInternalElement(element: Element, diagram: HmiDiagram, file: Document) {\n        // if there is a attribute with an edge path, assume it's a line\n        if (this.getAttributeTagValue(element, \"Edgepath\", false)) {\n            this.parseHmiPipe(element, diagram);\n        } else if (this.getAttributeTagValue(element, \"eClassClassificationClass\", false)) {\n            this.parseDiagramElement(element, diagram, file);\n        }\n    }\n\n    private parseDiagramElement(element: Element, diagram: HmiDiagram, file: Document) {\n        let nozzles = this.getNozzleList(element);\n        let visualElement: VisualObject = {\n            viewType: this.getAttributeTagValue(element, \"ViewType\", false),\n            eClassVersion: this.getAttributeTagValue(element, \"eClassVersion\", false),\n            eClassClassification: this.getAttributeTagValue(element, \"eClassClassificationClass\", false),\n            eClassIrdi: this.getAttributeTagValue(element, \"eClassIRDI\", false),\n            refId: this.getAttributeTagValue(element, \"RefID\", false),\n            id: element.getAttribute(\"ID\")!,\n            name: element.getAttribute(\"Name\")!,\n            width: this.getAttributeTagValue(element, \"Width\", true),\n            height: this.getAttributeTagValue(element, \"Height\", true),\n            rotation: this.getAttributeTagValue(element, \"Rotation\", true),\n            x: this.getAttributeTagValue(element, \"X\", true),\n            y: this.getAttributeTagValue(element, \"Y\", true),\n            nozzles: nozzles,\n            type: ElementType.VISUAL_ELEMENT\n        };\n        // find the elements that are real nozzles \n        let realNozzles = nozzles.filter((el) => { return el.baseClass == \"MTPHMISUCLib/PortObject/Nozzle\" });\n        if (realNozzles.length == 2) {\n            // we will assume that the subelement will be positioned between this two realNozzles\n            visualElement.subElement = {\n                x: Math.min(realNozzles[0].x, realNozzles[1].x),\n                y: Math.min(realNozzles[0].y, realNozzles[1].y),\n                height: realNozzles[0].y < realNozzles[1].y ? realNozzles[1].y - realNozzles[0].y : realNozzles[0].y - realNozzles[1].y,\n                width: Math.sqrt((realNozzles[0].x - realNozzles[1].x) ** 2 + (realNozzles[0].y - realNozzles[1].y) ** 2),\n                rotation: visualElement.rotation            // inherit the rotation from the parent\n            };\n\n            // TODO: decide on when the height or width will be 0\n            if (visualElement.subElement.height < 1) {\n                visualElement.subElement.height = 10;\n            }\n            if (visualElement.subElement.width < 1) {\n                visualElement.subElement.width = 10;\n            }\n        }\n\n        // we need to now search for the communication\n        let communicationElementAttr = file.evaluate(`//InstanceHierarchy[@Name=\"ModuleTypePackage\"]//InternalElement[@Name=\"Communication\"]` +\n            `/InternalElement[@Name=\"InstanceList\"]//Attribute[@Name=\"RefID\"][Value=\"${visualElement.refId}\"]`,\n            file, null, XPathResult.ANY_TYPE, null).iterateNext();\n        let communicationElement = communicationElementAttr ? communicationElementAttr.parentElement : undefined;\n        let communicationObject = undefined;\n        if (communicationElement != null) {\n            let communicationDescription = communicationElement.querySelector(\"Description\")!.textContent!;\n            let interfaceList: CommunicationInterface[] = [];\n            // interate through the attributes and try to get each communication element\n            for (let i = 0; i < communicationElement.childElementCount; i++) {\n                const attrElement = communicationElement.children[i] as Element;\n                if (attrElement.nodeName == \"Attribute\" && attrElement.getAttribute(\"Node\") != \"RefID\") {\n                    let attrValue = attrElement.getElementsByTagName(\"Value\")[0].textContent;\n                    // search for this attribute in the communication lib\n                    let sourceCommunicationElement = file.querySelector(`InstanceHierarchy[Name=\"ModuleTypePackage\"] InternalElement[Name=\"Communication\"] ` +\n                        `InternalElement[Name=\"SourceList\"]  ExternalInterface[ID=\"${attrValue}\"]`);\n                    if (sourceCommunicationElement) {\n                        interfaceList.push({\n                            access: this.getAttributeTagValue(sourceCommunicationElement, \"Access\", false),\n                            identifier: this.getAttributeTagValue(sourceCommunicationElement, \"Identifier\", false),\n                            namespace: this.getAttributeTagValue(sourceCommunicationElement, \"Namespace\", false),\n                            type: ElementType.COMMUNICATION_INTERFACE,\n                            id: sourceCommunicationElement.getAttribute(\"ID\")!,\n                            name: attrElement.getAttribute(\"Name\")!,\n                            endpoint: this.getAttributeTagValue(sourceCommunicationElement.parentElement!, \"Endpoint\", false)\n                        })\n                    }\n                }\n            }\n            communicationObject = {\n                description: communicationDescription,\n                interfaces: interfaceList,\n                type: ElementType.COMMUNICATION_OBJECT,\n                id: communicationElement.getAttribute(\"ID\")!,\n                name: communicationElement.getAttribute(\"Name\")!\n            }\n        }\n        if (communicationObject) {\n            diagram.elements.push({ communication: communicationObject, obj: visualElement });\n        } else {\n            diagram.elements.push({ obj: visualElement });\n        }\n    }\n\n    private parseHmiPipe(element: Element, diagram: HmiDiagram) {\n        let pipe: PipeDefinition = <PipeDefinition>{\n            id: element.getAttribute(\"ID\"),\n            name: element.getAttribute(\"Name\"),\n            type: ElementType.PIPE\n        };\n        // get the parsed path\n        let parsedPath = this.parseEdgePath(this.getAttributeTagValue(element, \"Edgepath\", false));\n        // parse the nozzles\n        pipe.nozzles = this.getNozzleList(element);\n        // check to see if the the source and target points form the path are equal to a nozzle\n        for (const nozzle of pipe.nozzles) {\n            if (parsedPath.source.equals(nozzle)) {\n                pipe.source = nozzle;\n            }\n            if (parsedPath.target.equals(nozzle)) {\n                pipe.target = nozzle;\n            }\n        }\n        // check if the soruce and target were assigned\n        if (!pipe.source) {\n            pipe.source = parsedPath.source;\n        }\n        if (!pipe.target) {\n            pipe.target = parsedPath.target;\n        }\n        pipe.waypoints = parsedPath.waypoints;\n        diagram.pipes.push(pipe);\n    }\n\n    private getNozzleList(element: Element): Nozzle[] {\n        let nozzles: Nozzle[] = [];\n        for (let j = 0; j < element.childElementCount; j++) {\n            const subElement = element.children[j] as Element;\n            if (subElement.nodeName == \"InternalElement\") {\n                nozzles.push({\n                    id: subElement.getAttribute(\"ID\")!,\n                    name: subElement.getAttribute(\"Name\")!,\n                    x: this.getAttributeTagValue(subElement, \"X\", true),\n                    y: this.getAttributeTagValue(subElement, \"Y\", true),\n                    externalConnectorId: element.querySelector('ExternalInterface[Name=\"Connector\"]')!.getAttribute(\"ID\")!,\n                    baseClass: subElement.getAttribute(\"RefBaseSystemUnitPath\")!,\n                    type: ElementType.NOZZLE\n                })\n            }\n        }\n        return nozzles;\n    }\n\n\n    /**\n     * Computes a list of points into a start, end and intermidiate points\n     */\n    private parseEdgePath(edgePath: string): { source: Point, target: Point, waypoints: Point[] } {\n        let tokens = edgePath.split(\";\");\n        return {\n            source: new Point(tokens[0]),\n            target: new Point(tokens[tokens.length - 1]),\n            waypoints: tokens.slice(1, -1).map((el) => { return new Point(el) })\n        }\n    }\n\n    private getAttributeTagValue(parent: Element, attrName: string, asNumber: true): number;\n    private getAttributeTagValue(parent: Element, attrName: string, asNumber: false): string;\n\n    /**\n     * XML parsing fucntion, helping getting the Value tag of a Attribute tag identified by the attrName\n     */\n    private getAttributeTagValue(parent: Element, attrName: string, asNumber: boolean): number | string | undefined | null {\n        let value = parent.querySelector(`Attribute[Name=\"${attrName}\"] > Value`);\n        if (value) {\n            if (asNumber && value.textContent) {\n                return parseFloat(value.textContent);\n            } else {\n                return value.textContent;\n            }\n        }\n    }\n}\n\ninterface Window {\n    MtpFileParser: typeof MtpFileParser\n}\nwindow[\"MtpFileParser\"] = MtpFileParser;", "ColumnPosition" : 25, "DirectLinkUUID" : "", "DisplayName" : "BMTypescriptHost-13", "Exports" : "interface mptFileParser extends TWRuntimeWidget {\t    \t/**\t    \t * Should be invoked to dispatch an event to the Thingworx runtime, causing all actions bound to that event to execute.\n\t    \t * @param event - The name of the event to dispatch.\n\t    \t */\n\t\t\tdispatchEvent(event: string): void;\n\t    \t/**\n\t    \t * Invoked after any property has been updated as a result of a binding.\n\t    \t * This method will be invoked after the specific ..DidUpdateToValue method is invoked.\n\t    \t * Scripts can override this method to react to all property updates.\n\t    \t * @param event - The name of the event to dispatch.\n\t    \t */\n\t\t\tpropertyDidUpdateToValue(property: string, value: any | undefined): void;\n\t    \t/**\n\t    \t * Finds and returns the widget with the given name in the current mashup.\n\t    \t * @param name - The DisplayName of the widget to find.\n\t    \t * @return - The widget object if it was found, undefined otherwise.\n\t    \t */\n\t\t\twidgetNamed(name: string): TWRuntimeWidget | undefined;\n\t    \t/**\n\t    \t * Sends a property update to the given widget as if it came from a binding.\n\t    \t * Supported properties may be updated this way even if they are not bound to anything in the composer.\n\t    \t * @param widget - The widget object whose property should be updated.\n\t    \t * @param args - An object containing additional arguments. This object must have the following properties:\n\t    \t *\t\t\t\t\tforProperty {String} - The name of the property to update.\n\t    \t *\t\t\t\t\tvalue {AnyObject} - The value to which that property should update.\n\t    \t */\n\t\t\tdispatchPropertyUpdateToWidget(widget: any, args: SelfDispatchPropertyUpdateToWidgetArgs): void;\n\t    \t/**\n\t    \t * May be overriden by scripts that create an UI. This method receives the script's container as its parameter.\n\t    \t * It is the script's responsibility to add their content to the supplied container.\n\t    \t * @param container - The container in which the UI elements should be added.\n\t    \t */\n\t\t\trenderWithContainer(container: $): void;\n\t\t}\n", "FullScreen" : true, "Height" : 46, "Id" : "BMTypescriptHost-13", "Left" : 685, "ResponsiveLayout" : false, "RuntimeProperties" : "[]", "Scope" : "global", "ScrollPosition" : 82, "ShowDataLoading" : true, "Title" : "mptFileParser", "Top" : 15, "TranspiledCode" : "\"use strict\";\r\n//#import mtpJsonDef from MTPViewerV2\r\n/**\r\n * A MtpFileParser handles loading a mtp file from the given link,\r\n * parsing it into an HMIDiagram object\r\n */\r\nclass MtpFileParser {\r\n    async loadFile(filePath) {\r\n        try {\r\n            const response = await fetch(filePath);\r\n            const responseText = await response.text();\r\n            const xmlData = new DOMParser().parseFromString(responseText, \"text/xml\");\r\n            return this.parseMtpXml(xmlData);\r\n        }\r\n        catch (e) {\r\n            console.error(\"Failed to load MTP\");\r\n            throw e;\r\n        }\r\n    }\r\n    parseMtpXml(file) {\r\n        let diagram = {\r\n            pipes: [],\r\n            elements: [],\r\n            width: 0,\r\n            height: 0\r\n        };\r\n        // find a referece to the diagram object\r\n        const hmiDiagramXml = file.querySelector('InstanceHierarchy[Name=\"HMI\"] InternalElement[Name=\"Visu_Main\"]');\r\n        if (!hmiDiagramXml) {\r\n            throw \"No hmi diagram found in given file\";\r\n        }\r\n        diagram.width = this.getAttributeTagValue(hmiDiagramXml, \"Width\", true);\r\n        diagram.height = this.getAttributeTagValue(hmiDiagramXml, \"Height\", true);\r\n        // iterate through the internal elements of the diagram and add them to the diagram\r\n        for (let i = 0; i < hmiDiagramXml.childElementCount; i++) {\r\n            const element = hmiDiagramXml.children[i];\r\n            if (element.nodeName == \"InternalElement\") {\r\n                this.parseHmiInternalElement(element, diagram, file);\r\n            }\r\n        }\r\n        return diagram;\r\n    }\r\n    parseHmiInternalElement(element, diagram, file) {\r\n        // if there is a attribute with an edge path, assume it's a line\r\n        if (this.getAttributeTagValue(element, \"Edgepath\", false)) {\r\n            this.parseHmiPipe(element, diagram);\r\n        }\r\n        else if (this.getAttributeTagValue(element, \"eClassClassificationClass\", false)) {\r\n            this.parseDiagramElement(element, diagram, file);\r\n        }\r\n    }\r\n    parseDiagramElement(element, diagram, file) {\r\n        let nozzles = this.getNozzleList(element);\r\n        let visualElement = {\r\n            viewType: this.getAttributeTagValue(element, \"ViewType\", false),\r\n            eClassVersion: this.getAttributeTagValue(element, \"eClassVersion\", false),\r\n            eClassClassification: this.getAttributeTagValue(element, \"eClassClassificationClass\", false),\r\n            eClassIrdi: this.getAttributeTagValue(element, \"eClassIRDI\", false),\r\n            refId: this.getAttributeTagValue(element, \"RefID\", false),\r\n            id: element.getAttribute(\"ID\"),\r\n            name: element.getAttribute(\"Name\"),\r\n            width: this.getAttributeTagValue(element, \"Width\", true),\r\n            height: this.getAttributeTagValue(element, \"Height\", true),\r\n            rotation: this.getAttributeTagValue(element, \"Rotation\", true),\r\n            x: this.getAttributeTagValue(element, \"X\", true),\r\n            y: this.getAttributeTagValue(element, \"Y\", true),\r\n            nozzles: nozzles,\r\n            type: ElementType.VISUAL_ELEMENT\r\n        };\r\n        // find the elements that are real nozzles \r\n        let realNozzles = nozzles.filter((el) => { return el.baseClass == \"MTPHMISUCLib/PortObject/Nozzle\"; });\r\n        if (realNozzles.length == 2) {\r\n            // we will assume that the subelement will be positioned between this two realNozzles\r\n            visualElement.subElement = {\r\n                x: Math.min(realNozzles[0].x, realNozzles[1].x),\r\n                y: Math.min(realNozzles[0].y, realNozzles[1].y),\r\n                height: realNozzles[0].y < realNozzles[1].y ? realNozzles[1].y - realNozzles[0].y : realNozzles[0].y - realNozzles[1].y,\r\n                width: Math.sqrt((realNozzles[0].x - realNozzles[1].x) ** 2 + (realNozzles[0].y - realNozzles[1].y) ** 2),\r\n                rotation: visualElement.rotation // inherit the rotation from the parent\r\n            };\r\n            // TODO: decide on when the height or width will be 0\r\n            if (visualElement.subElement.height < 1) {\r\n                visualElement.subElement.height = 10;\r\n            }\r\n            if (visualElement.subElement.width < 1) {\r\n                visualElement.subElement.width = 10;\r\n            }\r\n        }\r\n        // we need to now search for the communication\r\n        let communicationElementAttr = file.evaluate(`//InstanceHierarchy[@Name=\"ModuleTypePackage\"]//InternalElement[@Name=\"Communication\"]` +\r\n            `/InternalElement[@Name=\"InstanceList\"]//Attribute[@Name=\"RefID\"][Value=\"${visualElement.refId}\"]`, file, null, XPathResult.ANY_TYPE, null).iterateNext();\r\n        let communicationElement = communicationElementAttr ? communicationElementAttr.parentElement : undefined;\r\n        let communicationObject = undefined;\r\n        if (communicationElement != null) {\r\n            let communicationDescription = communicationElement.querySelector(\"Description\").textContent;\r\n            let interfaceList = [];\r\n            // interate through the attributes and try to get each communication element\r\n            for (let i = 0; i < communicationElement.childElementCount; i++) {\r\n                const attrElement = communicationElement.children[i];\r\n                if (attrElement.nodeName == \"Attribute\" && attrElement.getAttribute(\"Node\") != \"RefID\") {\r\n                    let attrValue = attrElement.getElementsByTagName(\"Value\")[0].textContent;\r\n                    // search for this attribute in the communication lib\r\n                    let sourceCommunicationElement = file.querySelector(`InstanceHierarchy[Name=\"ModuleTypePackage\"] InternalElement[Name=\"Communication\"] ` +\r\n                        `InternalElement[Name=\"SourceList\"]  ExternalInterface[ID=\"${attrValue}\"]`);\r\n                    if (sourceCommunicationElement) {\r\n                        interfaceList.push({\r\n                            access: this.getAttributeTagValue(sourceCommunicationElement, \"Access\", false),\r\n                            identifier: this.getAttributeTagValue(sourceCommunicationElement, \"Identifier\", false),\r\n                            namespace: this.getAttributeTagValue(sourceCommunicationElement, \"Namespace\", false),\r\n                            type: ElementType.COMMUNICATION_INTERFACE,\r\n                            id: sourceCommunicationElement.getAttribute(\"ID\"),\r\n                            name: attrElement.getAttribute(\"Name\"),\r\n                            endpoint: this.getAttributeTagValue(sourceCommunicationElement.parentElement, \"Endpoint\", false)\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            communicationObject = {\r\n                description: communicationDescription,\r\n                interfaces: interfaceList,\r\n                type: ElementType.COMMUNICATION_OBJECT,\r\n                id: communicationElement.getAttribute(\"ID\"),\r\n                name: communicationElement.getAttribute(\"Name\")\r\n            };\r\n        }\r\n        if (communicationObject) {\r\n            diagram.elements.push({ communication: communicationObject, obj: visualElement });\r\n        }\r\n        else {\r\n            diagram.elements.push({ obj: visualElement });\r\n        }\r\n    }\r\n    parseHmiPipe(element, diagram) {\r\n        let pipe = {\r\n            id: element.getAttribute(\"ID\"),\r\n            name: element.getAttribute(\"Name\"),\r\n            type: ElementType.PIPE\r\n        };\r\n        // get the parsed path\r\n        let parsedPath = this.parseEdgePath(this.getAttributeTagValue(element, \"Edgepath\", false));\r\n        // parse the nozzles\r\n        pipe.nozzles = this.getNozzleList(element);\r\n        // check to see if the the source and target points form the path are equal to a nozzle\r\n        for (const nozzle of pipe.nozzles) {\r\n            if (parsedPath.source.equals(nozzle)) {\r\n                pipe.source = nozzle;\r\n            }\r\n            if (parsedPath.target.equals(nozzle)) {\r\n                pipe.target = nozzle;\r\n            }\r\n        }\r\n        // check if the soruce and target were assigned\r\n        if (!pipe.source) {\r\n            pipe.source = parsedPath.source;\r\n        }\r\n        if (!pipe.target) {\r\n            pipe.target = parsedPath.target;\r\n        }\r\n        pipe.waypoints = parsedPath.waypoints;\r\n        diagram.pipes.push(pipe);\r\n    }\r\n    getNozzleList(element) {\r\n        let nozzles = [];\r\n        for (let j = 0; j < element.childElementCount; j++) {\r\n            const subElement = element.children[j];\r\n            if (subElement.nodeName == \"InternalElement\") {\r\n                nozzles.push({\r\n                    id: subElement.getAttribute(\"ID\"),\r\n                    name: subElement.getAttribute(\"Name\"),\r\n                    x: this.getAttributeTagValue(subElement, \"X\", true),\r\n                    y: this.getAttributeTagValue(subElement, \"Y\", true),\r\n                    externalConnectorId: element.querySelector('ExternalInterface[Name=\"Connector\"]').getAttribute(\"ID\"),\r\n                    baseClass: subElement.getAttribute(\"RefBaseSystemUnitPath\"),\r\n                    type: ElementType.NOZZLE\r\n                });\r\n            }\r\n        }\r\n        return nozzles;\r\n    }\r\n    /**\r\n     * Computes a list of points into a start, end and intermidiate points\r\n     */\r\n    parseEdgePath(edgePath) {\r\n        let tokens = edgePath.split(\";\");\r\n        return {\r\n            source: new Point(tokens[0]),\r\n            target: new Point(tokens[tokens.length - 1]),\r\n            waypoints: tokens.slice(1, -1).map((el) => { return new Point(el); })\r\n        };\r\n    }\r\n    /**\r\n     * XML parsing fucntion, helping getting the Value tag of a Attribute tag identified by the attrName\r\n     */\r\n    getAttributeTagValue(parent, attrName, asNumber) {\r\n        let value = parent.querySelector(`Attribute[Name=\"${attrName}\"] > Value`);\r\n        if (value) {\r\n            if (asNumber && value.textContent) {\r\n                return parseFloat(value.textContent);\r\n            }\r\n            else {\r\n                return value.textContent;\r\n            }\r\n        }\r\n    }\r\n}\r\nwindow[\"MtpFileParser\"] = MtpFileParser;\r\n//# sourceMappingURL=data:application/json;base64,", "Type" : "BMTypescriptHost", "Visible" : true, "Width" : 144, "Z-index" : 10, "__TypeDisplayName" : "TypeScript Object" }, "Widgets" : [ ] }, { "Properties" : { "Area" : "UI", "Code" : "//#import mtpJsonDef from MTPViewerV2\n\nconst NOZZLE_WIDTH = 5;\nconst NOZZLE_HEIGHT = 5;\nconst STENCIL_PATH = \"/mtp/stencils/\";\nconst STENCIL_LIST = ['agitators.xml', 'apparatus_elements.xml', 'agitators.xml', 'centrifuges.xml', 'compressors.xml',\n    'compressors_iso.xml', 'crushers_grinding.xml', 'driers.xml', 'engines.xml', 'feeders.xml', 'filters.xml', 'fittings.xml',\n    'flow_sensors.xml', 'heat_exchangers.xml', 'instruments.xml', 'misc.xml', 'mixers.xml', 'piping.xml', 'feeders.xml', 'feeders.xml',\n    'pumps.xml', 'pumps_din.xml', 'pumps_iso.xml', 'separators.xml', 'shaping_machines.xml', 'valves.xml', 'vessels.xml'];\n\n/**\n * A MtpFileLoader handles loading a mtp file from the given link, \n * parsing it into an mxgraph graph object and retring it.\n */\nclass MtpJsonToMxGraph {\n    private mxgraph: any;\n    private container: HTMLElement;\n    private shapeMap: { [key: string]: string };\n    /**\n     *  Intializes the MtpFileLoader with the mxgraph namespace\n     */\n    constructor(mxGraphNamespace: any, container: HTMLElement, shapeMap: { [key: string]: string }) {\n        this.mxgraph = mxGraphNamespace;\n        this.container = container;\n        // load all the stencils\n        this.loadStencilFiles(STENCIL_LIST.map((el) => { return STENCIL_PATH + el }));\n        this.shapeMap = shapeMap;\n    }\n\n    public drawMpt(mtpDiagram: HmiDiagram): any {\n        try {\n            \n            let graph = this.initGraph(new this.mxgraph.mxGraph(this.container));\n            // draw the pipes\n            this.drawPipes(graph, graph.getDefaultParent(), mtpDiagram.pipes);\n            // draw the elements\n            this.drawElements(graph, graph.getDefaultParent(), mtpDiagram.elements);\n\n            return graph;\n        } catch (e) {\n            console.error(\"Failed to draw mxgraph for MTP\")\n            throw e;\n        }\n    }\n\n    private drawElements(graph: any, parent: any, elements: InteractibleElement[]) {\n        for (const element of elements) {\n            if (element.obj.subElement) {\n                // draw the element first (container then the subelement)\n                // depending on the rotation of the element we need to offset it across that axis\n                let elementOffsetX = element.obj.subElement.height / 2 * Math.abs(Math.sin(element.obj.rotation * Math.PI / 180));\n                let elementOffsetY = NOZZLE_HEIGHT * Math.abs(Math.cos(element.obj.rotation * Math.PI / 180));\n                graph.insertVertex(parent, element.obj.id, element.obj.name, element.obj.subElement.x - elementOffsetX, element.obj.subElement.y - elementOffsetY,\n                    element.obj.subElement.width, element.obj.subElement.height, `element;shape=${this.shapeMap[element.obj.eClassClassification]};rotation=${element.obj.rotation}`);\n            } else {\n                // if we don't have a subelement, draw the visual object directly\n                graph.insertVertex(parent, element.obj.id, element.obj.name, element.obj.x, element.obj.y,\n                    element.obj.width, element.obj.height, `element;shape=${this.shapeMap[element.obj.eClassClassification]}`);\n            }\n            if (element.communication) {\n                // draw the parent first \n                let elParent = graph.insertVertex(parent, element.communication.id, element.communication.name, element.obj.x, element.obj.y,\n                    element.obj.width, element.obj.height, \"swimlane;childLayout=stackLayout;horizontal=1;startSize=26;horizontalStack=0;resizeParent=1;collapsible=1;resizeParentMax=0;resizeLast=0;\");\n                elParent.collapsed = true;\n                // if we have communication elements, draw them in the container\n                for (const commInterface of element.communication.interfaces) {\n                    let value = document.createElement(\"Value\");\n                    value.setAttribute('label', commInterface.name);\n                    let cell = graph.insertVertex(elParent, commInterface.id, value, 0, 0, element.obj.width, 20, \"interfaceValue\");\n                }\n            }\n        }\n    }\n\n    private drawPipes(graph: any, parent: any, pipes: PipeDefinition[]) {\n        for (const pipe of pipes) {\n            // keep a map of the nozzles\n            let nozzleMap: { [key: string]: any } = {};\n            // draw the nozzles first, then the pipe itself\n            for (const nozzle of pipe.nozzles) {\n                nozzleMap[nozzle.id] = graph.insertVertex(parent, nozzle.id, nozzle.name,\n                    nozzle.x - NOZZLE_WIDTH / 2, nozzle.y - NOZZLE_HEIGHT / 2, NOZZLE_WIDTH, NOZZLE_HEIGHT, nozzle.type);\n            }\n            // draw the pipe itself, but make sure that it's either connected to a nozzle or to a point\n            let edge = new this.mxgraph.mxCell(pipe.name, new this.mxgraph.mxGeometry(), pipe.type);\n            edge.setId(pipe.id);\n            edge.setEdge(true);\n            edge.geometry.relative = true;\n            // set the  waypoints\n            edge.geometry.points = pipe.waypoints.map((point) => { return new this.mxgraph.mxPoint(point.x, point.y) });\n            // soruce and target point to the vertex or to nothing\n            let source = undefined;\n            let target = undefined;\n            if (isNozzle(pipe.source)) {\n                source = nozzleMap[pipe.source.id];\n            } else {\n                // set the starting point a a point\n                edge.geometry.sourcePoint = new this.mxgraph.mxPoint(pipe.source.x, pipe.source.y);\n            }\n            if (isNozzle(pipe.target)) {\n                target = nozzleMap[pipe.target.id];\n            } else {\n                // set the target point a a point\n                edge.geometry.targetPoint = new this.mxgraph.mxPoint(pipe.target.x, pipe.target.y);\n            }\n            graph.addEdge(edge, parent, source, target);\n        }\n    }\n\n    public initGraph(graph: any): any {\n        // Allow panning using the right click buttion\n        graph.setPanning(true);\n        // enable the display of tooltips\n        graph.setTooltips(true);\n        // disable new connections and cloning cells, as well as drag and drop outside\n        graph.setConnectable(false);\n        graph.setCellsCloneable(true);\n        graph.setCellsDeletable(true);\n        graph.setDropEnabled(true);\n        graph.setSplitEnabled(false);\n        graph.resetEdgesOnConnect = false;\n\n        this.declareMxGraphStyles(graph);\n        graph.getModel().prefix = \"autoGenerated\";\n\n        graph.getLabel = function (cell: any) {\n            if (cell) {\n                // get the name of style\n                let cellStyle = cell.style ? (cell.style.split(\";\") ? cell.style.split(\";\")[0] : cell.style) : undefined;\n                if (cellStyle == \"interfaceValue\") {\n                    return `${cell.getAttribute(\"label\")}: ${cell.getAttribute(\"value\", \"N/A\")}`;\n                } else if (cellStyle == \"Nozzle\") {\n                    return \"\";\n                } else if (cellStyle == \"element\") {\n                    return \"\";\n                } else if (cell.edge) {\n                    return \"\"\n                } else {\n                    return cell.value;\n                }\n            }\n        }\n\n        let layout = new this.mxgraph.mxStackLayout(graph, true);\n        layout.resizeParent = true;\n        layout.horizontal = false;\n        layout.spacing = 2;\n        let layoutMgr = new this.mxgraph.mxLayoutManager(graph);\n        layoutMgr.getLayout = function (cell: any) {\n            let cellStyle = cell.style ? (cell.style.split(\";\") ? cell.style.split(\";\")[0] : cell.style) : undefined;\n            if (cellStyle == \"swimlane\") {\n                return layout;\n            }\n\n            return null;\n        };\n\n        return graph;\n    }\n\n    /**\n     * Creates the generic styles for elements\n     */\n    private declareMxGraphStyles(graph: any) {\n        let style = graph.getStylesheet().getDefaultVertexStyle();\n        style[this.mxgraph.mxConstants.STYLE_ROUNDED] = false;\n        style[this.mxgraph.mxConstants.STYLE_FONTCOLOR] = '#1d1b1b';\n        style[this.mxgraph.mxConstants.STYLE_STROKECOLOR] = '#9673A6';\n        style[this.mxgraph.mxConstants.STYLE_FILLCOLOR] = '#f3f4f9';\n\n\n        style = this.mxgraph.mxUtils.clone(style);\n        style[this.mxgraph.mxConstants.STYLE_SHAPE] = 'swimlane';\n        style[this.mxgraph.mxConstants.STYLE_STARTSIZE] = 20;\n        graph.getStylesheet().putCellStyle('swimlane', style);\n\n        style = [];\n        style[this.mxgraph.mxConstants.STYLE_STROKECOLOR] = 'red';\n        style[this.mxgraph.mxConstants.STYLE_SHAPE] = \"ellipse\";\n        graph.getStylesheet().putCellStyle('Nozzle', style);\n\n        style = [];\n        style[this.mxgraph.mxConstants.STYLE_FILLCOLOR] = 'none';\n        style[this.mxgraph.mxConstants.STYLE_STROKECOLOR] = 'none';\n        graph.getStylesheet().putCellStyle('interfaceValue', style);\n\n        style = graph.getStylesheet().getDefaultEdgeStyle();\n        style[this.mxgraph.mxConstants.STYLE_ENDARROW] = 'none';\n        style[this.mxgraph.mxConstants.STYLE_STROKEWIDTH] = 2;\n    }\n    /**\n     * Loads the stencil files for pid diagrams\n     */\n    private loadStencilFiles(files: string[]) {\n        for (const filePath of files) {\n            let req = this.mxgraph.mxUtils.load(filePath);\n            let root = req.getDocumentElement();\n            let prefix = root.getAttribute(\"name\");\n            let shape = root.firstChild;\n\n            while (shape != null) {\n                if (shape.nodeType == this.mxgraph.mxConstants.NODETYPE_ELEMENT) {\n                    let name = prefix + '.' + shape.getAttribute('name').replace(/ /g, '_');\n                    this.mxgraph.mxStencilRegistry.addStencil(name.toLowerCase(), new this.mxgraph.mxStencil(shape));\n                }\n                shape = shape.nextSibling;\n            }\n        }\n    }\n}\ninterface Window {\n    MtpJsonToMxGraph: typeof MtpJsonToMxGraph\n}\nwindow[\"MtpJsonToMxGraph\"] = MtpJsonToMxGraph;", "ColumnPosition" : 1, "DirectLinkUUID" : "", "DisplayName" : "BMTypescriptHost-14", "Exports" : "interface mtpJsonToMxGraph extends TWRuntimeWidget {\t    \t/**\t    \t * Should be invoked to dispatch an event to the Thingworx runtime, causing all actions bound to that event to execute.\n\t    \t * @param event - The name of the event to dispatch.\n\t    \t */\n\t\t\tdispatchEvent(event: string): void;\n\t    \t/**\n\t    \t * Invoked after any property has been updated as a result of a binding.\n\t    \t * This method will be invoked after the specific ..DidUpdateToValue method is invoked.\n\t    \t * Scripts can override this method to react to all property updates.\n\t    \t * @param event - The name of the event to dispatch.\n\t    \t */\n\t\t\tpropertyDidUpdateToValue(property: string, value: any | undefined): void;\n\t    \t/**\n\t    \t * Finds and returns the widget with the given name in the current mashup.\n\t    \t * @param name - The DisplayName of the widget to find.\n\t    \t * @return - The widget object if it was found, undefined otherwise.\n\t    \t */\n\t\t\twidgetNamed(name: string): TWRuntimeWidget | undefined;\n\t    \t/**\n\t    \t * Sends a property update to the given widget as if it came from a binding.\n\t    \t * Supported properties may be updated this way even if they are not bound to anything in the composer.\n\t    \t * @param widget - The widget object whose property should be updated.\n\t    \t * @param args - An object containing additional arguments. This object must have the following properties:\n\t    \t *\t\t\t\t\tforProperty {String} - The name of the property to update.\n\t    \t *\t\t\t\t\tvalue {AnyObject} - The value to which that property should update.\n\t    \t */\n\t\t\tdispatchPropertyUpdateToWidget(widget: any, args: SelfDispatchPropertyUpdateToWidgetArgs): void;\n\t    \t/**\n\t    \t * May be overriden by scripts that create an UI. This method receives the script's container as its parameter.\n\t    \t * It is the script's responsibility to add their content to the supplied container.\n\t    \t * @param container - The container in which the UI elements should be added.\n\t    \t */\n\t\t\trenderWithContainer(container: $): void;\n\t\t}\n", "FullScreen" : true, "Height" : 44, "Id" : "BMTypescriptHost-14", "Left" : 1000, "ResponsiveLayout" : false, "RuntimeProperties" : "[]", "Scope" : "global", "ScrollPosition" : 5, "ShowDataLoading" : true, "Title" : "mtpJsonToMxGraph", "Top" : 15, "TranspiledCode" : "\"use strict\";\r\n//#import mtpJsonDef from MTPViewerV2\r\nconst NOZZLE_WIDTH = 5;\r\nconst NOZZLE_HEIGHT = 5;\r\nconst STENCIL_PATH = \"/mtp/stencils/\";\r\nconst STENCIL_LIST = ['agitators.xml', 'apparatus_elements.xml', 'agitators.xml', 'centrifuges.xml', 'compressors.xml',\r\n    'compressors_iso.xml', 'crushers_grinding.xml', 'driers.xml', 'engines.xml', 'feeders.xml', 'filters.xml', 'fittings.xml',\r\n    'flow_sensors.xml', 'heat_exchangers.xml', 'instruments.xml', 'misc.xml', 'mixers.xml', 'piping.xml', 'feeders.xml', 'feeders.xml',\r\n    'pumps.xml', 'pumps_din.xml', 'pumps_iso.xml', 'separators.xml', 'shaping_machines.xml', 'valves.xml', 'vessels.xml'];\r\n/**\r\n * A MtpFileLoader handles loading a mtp file from the given link,\r\n * parsing it into an mxgraph graph object and retring it.\r\n */\r\nclass MtpJsonToMxGraph {\r\n    /**\r\n     *  Intializes the MtpFileLoader with the mxgraph namespace\r\n     */\r\n    constructor(mxGraphNamespace, container, shapeMap) {\r\n        this.mxgraph = mxGraphNamespace;\r\n        this.container = container;\r\n        // load all the stencils\r\n        this.loadStencilFiles(STENCIL_LIST.map((el) => { return STENCIL_PATH + el; }));\r\n        this.shapeMap = shapeMap;\r\n    }\r\n    drawMpt(mtpDiagram) {\r\n        try {\r\n            let graph = this.initGraph(new this.mxgraph.mxGraph(this.container));\r\n            // draw the pipes\r\n            this.drawPipes(graph, graph.getDefaultParent(), mtpDiagram.pipes);\r\n            // draw the elements\r\n            this.drawElements(graph, graph.getDefaultParent(), mtpDiagram.elements);\r\n            return graph;\r\n        }\r\n        catch (e) {\r\n            console.error(\"Failed to draw mxgraph for MTP\");\r\n            throw e;\r\n        }\r\n    }\r\n    drawElements(graph, parent, elements) {\r\n        for (const element of elements) {\r\n            if (element.obj.subElement) {\r\n                // draw the element first (container then the subelement)\r\n                // depending on the rotation of the element we need to offset it across that axis\r\n                let elementOffsetX = element.obj.subElement.height / 2 * Math.abs(Math.sin(element.obj.rotation * Math.PI / 180));\r\n                let elementOffsetY = NOZZLE_HEIGHT * Math.abs(Math.cos(element.obj.rotation * Math.PI / 180));\r\n                graph.insertVertex(parent, element.obj.id, element.obj.name, element.obj.subElement.x - elementOffsetX, element.obj.subElement.y - elementOffsetY, element.obj.subElement.width, element.obj.subElement.height, `element;shape=${this.shapeMap[element.obj.eClassClassification]};rotation=${element.obj.rotation}`);\r\n            }\r\n            else {\r\n                // if we don't have a subelement, draw the visual object directly\r\n                graph.insertVertex(parent, element.obj.id, element.obj.name, element.obj.x, element.obj.y, element.obj.width, element.obj.height, `element;shape=${this.shapeMap[element.obj.eClassClassification]}`);\r\n            }\r\n            if (element.communication) {\r\n                // draw the parent first \r\n                let elParent = graph.insertVertex(parent, element.communication.id, element.communication.name, element.obj.x, element.obj.y, element.obj.width, element.obj.height, \"swimlane;childLayout=stackLayout;horizontal=1;startSize=26;horizontalStack=0;resizeParent=1;collapsible=1;resizeParentMax=0;resizeLast=0;\");\r\n                elParent.collapsed = true;\r\n                // if we have communication elements, draw them in the container\r\n                for (const commInterface of element.communication.interfaces) {\r\n                    let value = document.createElement(\"Value\");\r\n                    value.setAttribute('label', commInterface.name);\r\n                    let cell = graph.insertVertex(elParent, commInterface.id, value, 0, 0, element.obj.width, 20, \"interfaceValue\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n    drawPipes(graph, parent, pipes) {\r\n        for (const pipe of pipes) {\r\n            // keep a map of the nozzles\r\n            let nozzleMap = {};\r\n            // draw the nozzles first, then the pipe itself\r\n            for (const nozzle of pipe.nozzles) {\r\n                nozzleMap[nozzle.id] = graph.insertVertex(parent, nozzle.id, nozzle.name, nozzle.x - NOZZLE_WIDTH / 2, nozzle.y - NOZZLE_HEIGHT / 2, NOZZLE_WIDTH, NOZZLE_HEIGHT, nozzle.type);\r\n            }\r\n            // draw the pipe itself, but make sure that it's either connected to a nozzle or to a point\r\n            let edge = new this.mxgraph.mxCell(pipe.name, new this.mxgraph.mxGeometry(), pipe.type);\r\n            edge.setId(pipe.id);\r\n            edge.setEdge(true);\r\n            edge.geometry.relative = true;\r\n            // set the  waypoints\r\n            edge.geometry.points = pipe.waypoints.map((point) => { return new this.mxgraph.mxPoint(point.x, point.y); });\r\n            // soruce and target point to the vertex or to nothing\r\n            let source = undefined;\r\n            let target = undefined;\r\n            if (isNozzle(pipe.source)) {\r\n                source = nozzleMap[pipe.source.id];\r\n            }\r\n            else {\r\n                // set the starting point a a point\r\n                edge.geometry.sourcePoint = new this.mxgraph.mxPoint(pipe.source.x, pipe.source.y);\r\n            }\r\n            if (isNozzle(pipe.target)) {\r\n                target = nozzleMap[pipe.target.id];\r\n            }\r\n            else {\r\n                // set the target point a a point\r\n                edge.geometry.targetPoint = new this.mxgraph.mxPoint(pipe.target.x, pipe.target.y);\r\n            }\r\n            graph.addEdge(edge, parent, source, target);\r\n        }\r\n    }\r\n    initGraph(graph) {\r\n        // Allow panning using the right click buttion\r\n        graph.setPanning(true);\r\n        // enable the display of tooltips\r\n        graph.setTooltips(true);\r\n        // disable new connections and cloning cells, as well as drag and drop outside\r\n        graph.setConnectable(false);\r\n        graph.setCellsCloneable(true);\r\n        graph.setCellsDeletable(true);\r\n        graph.setDropEnabled(true);\r\n        graph.setSplitEnabled(false);\r\n        graph.resetEdgesOnConnect = false;\r\n        this.declareMxGraphStyles(graph);\r\n        graph.getModel().prefix = \"autoGenerated\";\r\n        graph.getLabel = function (cell) {\r\n            if (cell) {\r\n                // get the name of style\r\n                let cellStyle = cell.style ? (cell.style.split(\";\") ? cell.style.split(\";\")[0] : cell.style) : undefined;\r\n                if (cellStyle == \"interfaceValue\") {\r\n                    return `${cell.getAttribute(\"label\")}: ${cell.getAttribute(\"value\", \"N/A\")}`;\r\n                }\r\n                else if (cellStyle == \"Nozzle\") {\r\n                    return \"\";\r\n                }\r\n                else if (cellStyle == \"element\") {\r\n                    return \"\";\r\n                }\r\n                else if (cell.edge) {\r\n                    return \"\";\r\n                }\r\n                else {\r\n                    return cell.value;\r\n                }\r\n            }\r\n        };\r\n        let layout = new this.mxgraph.mxStackLayout(graph, true);\r\n        layout.resizeParent = true;\r\n        layout.horizontal = false;\r\n        layout.spacing = 2;\r\n        let layoutMgr = new this.mxgraph.mxLayoutManager(graph);\r\n        layoutMgr.getLayout = function (cell) {\r\n            let cellStyle = cell.style ? (cell.style.split(\";\") ? cell.style.split(\";\")[0] : cell.style) : undefined;\r\n            if (cellStyle == \"swimlane\") {\r\n                return layout;\r\n            }\r\n            return null;\r\n        };\r\n        return graph;\r\n    }\r\n    /**\r\n     * Creates the generic styles for elements\r\n     */\r\n    declareMxGraphStyles(graph) {\r\n        let style = graph.getStylesheet().getDefaultVertexStyle();\r\n        style[this.mxgraph.mxConstants.STYLE_ROUNDED] = false;\r\n        style[this.mxgraph.mxConstants.STYLE_FONTCOLOR] = '#1d1b1b';\r\n        style[this.mxgraph.mxConstants.STYLE_STROKECOLOR] = '#9673A6';\r\n        style[this.mxgraph.mxConstants.STYLE_FILLCOLOR] = '#f3f4f9';\r\n        style = this.mxgraph.mxUtils.clone(style);\r\n        style[this.mxgraph.mxConstants.STYLE_SHAPE] = 'swimlane';\r\n        style[this.mxgraph.mxConstants.STYLE_STARTSIZE] = 20;\r\n        graph.getStylesheet().putCellStyle('swimlane', style);\r\n        style = [];\r\n        style[this.mxgraph.mxConstants.STYLE_STROKECOLOR] = 'red';\r\n        style[this.mxgraph.mxConstants.STYLE_SHAPE] = \"ellipse\";\r\n        graph.getStylesheet().putCellStyle('Nozzle', style);\r\n        style = [];\r\n        style[this.mxgraph.mxConstants.STYLE_FILLCOLOR] = 'none';\r\n        style[this.mxgraph.mxConstants.STYLE_STROKECOLOR] = 'none';\r\n        graph.getStylesheet().putCellStyle('interfaceValue', style);\r\n        style = graph.getStylesheet().getDefaultEdgeStyle();\r\n        style[this.mxgraph.mxConstants.STYLE_ENDARROW] = 'none';\r\n        style[this.mxgraph.mxConstants.STYLE_STROKEWIDTH] = 2;\r\n    }\r\n    /**\r\n     * Loads the stencil files for pid diagrams\r\n     */\r\n    loadStencilFiles(files) {\r\n        for (const filePath of files) {\r\n            let req = this.mxgraph.mxUtils.load(filePath);\r\n            let root = req.getDocumentElement();\r\n            let prefix = root.getAttribute(\"name\");\r\n            let shape = root.firstChild;\r\n            while (shape != null) {\r\n                if (shape.nodeType == this.mxgraph.mxConstants.NODETYPE_ELEMENT) {\r\n                    let name = prefix + '.' + shape.getAttribute('name').replace(/ /g, '_');\r\n                    this.mxgraph.mxStencilRegistry.addStencil(name.toLowerCase(), new this.mxgraph.mxStencil(shape));\r\n                }\r\n                shape = shape.nextSibling;\r\n            }\r\n        }\r\n    }\r\n}\r\nwindow[\"MtpJsonToMxGraph\"] = MtpJsonToMxGraph;\r\n//# sourceMappingURL=data:application/json;base64,", "Type" : "BMTypescriptHost", "Visible" : true, "Width" : 175, "Z-index" : 10, "__TypeDisplayName" : "TypeScript Object" }, "Widgets" : [ ] }, { "Properties" : { "ActiveStyle" : "DefaultButtonActiveStyle", "Area" : "UI", "AutoRefresh" : false, "AutoRefreshTabSequence" : 0, "DisplayName" : "autorefresh-56", "FocusStyle" : "DefaultButtonFocusStyle", "Height" : 28, "HoverStyle" : "DefaultButtonHoverStyle", "IconAlignment" : "right", "Id" : "autorefresh-56", "Label" : "Test Data", "Left" : 275, "RefreshInterval" : 30, "RefreshNowTabSequence" : 0, "RefreshToggleLabel" : "On", "RefreshToggleLabelOff" : "Off", "RefreshToggleSliderStyle" : "DefaultAutoRefreshToggleSliderStyle", "RefreshToggleStyle" : "DefaultAutoRefreshToggleStyle", "RefreshToggleStyleOff" : "DefaultAutoRefreshToggleOffStyle", "ResponsiveLayout" : false, "ShowControls" : true, "ShowDataLoading" : true, "Style" : "DefaultButtonStyle", "Top" : 5, "Type" : "autorefresh", "Visible" : true, "Width" : 130, "Z-index" : 10, "__TypeDisplayName" : "Auto Refresh" }, "Widgets" : [ ] } ] } ] }, { "Properties" : { "AnimateExpandCollapse" : true, "Area" : "UI", "BGImageRepeat" : "no-repeat", "BGImageSize" : "auto", "DisplayName" : "Row 1", "ExpandCollapseTabLocation" : "outside", "Expanded" : true, "Id" : "container-3", "MinHeight" : 0, "MinWidth" : 0, "Overlay" : false, "OverlayIsTransparent" : false, "ResponsiveLayout" : true, "ShowDataLoading" : true, "ShowExpandCollapseTab" : false, "Style" : "DefaultContainerStyle", "TabCollapseStyle" : "DefaultTabCollapseStyle", "TabExpandStyle" : "DefaultTabExpandStyle", "TabHeight" : 36, "TabLocation" : "center", "TabOffset" : 0, "TabWidth" : 36, "Type" : "container", "Visible" : true, "Z-index" : 10, "__TypeDisplayName" : "Container" }, "Widgets" : [ { "Properties" : { "Area" : "UI", "Columns" : 1, "DisplayName" : "layout-17", "Footer" : false, "FooterHeight" : 0, "Header" : false, "HeaderHeight" : 0, "Id" : "layout-17", "IncludeSpacingInFixedAreas" : false, "IsPrintLayout" : false, "Left" : 435, "LeftSidebar" : true, "LeftSidebarWidth" : 100, "Orientation" : "horizontal", "PctColumn1" : 100, "PctColumn2" : 50, "PctColumn3" : 1, "PctColumn4" : 1, "PctColumn5" : 1, "PctColumn6" : 1, "PctColumn7" : 1, "PctColumn8" : 1, "PctRow1" : 50, "PctRow2" : 50, "PctRow3" : 0, "PctRow4" : 0, "PctRow5" : 0, "PctRow6" : 0, "PctRow7" : 0, "PctRow8" : 0, "PrintMarginLeftRight" : 0.5, "PrintMarginTopBottom" : 0.5, "PrintWidth" : 650, "ResponsiveLayout" : true, "RightSidebar" : false, "RightSidebarWidth" : 0, "Rows" : 0, "ShowDataLoading" : true, "Spacing" : 2, "Top" : 145, "Type" : "layout", "Visible" : true, "Z-index" : 10, "__TypeDisplayName" : "Layout" }, "Widgets" : [ { "Properties" : { "AnimateExpandCollapse" : true, "Area" : "UI", "BGImageRepeat" : "no-repeat", "BGImageSize" : "auto", "DisplayName" : "Left Sidebar", "ExpandCollapseTabLocation" : "outside", "Expanded" : true, "Id" : "container-24", "MinHeight" : 0, "MinWidth" : 0, "Overlay" : false, "OverlayIsTransparent" : false, "ResponsiveLayout" : true, "ShowDataLoading" : true, "ShowExpandCollapseTab" : false, "Style" : "DefaultContainerStyle", "TabCollapseStyle" : "DefaultTabCollapseStyle", "TabExpandStyle" : "DefaultTabExpandStyle", "TabHeight" : 36, "TabLocation" : "center", "TabOffset" : 0, "TabWidth" : 36, "Type" : "container", "Visible" : true, "Z-index" : 10, "__TypeDisplayName" : "Container" }, "Widgets" : [ { "Properties" : { "Alignment" : "left", "Area" : "UI", "AutoSelectFirstRow" : false, "ClearIfNoSelection" : false, "ComboDropdownButtonStyle" : "DefaultComboDropdownButtonStyle", "ComboEnableCheckbox" : false, "ComboItemHighlightedStyle" : "DefaultComboItemHighlightedStyle", "ComboTextboxStyle" : "DefaultComboTextboxStyle", "DisableSelectedStyle" : false, "DisplayField" : "prefix", "DisplayName" : "dhxlist-25", "DropdownButtonStyle" : "DefaultDropdownButtonStyle", "DropdownSelectedStyle" : "DefaultDropdownSelectedStyle", "DropdownStyle" : "DefaultDropdownStyle", "EnableKeyboardSelections" : true, "Height" : 170, "HeightOfDropdownView" : 170, "Id" : "dhxlist-25", "Label" : "", "LabelAlignment" : "left", "Left" : 40, "ListBackgroundStyle" : "DefaultListBackgroundStyle", "ListFocusStyle" : "DefaultFocusStyle", "ListItemAlternateStyle" : "DefaultListItemAlternateStyle", "ListItemHoverStyle" : "DefaultListItemHoverStyle", "ListItemSelectedStyle" : "DefaultListItemSelectedStyle", "ListItemStyle" : "DefaultListItemStyle", "ListLabelStyle" : "DefaultWidgetLabelStyle", "MultiSelect" : false, "NumberOfItemsInDropdownView" : 6, "ResponsiveLayout" : true, "RowHeight" : 28, "ShowDataLoading" : true, "SingleClickSelectOnTablets" : false, "TabSequence" : -1, "TextIfNoSelectionType" : "editable", "TextVerticalAlignment" : 28, "ToolTipStyle" : "DefaultTooltipStyle", "Top" : 95, "Type" : "dhxlist", "ValueField" : "prefix", "View" : "list", "Visible" : true, "Width" : 110, "WidthOfDropdownView" : 110, "Z-index" : 10, "__TypeDisplayName" : "List", "__supportsLabel" : true, "__supportsTooltip" : true }, "Widgets" : [ ] } ] }, { "Properties" : { "AnimateExpandCollapse" : true, "Area" : "UI", "BGImageRepeat" : "no-repeat", "BGImageSize" : "auto", "DisplayName" : "Column 1", "ExpandCollapseTabLocation" : "outside", "Expanded" : true, "Id" : "container-18", "MinHeight" : 0, "MinWidth" : 0, "Overlay" : false, "OverlayIsTransparent" : false, "ResponsiveLayout" : true, "ShowDataLoading" : true, "ShowExpandCollapseTab" : false, "Style" : "DefaultContainerStyle", "TabCollapseStyle" : "DefaultTabCollapseStyle", "TabExpandStyle" : "DefaultTabExpandStyle", "TabHeight" : 36, "TabLocation" : "center", "TabOffset" : 0, "TabWidth" : 36, "Type" : "container", "Visible" : true, "Z-index" : 10, "__TypeDisplayName" : "Container" }, "Widgets" : [ { "Properties" : { "Area" : "UI", "Columns" : 0, "DisplayName" : "layout-30", "Footer" : true, "FooterHeight" : 150, "Header" : false, "HeaderHeight" : 0, "Id" : "layout-30", "IncludeSpacingInFixedAreas" : false, "IsPrintLayout" : false, "Left" : 125, "LeftSidebar" : false, "LeftSidebarWidth" : 0, "Orientation" : "vertical", "PctColumn1" : 50, "PctColumn2" : 50, "PctColumn3" : 1, "PctColumn4" : 1, "PctColumn5" : 1, "PctColumn6" : 1, "PctColumn7" : 1, "PctColumn8" : 1, "PctRow1" : 100, "PctRow2" : 50, "PctRow3" : 0, "PctRow4" : 0, "PctRow5" : 0, "PctRow6" : 0, "PctRow7" : 0, "PctRow8" : 0, "PrintMarginLeftRight" : 0.5, "PrintMarginTopBottom" : 0.5, "PrintWidth" : 650, "ResponsiveLayout" : true, "RightSidebar" : false, "RightSidebarWidth" : 0, "Rows" : 1, "ShowDataLoading" : true, "Spacing" : 0, "Top" : 95, "Type" : "layout", "Visible" : true, "Z-index" : 10, "__TypeDisplayName" : "Layout" }, "Widgets" : [ { "Properties" : { "AnimateExpandCollapse" : true, "Area" : "UI", "BGImageRepeat" : "no-repeat", "BGImageSize" : "auto", "DisplayName" : "Row 1", "ExpandCollapseTabLocation" : "outside", "Expanded" : true, "Id" : "container-31", "MinHeight" : 0, "MinWidth" : 0, "Overlay" : false, "OverlayIsTransparent" : false, "ResponsiveLayout" : true, "ShowDataLoading" : true, "ShowExpandCollapseTab" : false, "Style" : "DefaultContainerStyle", "TabCollapseStyle" : "DefaultTabCollapseStyle", "TabExpandStyle" : "DefaultTabExpandStyle", "TabHeight" : 36, "TabLocation" : "center", "TabOffset" : 0, "TabWidth" : 36, "Type" : "container", "Visible" : true, "Z-index" : 10, "__TypeDisplayName" : "Container" }, "Widgets" : [ { "Properties" : { "Area" : "UI", "AutoFit" : true, "AutoLayout" : "None", "DisplayName" : "mtpHMIDiagdam", "EdgeStyle" : "None", "Height" : 800, "Id" : "mxdiagram-4", "JSONArrayGraphCells" : "{}", "Left" : 0, "ResponsiveLayout" : true, "ShowDataLoading" : true, "ShowOutline" : false, "ShowTools" : true, "Top" : 0, "Type" : "mxdiagram", "ValueDiagram" : { }, "Visible" : true, "Width" : 640, "XMLDiagram" : "{}", "Z-index" : 10, "__TypeDisplayName" : "mxGraph Diagram" }, "Widgets" : [ ] } ] }, { "Properties" : { "AnimateExpandCollapse" : true, "Area" : "UI", "BGImageRepeat" : "no-repeat", "BGImageSize" : "auto", "DisplayName" : "Footer", "ExpandCollapseTabLocation" : "outside", "Expanded" : true, "Id" : "container-33", "MinHeight" : 0, "MinWidth" : 0, "Overlay" : false, "OverlayIsTransparent" : false, "ResponsiveLayout" : true, "ShowDataLoading" : true, "ShowExpandCollapseTab" : false, "Style" : "DefaultContainerStyle", "TabCollapseStyle" : "DefaultTabCollapseStyle", "TabExpandStyle" : "DefaultTabExpandStyle", "TabHeight" : 36, "TabLocation" : "center", "TabOffset" : 0, "TabWidth" : 36, "Type" : "container", "Visible" : true, "Z-index" : 10, "__TypeDisplayName" : "Container" }, "Widgets" : [ { "Properties" : { "Area" : "UI", "Columns" : 1, "DisplayName" : "layout-20", "Footer" : false, "FooterHeight" : 0, "Header" : false, "HeaderHeight" : 0, "Id" : "layout-20", "IncludeSpacingInFixedAreas" : false, "IsPrintLayout" : false, "Left" : 25, "LeftSidebar" : false, "LeftSidebarWidth" : 0, "Orientation" : "horizontal", "PctColumn1" : 100, "PctColumn2" : 50, "PctColumn3" : 1, "PctColumn4" : 1, "PctColumn5" : 1, "PctColumn6" : 1, "PctColumn7" : 1, "PctColumn8" : 1, "PctRow1" : 50, "PctRow2" : 50, "PctRow3" : 0, "PctRow4" : 0, "PctRow5" : 0, "PctRow6" : 0, "PctRow7" : 0, "PctRow8" : 0, "PrintMarginLeftRight" : 0.5, "PrintMarginTopBottom" : 0.5, "PrintWidth" : 650, "ResponsiveLayout" : true, "RightSidebar" : false, "RightSidebarWidth" : 0, "Rows" : 2, "ShowDataLoading" : true, "Spacing" : 2, "Top" : 160, "Type" : "layout", "Visible" : true, "Z-index" : 10, "__TypeDisplayName" : "Layout" }, "Widgets" : [ { "Properties" : { "AnimateExpandCollapse" : true, "Area" : "UI", "BGImageRepeat" : "no-repeat", "BGImageSize" : "auto", "DisplayName" : "Row", "ExpandCollapseTabLocation" : "outside", "Expanded" : true, "Id" : "container-21", "MinHeight" : 0, "MinWidth" : 0, "Overlay" : false, "OverlayIsTransparent" : false, "ResponsiveLayout" : true, "ShowDataLoading" : true, "ShowExpandCollapseTab" : false, "Style" : "DefaultContainerStyle", "TabCollapseStyle" : "DefaultTabCollapseStyle", "TabExpandStyle" : "DefaultTabExpandStyle", "TabHeight" : 36, "TabLocation" : "center", "TabOffset" : 0, "TabWidth" : 36, "Type" : "container", "Visible" : true, "Z-index" : 10, "__TypeDisplayName" : "Container" }, "Widgets" : [ { "Properties" : { "Area" : "UI", "Columns" : 0, "DisplayName" : "layout-34", "Footer" : false, "FooterHeight" : 0, "Header" : true, "HeaderHeight" : 15, "Id" : "layout-34", "IncludeSpacingInFixedAreas" : false, "IsPrintLayout" : false, "Left" : 185, "LeftSidebar" : false, "LeftSidebarWidth" : 0, "Orientation" : "vertical", "PctColumn1" : 50, "PctColumn2" : 50, "PctColumn3" : 1, "PctColumn4" : 1, "PctColumn5" : 1, "PctColumn6" : 1, "PctColumn7" : 1, "PctColumn8" : 1, "PctRow1" : 100, "PctRow2" : 0, "PctRow3" : 0, "PctRow4" : 0, "PctRow5" : 0, "PctRow6" : 0, "PctRow7" : 0, "PctRow8" : 0, "PrintMarginLeftRight" : 0.5, "PrintMarginTopBottom" : 0.5, "PrintWidth" : 650, "ResponsiveLayout" : true, "RightSidebar" : false, "RightSidebarWidth" : 0, "Rows" : 1, "ShowDataLoading" : true, "Spacing" : 0, "Top" : 25, "Type" : "layout", "Visible" : true, "Z-index" : 10, "__TypeDisplayName" : "Layout" }, "Widgets" : [ { "Properties" : { "AnimateExpandCollapse" : true, "Area" : "UI", "BGImageRepeat" : "no-repeat", "BGImageSize" : "auto", "DisplayName" : "Header", "ExpandCollapseTabLocation" : "outside", "Expanded" : true, "Id" : "container-35", "MinHeight" : 0, "MinWidth" : 0, "Overlay" : false, "OverlayIsTransparent" : false, "ResponsiveLayout" : true, "ShowDataLoading" : true, "ShowExpandCollapseTab" : false, "Style" : "DefaultContainerStyle", "TabCollapseStyle" : "DefaultTabCollapseStyle", "TabExpandStyle" : "DefaultTabExpandStyle", "TabHeight" : 36, "TabLocation" : "center", "TabOffset" : 0, "TabWidth" : 36, "Type" : "container", "Visible" : true, "Z-index" : 10, "__TypeDisplayName" : "Container" }, "Widgets" : [ { "Properties" : { "Alignment" : "left", "Area" : "UI", "BackgroundFill" : "content", "DisplayName" : "valuedisplay-37", "Height" : 22, "Id" : "valuedisplay-37", "ImageScaling" : "Width", "Label" : "", "LabelAlignment" : "left", "Left" : 115, "Overflow" : "hidden", "ResponsiveLayout" : true, "ShowDataLoading" : true, "TextIfNoValue" : "MTP Json", "TextIfNoValueOffset" : 0, "TextIfNoValueStyle" : "DefaultValueDisplayNoTextStyle", "TextWrap" : true, "ToolTipField" : "", "ToolTipStyle" : "DefaultTooltipStyle", "Top" : 30, "Type" : "valuedisplay", "ValueDisplayLabelStyle" : "DefaultWidgetLabelStyle", "ValueDisplayStyle" : "DefaultValueDisplayStyle", "VerticalAlignment" : "middle", "Visible" : true, "Width" : 100, "Z-index" : 10, "__TypeDisplayName" : "Value Display", "__supportsLabel" : true, "__supportsTooltip" : true }, "Widgets" : [ ] } ] }, { "Properties" : { "AnimateExpandCollapse" : true, "Area" : "UI", "BGImageRepeat" : "no-repeat", "BGImageSize" : "auto", "DisplayName" : "Row", "ExpandCollapseTabLocation" : "outside", "Expanded" : true, "Id" : "container-36", "MinHeight" : 0, "MinWidth" : 0, "Overlay" : false, "OverlayIsTransparent" : false, "ResponsiveLayout" : true, "ShowDataLoading" : true, "ShowExpandCollapseTab" : false, "Style" : "DefaultContainerStyle", "TabCollapseStyle" : "DefaultTabCollapseStyle", "TabExpandStyle" : "DefaultTabExpandStyle", "TabHeight" : 36, "TabLocation" : "center", "TabOffset" : 0, "TabWidth" : 36, "Type" : "container", "Visible" : true, "Z-index" : 10, "__TypeDisplayName" : "Container" }, "Widgets" : [ { "Properties" : { "Area" : "UI", "DisplayName" : "textarea-16", "Height" : 200, "Id" : "textarea-16", "InnerShadow" : false, "Label" : "", "LabelAlignment" : "left", "Left" : 210, "ReadOnly" : true, "ResponsiveLayout" : true, "ShowDataLoading" : true, "Style" : "DefaultTextAreaStyle", "TabSequence" : 0, "Text" : "", "TextareaFocusStyle" : "DefaultFocusStyle", "TextareaLabelStyle" : "DefaultWidgetLabelStyle", "ToolTipField" : "", "ToolTipStyle" : "DefaultTooltipStyle", "Top" : 0, "Type" : "textarea", "Visible" : true, "Width" : 300, "Z-index" : 10, "__TypeDisplayName" : "TextArea", "__supportsLabel" : true, "__supportsTooltip" : true }, "Widgets" : [ ] } ] } ] } ] } ] } ] } ] } ] } ] } ] } ] } ] }, "mashupType" : "mashup" }]]></mashupContent>
			<preview/>
			<ConfigurationChanges>
				<ConfigurationChange changeAction="CREATE" changeReason="" timestamp="2019-07-18T11:37:18.293+03:00" user="Administrator"/>
			</ConfigurationChanges>
		</Mashup>
		<Mashup aspect.isResponsive="true" aspect.mashupType="mashup" columns="0.0" description="" documentationContent="" homeMashup="" lastModifiedDate="2019-07-18T11:37:48.194+03:00" name="MTPViewerV2" projectName="MTP" rows="0.0" tags="">
			<Owner name="Administrator" type="User"/>
			<avatar/>
			<DesignTimePermissions>
				<Create/>
				<Read/>
				<Update/>
				<Delete/>
				<Metadata/>
			</DesignTimePermissions>
			<RunTimePermissions/>
			<VisibilityPermissions>
				<Visibility/>
			</VisibilityPermissions>
			<ConfigurationTableDefinitions/>
			<ConfigurationTables/>
			<ParameterDefinitions/>
			<Things>
				<Thing>MtpMxgraphUtilities</Thing>
				<Thing>MtpThingModelOptions</Thing>
			</Things>
			<ThingShapes/>
			<ThingTemplates/>
			<mashupContent><![CDATA[{ "ConfigurationTables" : { }, "CustomMashupCss" : "", "Data" : { "Session" : { "DataName" : "Session", "EntityName" : "", "EntityType" : "Session", "Id" : "session", "Services" : [ { "APIMethod" : "post", "Characteristic" : "Services", "Id" : "SessionInterface", "Name" : "GetGlobalSessionValues", "Parameters" : { }, "RefreshInterval" : 0, "Target" : "GetGlobalSessionValues" } ] }, "Things_MtpMxgraphUtilities" : { "DataName" : "Things_MtpMxgraphUtilities", "EntityName" : "MtpMxgraphUtilities", "EntityType" : "Things", "Id" : "7d91f3db-f8de-4583-b34c-47d8b88219b8", "Services" : [ { "APIMethod" : "get", "Characteristic" : "Services", "Id" : "54289561-5dc6-4f1b-9258-0545d8155f4c", "Name" : "GetProperties", "Parameters" : { }, "RefreshInterval" : 0, "Target" : "GetProperties" } ] }, "Things_MtpThingModelOptions" : { "DataName" : "Things_MtpThingModelOptions", "EntityName" : "MtpThingModelOptions", "EntityType" : "Things", "Id" : "76d660c1-48ee-46a7-a53b-bb178fb23048", "Services" : [ { "APIMethod" : "post", "Characteristic" : "Services", "Id" : "836cc637-5f7e-4bd9-a5ba-1e050f8d3a4b", "Name" : "CollectDataForMtp", "Parameters" : { "prefix" : "Test1" }, "RefreshInterval" : 0, "Target" : "CollectDataForMtp" } ] }, "UserExtensions" : { "DataName" : "UserExtensions", "EntityName" : "", "EntityType" : "UserExtensions", "Id" : "UserExtensions", "Services" : [ { "APIMethod" : "post", "Characteristic" : "Services", "Id" : "UserExtensionInterface", "Name" : "GetCurrentUserExtensionProperties", "Parameters" : { }, "RefreshInterval" : 0, "Target" : "GetCurrentUserExtensionProperties" } ] } }, "DataBindings" : [ { "Id" : "0c1d0d33-0826-4a84-a43a-dc849b0e5f81", "PropertyMaps" : [ { "SourceProperty" : "Text", "SourcePropertyBaseType" : "STRING", "SourcePropertyType" : "Property", "TargetProperty" : "mtpFilePath", "TargetPropertyBaseType" : "STRING", "TargetPropertyType" : "property" } ], "SourceArea" : "UI", "SourceId" : "textbox-9", "SourceSection" : "", "TargetArea" : "UI", "TargetId" : "BMTypescriptHost-7", "TargetSection" : "" }, { "Id" : "122e5cfd-56c0-4d68-8309-b070834e9ef0", "PropertyMaps" : [ { "SourceProperty" : "mapping", "SourcePropertyBaseType" : "INFOTABLE", "SourcePropertyType" : "Property", "TargetProperty" : "shapeMapping", "TargetPropertyBaseType" : "INFOTABLE", "TargetPropertyType" : "property" } ], "SourceArea" : "Data", "SourceDetails" : "AllData", "SourceId" : "GetProperties", "SourceSection" : "Things_MtpMxgraphUtilities", "TargetArea" : "UI", "TargetId" : "BMTypescriptHost-7", "TargetSection" : "" }, { "Id" : "55492ae4-b7d4-4eef-841a-26ce016eac1c", "PropertyMaps" : [ { "SourceProperty" : "mtpJson", "SourcePropertyBaseType" : "STRING", "SourcePropertyType" : "Property", "TargetProperty" : "Text", "TargetPropertyBaseType" : "STRING", "TargetPropertyType" : "property" } ], "SourceArea" : "UI", "SourceId" : "BMTypescriptHost-7", "SourceSection" : "", "TargetArea" : "UI", "TargetId" : "textarea-16", "TargetSection" : "" }, { "Id" : "09d2f76a-1bf7-446e-9a0f-04185eb2880e", "PropertyMaps" : [ { "SourceProperty" : "mtpJson", "SourcePropertyBaseType" : "STRING", "TargetProperty" : "jsonMtp", "TargetPropertyBaseType" : "STRING", "TargetPropertyType" : "Parameter" } ], "SourceArea" : "UI", "SourceId" : "BMTypescriptHost-7", "SourceSection" : "", "TargetArea" : "Data", "TargetId" : "CollectDataForMtp", "TargetSection" : "Things_MtpThingModelOptions" }, { "Id" : "3b566fd0-f158-452d-96f0-02f69e270842", "PropertyMaps" : [ { "SourceProperty" : "", "SourcePropertyBaseType" : "INFOTABLE", "SourcePropertyType" : "InfoTable", "TargetProperty" : "mtpData", "TargetPropertyBaseType" : "INFOTABLE", "TargetPropertyType" : "property" } ], "SourceArea" : "Data", "SourceDetails" : "AllData", "SourceId" : "CollectDataForMtp", "SourceSection" : "Things_MtpThingModelOptions", "TargetArea" : "UI", "TargetId" : "BMTypescriptHost-7", "TargetSection" : "" }, { "Id" : "635aa029-22b2-433e-a87c-eb9ae802788a", "PropertyMaps" : [ { "SourceProperty" : "XMLDiagram", "SourcePropertyBaseType" : "TEXT", "SourcePropertyType" : "Property", "TargetProperty" : "Text", "TargetPropertyBaseType" : "STRING", "TargetPropertyType" : "property" } ], "SourceArea" : "UI", "SourceId" : "mxdiagram-4", "SourceSection" : "", "TargetArea" : "UI", "TargetId" : "textarea-23", "TargetSection" : "" } ], "DesignTimePermissions" : { "Create" : [ ], "Delete" : [ ], "Metadata" : [ ], "Read" : [ ], "Update" : [ ] }, "Events" : [ { "EventHandlerArea" : "UI", "EventHandlerId" : "BMTypescriptHost-7", "EventHandlerService" : "mashupDidFinishLoading", "EventTriggerArea" : "Mashup", "EventTriggerEvent" : "Loaded", "EventTriggerId" : "mashup-root", "EventTriggerSection" : "", "Id" : "d23a1753-706e-4b70-9737-c3d90eecae4a" }, { "EventHandlerArea" : "UI", "EventHandlerId" : "BMTypescriptHost-7", "EventHandlerService" : "loadFile", "EventTriggerArea" : "UI", "EventTriggerEvent" : "EnterKeyPressed", "EventTriggerId" : "textbox-9", "EventTriggerSection" : "", "Id" : "7eac4299-767d-4fc3-b1cc-38f0d009a10c" }, { "EventHandlerArea" : "UI", "EventHandlerId" : "BMCodeHost-11", "EventHandlerService" : "execute", "EventTriggerArea" : "UI", "EventTriggerEvent" : "loadSymbols", "EventTriggerId" : "BMTypescriptHost-7", "EventTriggerSection" : "", "Id" : "2bdaf292-ece2-47a0-82e2-3a2b1c923042" }, { "EventHandlerArea" : "Data", "EventHandlerId" : "Things_MtpMxgraphUtilities", "EventHandlerService" : "GetProperties", "EventTriggerArea" : "Mashup", "EventTriggerEvent" : "Loaded", "EventTriggerId" : "mashup-root", "EventTriggerSection" : "", "Id" : "39816aea-76d7-4e8f-aefb-e77a9db915fc" }, { "EventHandlerArea" : "Data", "EventHandlerId" : "Things_MtpThingModelOptions", "EventHandlerService" : "CollectDataForMtp", "EventTriggerArea" : "UI", "EventTriggerEvent" : "Refresh", "EventTriggerId" : "autorefresh-15", "EventTriggerSection" : "", "Id" : "23e45ea1-ca0b-4c26-a3b3-499ac80d5492" } ], "RunTimePermissions" : { "permissions" : [ ] }, "UI" : { "Properties" : { "AddToDashboardButtonStyle" : "DefaultAddToDashboardButtonStyle", "Area" : "Mashup", "BGImageRepeat" : "no-repeat", "BGImageSize" : "auto", "Columns" : 0, "ConfigureGadgetButtonStyle" : "DefaultConfigureGadgetButtonStyle", "DisplayName" : "Mashup", "EnableParameterEditing" : false, "Height" : 618, "Id" : "mashup-root", "IgnoreWarningsInViewMashup" : false, "IsPrintLayout" : false, "Left" : 0, "MashupToEditGadget" : "DefaultMashupToEditGadget", "MinHeight" : 0, "MinWidth" : 0, "ResponsiveLayout" : true, "Rows" : 0, "ShowDataLoading" : true, "Style" : "DefaultMashupStyle", "Title" : "", "TitleBar" : false, "TitleBarStyle" : "DefaultTitleBarStyle", "TitleBarText" : "Gadget Title Here", "Top" : 0, "Type" : "mashup", "Visible" : true, "Width" : 1024, "Z-index" : 10, "__TypeDisplayName" : "Mashup", "id_index" : 23, "supportsAutoResize" : true }, "Widgets" : [ { "Properties" : { "Area" : "UI", "Columns" : 0, "DisplayName" : "layout-1", "Footer" : false, "FooterHeight" : 0, "Header" : true, "HeaderHeight" : 100, "Id" : "layout-1", "IncludeSpacingInFixedAreas" : false, "IsPrintLayout" : false, "Left" : 500, "LeftSidebar" : false, "LeftSidebarWidth" : 0, "Orientation" : "vertical", "PctColumn1" : 50, "PctColumn2" : 50, "PctColumn3" : 1, "PctColumn4" : 1, "PctColumn5" : 1, "PctColumn6" : 1, "PctColumn7" : 1, "PctColumn8" : 1, "PctRow1" : 100, "PctRow2" : 0, "PctRow3" : 0, "PctRow4" : 0, "PctRow5" : 0, "PctRow6" : 0, "PctRow7" : 0, "PctRow8" : 0, "PrintMarginLeftRight" : 0.5, "PrintMarginTopBottom" : 0.5, "PrintWidth" : 650, "ResponsiveLayout" : true, "RightSidebar" : false, "RightSidebarWidth" : 0, "Rows" : 1, "ShowDataLoading" : true, "Spacing" : 2, "Top" : 160, "Type" : "layout", "Visible" : true, "Z-index" : 10, "__TypeDisplayName" : "Layout" }, "Widgets" : [ { "Properties" : { "AnimateExpandCollapse" : true, "Area" : "UI", "BGImageRepeat" : "no-repeat", "BGImageSize" : "auto", "DisplayName" : "Header", "ExpandCollapseTabLocation" : "outside", "Expanded" : true, "Id" : "container-2", "MinHeight" : 0, "MinWidth" : 0, "Overlay" : false, "OverlayIsTransparent" : false, "ResponsiveLayout" : true, "ShowDataLoading" : true, "ShowExpandCollapseTab" : false, "Style" : "DefaultContainerStyle", "TabCollapseStyle" : "DefaultTabCollapseStyle", "TabExpandStyle" : "DefaultTabExpandStyle", "TabHeight" : 36, "TabLocation" : "center", "TabOffset" : 0, "TabWidth" : 36, "Type" : "container", "Visible" : true, "Z-index" : 10, "__TypeDisplayName" : "Container" }, "Widgets" : [ { "Properties" : { "Area" : "UI", "DisplayName" : "panel-6", "Height" : 200, "HideScrollbars" : false, "HorizontalAnchor" : "left", "Id" : "panel-6", "Left" : 185, "ResponsiveLayout" : true, "ShowDataLoading" : true, "Style" : "DefaultContainerStyle", "Top" : 75, "Type" : "panel", "VerticalAnchor" : "top", "Visible" : true, "Width" : 300, "Z-index" : 10, "__TypeDisplayName" : "Panel" }, "Widgets" : [ { "Properties" : { "Area" : "UI", "Code" : "//#import mptFileParser from MTPViewerV2\n//#import mtpJsonDef from MTPViewerV2\n//#import mtpJsonToMxGraph from MTPViewerV2\n\n\n// exectutes when the mashup finishes loading\nlet diagramWdg: any;\nlet fileLoader: MtpFileParser;\nlet diagramRenderer: MtpJsonToMxGraph;\nlet eClassShapeMap: any = {};\nlet graph: any;\nself.mashupDidFinishLoading = function () {\n    // get a reference to the mx diagram widget based on its display name\n    diagramWdg = $w('mtpHMIDiagdam') as any;\n}\n\ndeclare interface Window {\n    [key: string]: any;\n}\n\nself.shapeMappingDidUpdateToValue = (value) => {\n    for (const element of value.rows) {\n        eClassShapeMap[element.eclass] = element.mxgraphShape;\n    }\n}\n\nself.loadFile = async () => {\n    if (!fileLoader) {\n        // add all of mxgraph to window\n        for (const key in diagramWdg.mxGraphNamespace.mxgraph) {\n            if (diagramWdg.mxGraphNamespace.mxgraph.hasOwnProperty(key)) {\n                window[key] = diagramWdg.mxGraphNamespace.mxgraph[key]\n            }\n        }\n        fileLoader = new MtpFileParser();\n        diagramRenderer = new MtpJsonToMxGraph(diagramWdg.mxGraphNamespace.mxgraph, diagramWdg.jqElement[0], eClassShapeMap);\n        self.dispatchEvent('loadSymbols');\n    }\n    diagramWdg.resetCurrentGraph();\n    // load the xml file and parse it into a document\n    let diagram = await fileLoader.loadFile(self.mtpFilePath as string);\n    graph = diagramRenderer.drawMpt(diagram);\n    self.mtpJson = JSON.stringify(diagram);\n    diagramWdg.setNewActiveGraph(graph);\n    diagramWdg.serviceInvoked(\"GenerateXML\");\n}\n\nself.mtpDataDidUpdateToValue = (value: INFOTABLE) => {\n    if (!graph) {\n        return;\n    }\n    for (const row of value.rows) {\n        let cell = graph.getModel().getCell(row.elementId);\n        if (cell && cell.hasAttribute(\"label\")) {\n            cell.setAttribute(\"value\", isNaN(row.value) ? row.value : parseFloat(row.value).toFixed(2));\n            graph.getModel().setValue(cell, cell.value);\n        }\n    }\n}", "ColumnPosition" : 45, "DirectLinkUUID" : "", "DisplayName" : "BMTypescriptHost-7", "Exports" : "interface mtpFileController extends TWRuntimeWidget {mtpFilePath: STRING; \n\t    \t/**\n\t    \t * Invoked whenever the mtpFilePath property is about to be updated to a new value as a result of a binding.\n\t    \t * Scripts can override this method to respond the incoming change and accept or reject the new value.\n\t    \t * The default implementation does nothing and accepts all new values.\n\t    \t * @param value - The property's new value.\n\t    \t * @param args - An object containing additional arguments including the previous value (args.fromValue).\n\t    \t * @return - True if the new value should be accepted, false otherwise.\n\t    \t */\n\t\t\tmtpFilePathShouldUpdateToValue(value: any, args: SelfShouldUpdateToValueArgs): boolean; \n\t    \t/**\n\t    \t * Invoked after the mtpFilePath property has been updated as a result of a binding.\n\t    \t * This method is only invoked if the corresponding ..ShouldUpdateToValue method has returned true.\n\t    \t * Scripts can override this method to respond to property updates.\n\t    \t * The default implementation does nothing.\n\t    \t * @param value - The property's new value.\n\t    \t * @param args - An object containing additional arguments including the previous value (args.fromValue).\n\t    \t */\n\t\t\tmtpFilePathDidUpdateToValue(value: any, args: SelfShouldUpdateToValueArgs); \nshapeMapping: INFOTABLE; \n\t    \t/**\n\t    \t * Invoked whenever the shapeMapping property is about to be updated to a new value as a result of a binding.\n\t    \t * Scripts can override this method to respond the incoming change and accept or reject the new value.\n\t    \t * The default implementation does nothing and accepts all new values.\n\t    \t * @param value - The property's new value.\n\t    \t * @param args - An object containing additional arguments including the previous value (args.fromValue).\n\t    \t * @return - True if the new value should be accepted, false otherwise.\n\t    \t */\n\t\t\tshapeMappingShouldUpdateToValue(value: any, args: SelfShouldUpdateToValueArgs): boolean; \n\t    \t/**\n\t    \t * Invoked after the shapeMapping property has been updated as a result of a binding.\n\t    \t * This method is only invoked if the corresponding ..ShouldUpdateToValue method has returned true.\n\t    \t * Scripts can override this method to respond to property updates.\n\t    \t * The default implementation does nothing.\n\t    \t * @param value - The property's new value.\n\t    \t * @param args - An object containing additional arguments including the previous value (args.fromValue).\n\t    \t */\n\t\t\tshapeMappingDidUpdateToValue(value: any, args: SelfShouldUpdateToValueArgs); \nmtpData: INFOTABLE; \n\t    \t/**\n\t    \t * Invoked whenever the mtpData property is about to be updated to a new value as a result of a binding.\n\t    \t * Scripts can override this method to respond the incoming change and accept or reject the new value.\n\t    \t * The default implementation does nothing and accepts all new values.\n\t    \t * @param value - The property's new value.\n\t    \t * @param args - An object containing additional arguments including the previous value (args.fromValue).\n\t    \t * @return - True if the new value should be accepted, false otherwise.\n\t    \t */\n\t\t\tmtpDataShouldUpdateToValue(value: any, args: SelfShouldUpdateToValueArgs): boolean; \n\t    \t/**\n\t    \t * Invoked after the mtpData property has been updated as a result of a binding.\n\t    \t * This method is only invoked if the corresponding ..ShouldUpdateToValue method has returned true.\n\t    \t * Scripts can override this method to respond to property updates.\n\t    \t * The default implementation does nothing.\n\t    \t * @param value - The property's new value.\n\t    \t * @param args - An object containing additional arguments including the previous value (args.fromValue).\n\t    \t */\n\t\t\tmtpDataDidUpdateToValue(value: any, args: SelfShouldUpdateToValueArgs); \nmtpJson: STRING; \n\t    \t/**\n\t    \t * Invoked whenever the mtpJson property is about to be updated to a new value as a result of a binding.\n\t    \t * Scripts can override this method to respond the incoming change and accept or reject the new value.\n\t    \t * The default implementation does nothing and accepts all new values.\n\t    \t * @param value - The property's new value.\n\t    \t * @param args - An object containing additional arguments including the previous value (args.fromValue).\n\t    \t * @return - True if the new value should be accepted, false otherwise.\n\t    \t */\n\t\t\tmtpJsonShouldUpdateToValue(value: any, args: SelfShouldUpdateToValueArgs): boolean; \n\t    \t/**\n\t    \t * Invoked after the mtpJson property has been updated as a result of a binding.\n\t    \t * This method is only invoked if the corresponding ..ShouldUpdateToValue method has returned true.\n\t    \t * Scripts can override this method to respond to property updates.\n\t    \t * The default implementation does nothing.\n\t    \t * @param value - The property's new value.\n\t    \t * @param args - An object containing additional arguments including the previous value (args.fromValue).\n\t    \t */\n\t\t\tmtpJsonDidUpdateToValue(value: any, args: SelfShouldUpdateToValueArgs); \nmashupDidFinishLoading(); loadFile(); \t    \t/**\t    \t * Should be invoked to dispatch an event to the Thingworx runtime, causing all actions bound to that event to execute.\n\t    \t * @param event - The name of the event to dispatch.\n\t    \t */\n\t\t\tdispatchEvent(event: string): void;\n\t    \t/**\n\t    \t * Invoked after any property has been updated as a result of a binding.\n\t    \t * This method will be invoked after the specific ..DidUpdateToValue method is invoked.\n\t    \t * Scripts can override this method to react to all property updates.\n\t    \t * @param event - The name of the event to dispatch.\n\t    \t */\n\t\t\tpropertyDidUpdateToValue(property: string, value: any | undefined): void;\n\t    \t/**\n\t    \t * Finds and returns the widget with the given name in the current mashup.\n\t    \t * @param name - The DisplayName of the widget to find.\n\t    \t * @return - The widget object if it was found, undefined otherwise.\n\t    \t */\n\t\t\twidgetNamed(name: string): TWRuntimeWidget | undefined;\n\t    \t/**\n\t    \t * Sends a property update to the given widget as if it came from a binding.\n\t    \t * Supported properties may be updated this way even if they are not bound to anything in the composer.\n\t    \t * @param widget - The widget object whose property should be updated.\n\t    \t * @param args - An object containing additional arguments. This object must have the following properties:\n\t    \t *\t\t\t\t\tforProperty {String} - The name of the property to update.\n\t    \t *\t\t\t\t\tvalue {AnyObject} - The value to which that property should update.\n\t    \t */\n\t\t\tdispatchPropertyUpdateToWidget(widget: any, args: SelfDispatchPropertyUpdateToWidgetArgs): void;\n\t    \t/**\n\t    \t * May be overriden by scripts that create an UI. This method receives the script's container as its parameter.\n\t    \t * It is the script's responsibility to add their content to the supplied container.\n\t    \t * @param container - The container in which the UI elements should be added.\n\t    \t */\n\t\t\trenderWithContainer(container: $): void;\n\t\t}\n", "FullScreen" : false, "Height" : 46, "Id" : "BMTypescriptHost-7", "Left" : 30, "ResponsiveLayout" : false, "RuntimeProperties" : "[{\"name\":\"mtpFilePath\",\"dataType\":\"STRING\",\"type\":\"property\"},{\"name\":\"shapeMapping\",\"dataType\":\"INFOTABLE\",\"type\":\"property\"},{\"name\":\"mtpData\",\"dataType\":\"INFOTABLE\",\"type\":\"property\"},{\"name\":\"mtpJson\",\"dataType\":\"STRING\",\"type\":\"property\"},{\"name\":\"mashupDidFinishLoading\",\"dataType\":\"STRING\",\"type\":\"service\"},{\"name\":\"loadFile\",\"dataType\":\"STRING\",\"type\":\"service\"},{\"name\":\"loadSymbols\",\"dataType\":\"STRING\",\"type\":\"event\"}]", "Scope" : "local", "ScrollPosition" : 54, "ShowDataLoading" : true, "Title" : "mtpFileController", "Top" : 20, "TranspiledCode" : "\"use strict\";\r\n//#import mptFileParser from MTPViewerV2\r\n//#import mtpJsonDef from MTPViewerV2\r\n//#import mtpJsonToMxGraph from MTPViewerV2\r\n// exectutes when the mashup finishes loading\r\nlet diagramWdg;\r\nlet fileLoader;\r\nlet diagramRenderer;\r\nlet eClassShapeMap = {};\r\nlet graph;\r\nself.mashupDidFinishLoading = function () {\r\n    // get a reference to the mx diagram widget based on its display name\r\n    diagramWdg = $w('mtpHMIDiagdam');\r\n};\r\nself.shapeMappingDidUpdateToValue = (value) => {\r\n    for (const element of value.rows) {\r\n        eClassShapeMap[element.eclass] = element.mxgraphShape;\r\n    }\r\n};\r\nself.loadFile = async () => {\r\n    if (!fileLoader) {\r\n        // add all of mxgraph to window\r\n        for (const key in diagramWdg.mxGraphNamespace.mxgraph) {\r\n            if (diagramWdg.mxGraphNamespace.mxgraph.hasOwnProperty(key)) {\r\n                window[key] = diagramWdg.mxGraphNamespace.mxgraph[key];\r\n            }\r\n        }\r\n        fileLoader = new MtpFileParser();\r\n        diagramRenderer = new MtpJsonToMxGraph(diagramWdg.mxGraphNamespace.mxgraph, diagramWdg.jqElement[0], eClassShapeMap);\r\n        self.dispatchEvent('loadSymbols');\r\n    }\r\n    diagramWdg.resetCurrentGraph();\r\n    // load the xml file and parse it into a document\r\n    let diagram = await fileLoader.loadFile(self.mtpFilePath);\r\n    graph = diagramRenderer.drawMpt(diagram);\r\n    self.mtpJson = JSON.stringify(diagram);\r\n    diagramWdg.setNewActiveGraph(graph);\r\n    diagramWdg.serviceInvoked(\"GenerateXML\");\r\n};\r\nself.mtpDataDidUpdateToValue = (value) => {\r\n    if (!graph) {\r\n        return;\r\n    }\r\n    for (const row of value.rows) {\r\n        let cell = graph.getModel().getCell(row.elementId);\r\n        if (cell && cell.hasAttribute(\"label\")) {\r\n            cell.setAttribute(\"value\", isNaN(row.value) ? row.value : parseFloat(row.value).toFixed(2));\r\n            graph.getModel().setValue(cell, cell.value);\r\n        }\r\n    }\r\n};\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIyMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsd0NBQXdDO0FBQ3hDLHFDQUFxQztBQUNyQywyQ0FBMkM7QUFHM0MsNkNBQTZDO0FBQzdDLElBQUksVUFBZSxDQUFDO0FBQ3BCLElBQUksVUFBeUIsQ0FBQztBQUM5QixJQUFJLGVBQWlDLENBQUM7QUFDdEMsSUFBSSxjQUFjLEdBQVEsRUFBRSxDQUFDO0FBQzdCLElBQUksS0FBVSxDQUFDO0FBQ2YsSUFBSSxDQUFDLHNCQUFzQixHQUFHO0lBQzFCLHFFQUFxRTtJQUNyRSxVQUFVLEdBQUcsRUFBRSxDQUFDLGVBQWUsQ0FBUSxDQUFDO0FBQzVDLENBQUMsQ0FBQTtBQU1ELElBQUksQ0FBQyw0QkFBNEIsR0FBRyxDQUFDLEtBQUssRUFBRSxFQUFFO0lBQzFDLEtBQUssTUFBTSxPQUFPLElBQUksS0FBSyxDQUFDLElBQUksRUFBRTtRQUM5QixjQUFjLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUM7S0FDekQ7QUFDTCxDQUFDLENBQUE7QUFFRCxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssSUFBSSxFQUFFO0lBQ3ZCLElBQUksQ0FBQyxVQUFVLEVBQUU7UUFDYiwrQkFBK0I7UUFDL0IsS0FBSyxNQUFNLEdBQUcsSUFBSSxVQUFVLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFO1lBQ25ELElBQUksVUFBVSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQ3pELE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxVQUFVLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFBO2FBQ3pEO1NBQ0o7UUFDRCxVQUFVLEdBQUcsSUFBSSxhQUFhLEVBQUUsQ0FBQztRQUNqQyxlQUFlLEdBQUcsSUFBSSxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsY0FBYyxDQUFDLENBQUM7UUFDckgsSUFBSSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsQ0FBQztLQUNyQztJQUNELFVBQVUsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBQy9CLGlEQUFpRDtJQUNqRCxJQUFJLE9BQU8sR0FBRyxNQUFNLFVBQVUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQXFCLENBQUMsQ0FBQztJQUNwRSxLQUFLLEdBQUcsZUFBZSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN6QyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDdkMsVUFBVSxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3BDLFVBQVUsQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDN0MsQ0FBQyxDQUFBO0FBRUQsSUFBSSxDQUFDLHVCQUF1QixHQUFHLENBQUMsS0FBZ0IsRUFBRSxFQUFFO0lBQ2hELElBQUksQ0FBQyxLQUFLLEVBQUU7UUFDUixPQUFPO0tBQ1Y7SUFDRCxLQUFLLE1BQU0sR0FBRyxJQUFJLEtBQUssQ0FBQyxJQUFJLEVBQUU7UUFDMUIsSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDbkQsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUNwQyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzVGLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUMvQztLQUNKO0FBQ0wsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLy8jaW1wb3J0IG1wdEZpbGVQYXJzZXIgZnJvbSBNVFBWaWV3ZXJWMlxuLy8jaW1wb3J0IG10cEpzb25EZWYgZnJvbSBNVFBWaWV3ZXJWMlxuLy8jaW1wb3J0IG10cEpzb25Ub014R3JhcGggZnJvbSBNVFBWaWV3ZXJWMlxuXG5cbi8vIGV4ZWN0dXRlcyB3aGVuIHRoZSBtYXNodXAgZmluaXNoZXMgbG9hZGluZ1xubGV0IGRpYWdyYW1XZGc6IGFueTtcbmxldCBmaWxlTG9hZGVyOiBNdHBGaWxlUGFyc2VyO1xubGV0IGRpYWdyYW1SZW5kZXJlcjogTXRwSnNvblRvTXhHcmFwaDtcbmxldCBlQ2xhc3NTaGFwZU1hcDogYW55ID0ge307XG5sZXQgZ3JhcGg6IGFueTtcbnNlbGYubWFzaHVwRGlkRmluaXNoTG9hZGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAvLyBnZXQgYSByZWZlcmVuY2UgdG8gdGhlIG14IGRpYWdyYW0gd2lkZ2V0IGJhc2VkIG9uIGl0cyBkaXNwbGF5IG5hbWVcbiAgICBkaWFncmFtV2RnID0gJHcoJ210cEhNSURpYWdkYW0nKSBhcyBhbnk7XG59XG5cbmRlY2xhcmUgaW50ZXJmYWNlIFdpbmRvdyB7XG4gICAgW2tleTogc3RyaW5nXTogYW55O1xufVxuXG5zZWxmLnNoYXBlTWFwcGluZ0RpZFVwZGF0ZVRvVmFsdWUgPSAodmFsdWUpID0+IHtcbiAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgdmFsdWUucm93cykge1xuICAgICAgICBlQ2xhc3NTaGFwZU1hcFtlbGVtZW50LmVjbGFzc10gPSBlbGVtZW50Lm14Z3JhcGhTaGFwZTtcbiAgICB9XG59XG5cbnNlbGYubG9hZEZpbGUgPSBhc3luYyAoKSA9PiB7XG4gICAgaWYgKCFmaWxlTG9hZGVyKSB7XG4gICAgICAgIC8vIGFkZCBhbGwgb2YgbXhncmFwaCB0byB3aW5kb3dcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gZGlhZ3JhbVdkZy5teEdyYXBoTmFtZXNwYWNlLm14Z3JhcGgpIHtcbiAgICAgICAgICAgIGlmIChkaWFncmFtV2RnLm14R3JhcGhOYW1lc3BhY2UubXhncmFwaC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgd2luZG93W2tleV0gPSBkaWFncmFtV2RnLm14R3JhcGhOYW1lc3BhY2UubXhncmFwaFtrZXldXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZmlsZUxvYWRlciA9IG5ldyBNdHBGaWxlUGFyc2VyKCk7XG4gICAgICAgIGRpYWdyYW1SZW5kZXJlciA9IG5ldyBNdHBKc29uVG9NeEdyYXBoKGRpYWdyYW1XZGcubXhHcmFwaE5hbWVzcGFjZS5teGdyYXBoLCBkaWFncmFtV2RnLmpxRWxlbWVudFswXSwgZUNsYXNzU2hhcGVNYXApO1xuICAgICAgICBzZWxmLmRpc3BhdGNoRXZlbnQoJ2xvYWRTeW1ib2xzJyk7XG4gICAgfVxuICAgIGRpYWdyYW1XZGcucmVzZXRDdXJyZW50R3JhcGgoKTtcbiAgICAvLyBsb2FkIHRoZSB4bWwgZmlsZSBhbmQgcGFyc2UgaXQgaW50byBhIGRvY3VtZW50XG4gICAgbGV0IGRpYWdyYW0gPSBhd2FpdCBmaWxlTG9hZGVyLmxvYWRGaWxlKHNlbGYubXRwRmlsZVBhdGggYXMgc3RyaW5nKTtcbiAgICBncmFwaCA9IGRpYWdyYW1SZW5kZXJlci5kcmF3TXB0KGRpYWdyYW0pO1xuICAgIHNlbGYubXRwSnNvbiA9IEpTT04uc3RyaW5naWZ5KGRpYWdyYW0pO1xuICAgIGRpYWdyYW1XZGcuc2V0TmV3QWN0aXZlR3JhcGgoZ3JhcGgpO1xuICAgIGRpYWdyYW1XZGcuc2VydmljZUludm9rZWQoXCJHZW5lcmF0ZVhNTFwiKTtcbn1cblxuc2VsZi5tdHBEYXRhRGlkVXBkYXRlVG9WYWx1ZSA9ICh2YWx1ZTogSU5GT1RBQkxFKSA9PiB7XG4gICAgaWYgKCFncmFwaCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGZvciAoY29uc3Qgcm93IG9mIHZhbHVlLnJvd3MpIHtcbiAgICAgICAgbGV0IGNlbGwgPSBncmFwaC5nZXRNb2RlbCgpLmdldENlbGwocm93LmVsZW1lbnRJZCk7XG4gICAgICAgIGlmIChjZWxsICYmIGNlbGwuaGFzQXR0cmlidXRlKFwibGFiZWxcIikpIHtcbiAgICAgICAgICAgIGNlbGwuc2V0QXR0cmlidXRlKFwidmFsdWVcIiwgaXNOYU4ocm93LnZhbHVlKSA/IHJvdy52YWx1ZSA6IHBhcnNlRmxvYXQocm93LnZhbHVlKS50b0ZpeGVkKDIpKTtcbiAgICAgICAgICAgIGdyYXBoLmdldE1vZGVsKCkuc2V0VmFsdWUoY2VsbCwgY2VsbC52YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG59Il19", "Type" : "BMTypescriptHost", "Visible" : true, "Width" : 164, "Z-index" : 10, "__TypeDisplayName" : "TypeScript Object" }, "Widgets" : [ ] }, { "Properties" : { "Area" : "UI", "CursorPosition" : 0, "DefaultTextboxFocusStyle" : "DefaultFocusStyle", "DisplayName" : "textbox-9", "Height" : 24, "Id" : "textbox-9", "InnerShadow" : true, "Label" : "", "LabelAlignment" : "left", "Left" : 475, "MaskInputCharacters" : false, "PlaceholderText" : "", "ReadOnly" : false, "ResponsiveLayout" : false, "ShowDataLoading" : true, "Style" : "DefaultTextBoxStyle", "TabSequence" : 0, "Text" : "/mtp/Manifest.am", "TextAlign" : "left", "TextboxLabelStyle" : "DefaultWidgetLabelStyle", "ToolTipField" : "", "ToolTipStyle" : "DefaultTooltipStyle", "Top" : 10, "Type" : "textbox", "Visible" : true, "Width" : 200, "Z-index" : 10, "__TypeDisplayName" : "TextBox", "__supportsLabel" : true, "__supportsTooltip" : true }, "Widgets" : [ ] }, { "Properties" : { "Area" : "UI", "Code" : "\n\n/**\n * $Id: mxPidValves.js,v 1.5 2013/10/22 12:55:55 mate Exp $\n * Copyright (c) 2006-2013, JGraph Ltd\n */\nself.execute = function () {\n    //**********************************************************************************************************************************************************\n    //Valve\n    //**********************************************************************************************************************************************************\n    /**\n     * Extends mxShape.\n     */\n    function mxShapePidValve(bounds, fill, stroke, strokewidth) {\n        mxShape.call(this);\n        this.bounds = bounds;\n        this.fill = fill;\n        this.stroke = stroke;\n        this.strokewidth = (strokewidth != null) ? strokewidth : 1;\n    };\n\n    /**\n     * Extends mxShape.\n     */\n    mxUtils.extend(mxShapePidValve, mxShape);\n\n    mxShapePidValve.prototype.cst = {\n        SHAPE_VALVE: 'mxgraph.pid2valves.valve',\n        //states\n        DEFAULT_STATE: 'defState',\n        CLOSED: 'closed',\n        OPEN: 'open',\n        //actuators\n        ACTUATOR: 'actuator',\n        MANUAL: 'man',\n        DIAPHRAGM: 'diaph',\n        BALANCED_DIAPHRAGM: 'balDiaph',\n        MOTOR: 'motor',\n        NONE: 'none',\n        SPRING: 'spring',\n        PILOT: 'pilot',\n        POWERED: 'powered',\n        SOLENOID: 'solenoid',\n        SOLENOID_MANUAL_RESET: 'solenoidManRes',\n        SINGLE_ACTING: 'singActing',\n        DOUBLE_ACTING: 'dblActing',\n        PILOT_CYLINDER: 'pilotCyl',\n        DIGITAL: 'digital',\n        WEIGHT: 'weight',\n        KEY: 'key',\n        ELECTRO_HYDRAULIC: 'elHyd',\n        //types\n        VALVE_TYPE: 'valveType',\n        BUTTERFLY: 'butterfly',\n        CHECK: 'check',\n        GATE: 'gate',\n        GLOBE: 'globe',\n        NEEDLE: 'needle',\n        PLUG: 'plug',\n        SELF_DRAINING: 'selfDrain',\n        ANGLE: 'angle',\n        ANGLE_GLOBE: 'angleGlobe',\n        THREE_WAY: 'threeWay',\n        ANGLE_BLOWDOWN: 'angBlow',\n        BALL: 'ball'\n    };\n\n    /**\n     * Function: paintVertexShape\n     * \n     * Paints the vertex shape.\n     */\n    mxShapePidValve.prototype.paintVertexShape = function (c, x, y, w, h) {\n        var valveType = mxUtils.getValue(this.style, mxShapePidValve.prototype.cst.VALVE_TYPE, 'gate');\n        var actuator = mxUtils.getValue(this.style, mxShapePidValve.prototype.cst.ACTUATOR, mxShapePidValve.prototype.cst.NONE);\n        var actH = 0;\n\n        if (actuator !== 'none') {\n            if (this.isAngleVariant(valveType)) {\n                actH = h * 0.3333;\n            }\n            else {\n                actH = h * 0.4;\n            }\n        }\n\n        c.translate(x, y);\n        c.setLineJoin('round');\n\n        this.background(c, x, y, w, h, valveType, actuator, actH);\n        c.setShadow(false);\n        this.foreground(c, x, y, w, h, valveType, actuator, actH);\n    };\n\n    mxShapePidValve.prototype.background = function (c, x, y, w, h, valveType, actuator, actH) {\n        //draw the actuator\n        if (actuator !== mxShapePidValve.prototype.cst.NONE) {\n            if (this.isAngleVariant(valveType)) {\n                this.drawActuatorBg(c, x, y, w, h / 1.2, actuator, actH);\n            }\n            else {\n                this.drawActuatorBg(c, x, y, w, h, actuator, actH);\n            }\n        }\n\n        //draw the valve body\n        if (this.isGateVariant(valveType)) {\n            this.drawGateVariantBg(c, 0, 0, w, h, valveType, actuator, actH);\n        }\n        else if (this.isAngleVariant(valveType)) {\n            this.drawAngleVariantBg(c, 0, 0, w, h, valveType, actuator, actH);\n        }\n        else if (valveType === mxShapePidValve.prototype.cst.BUTTERFLY) {\n            this.drawButterflyValve(c, 0, 0, w, h, actuator, actH);\n        }\n        else if (valveType === mxShapePidValve.prototype.cst.CHECK) {\n            this.drawCheckValve(c, 0, 0, w, h, actuator, actH);\n        }\n    };\n\n    mxShapePidValve.prototype.foreground = function (c, x, y, w, h, valveType, actuator, actH) {\n        var valveType = mxUtils.getValue(this.style, mxShapePidValve.prototype.cst.VALVE_TYPE, 'gate');\n\n        //draw the actuator\n        if (actuator !== mxShapePidValve.prototype.cst.NONE) {\n            if (this.isAngleVariant(valveType)) {\n                this.drawActuatorFg(c, x, y, w, h / 1.2, actuator, actH);\n            }\n            else {\n                this.drawActuatorFg(c, x, y, w, h, actuator, actH);\n            }\n        }\n\n        if (this.isGateVariant(valveType)) {\n            this.drawGateVariantFg(c, 0, 0, w, h, valveType, actuator, actH);\n        }\n        if (this.isAngleVariant(valveType)) {\n            this.drawAngleVariantFg(c, 0, 0, w, h, valveType, actuator, actH);\n        }\n    };\n\n    mxShapePidValve.prototype.drawActuatorBg = function (c, x, y, w, h, actuator) {\n        if (this.isSquareVariant(actuator)) {\n            c.translate(w * 0.325, 0);\n            this.drawSquareAct(c, w * 0.35, h * 0.7, actuator);\n            c.translate(- w * 0.325, 0);\n        }\n        else if (actuator === mxShapePidValve.prototype.cst.MANUAL) {\n            c.translate(w * 0.25, h * 0.15);\n            this.drawManAct(c, w * 0.5, h * 0.55);\n            c.translate(- w * 0.25, - h * 0.15);\n        }\n        else if (actuator === mxShapePidValve.prototype.cst.DIAPHRAGM) {\n            c.translate(w * 0.25, h * 0.1);\n            this.drawDiaphAct(c, w * 0.5, h * 0.6);\n            c.translate(- w * 0.25, - h * 0.1);\n        }\n        else if (actuator === mxShapePidValve.prototype.cst.BALANCED_DIAPHRAGM) {\n            c.translate(w * 0.25, h * 0.1);\n            this.drawBalDiaphActBg(c, w * 0.5, h * 0.6);\n            c.translate(- w * 0.25, - h * 0.1);\n        }\n        else if (actuator === mxShapePidValve.prototype.cst.MOTOR || actuator === mxShapePidValve.prototype.cst.ELECTRO_HYDRAULIC) {\n            c.translate(w * 0.325, 0);\n            this.drawCircleAct(c, w * 0.35, h * 0.7, actuator);\n            c.translate(- w * 0.325, 0);\n        }\n        else if (actuator === mxShapePidValve.prototype.cst.SPRING) {\n            c.translate(w * 0.36, 0);\n            this.drawSpringAct(c, w * 0.28, h * 0.7);\n            c.translate(- w * 0.36, 0);\n        }\n        else if (actuator === mxShapePidValve.prototype.cst.SOLENOID_MANUAL_RESET) {\n            c.translate(w * 0.325, 0);\n            this.drawSolenoidManResetAct(c, w * 0.575, h * 0.7);\n            c.translate(- w * 0.325, 0);\n        }\n        else if (actuator === mxShapePidValve.prototype.cst.SINGLE_ACTING) {\n            c.translate(w * 0.35, 0);\n            this.drawSingActingActBg(c, w * 0.65, h * 0.7);\n            c.translate(- w * 0.35, 0);\n        }\n        else if (actuator === mxShapePidValve.prototype.cst.DOUBLE_ACTING) {\n            c.translate(w * 0.35, 0);\n            this.drawDblActingActBg(c, w * 0.65, h * 0.7);\n            c.translate(- w * 0.35, 0);\n        }\n        else if (actuator === mxShapePidValve.prototype.cst.PILOT_CYLINDER) {\n            c.translate(w * 0.35, 0);\n            this.drawPilotCylinderActBg(c, w * 0.65, h * 0.7);\n            c.translate(- w * 0.35, 0);\n        }\n        else if (actuator === mxShapePidValve.prototype.cst.ANGLE_BLOWDOWN) {\n            c.translate(w * 0.5, h * 0.2);\n            this.drawAngleBlowdownAct(c, w * 0.4, h * 0.5);\n            c.translate(- w * 0.5, - h * 0.2);\n        }\n    };\n\n    mxShapePidValve.prototype.drawActuatorFg = function (c, x, y, w, h, actuator) {\n        if (actuator === mxShapePidValve.prototype.cst.BALANCED_DIAPHRAGM) {\n            c.translate(w * 0.25, h * 0.1);\n            this.drawBalDiaphActFg(c, w * 0.5, h * 0.6);\n            c.translate(- w * 0.25, - h * 0.1);\n        }\n        else if (actuator === mxShapePidValve.prototype.cst.SINGLE_ACTING ||\n            actuator === mxShapePidValve.prototype.cst.DOUBLE_ACTING ||\n            actuator === mxShapePidValve.prototype.cst.PILOT_CYLINDER) {\n            c.translate(w * 0.35, 0);\n            this.drawActingActFg(c, w * 0.65, h * 0.7);\n            c.translate(- w * 0.35, 0);\n        }\n    };\n\n    mxShapePidValve.prototype.drawManAct = function (c, w, h) {\n        c.begin();\n        c.moveTo(0, 0);\n        c.lineTo(w, 0);\n        c.moveTo(w * 0.5, 0);\n        c.lineTo(w * 0.5, h);\n        c.stroke();\n    };\n\n    mxShapePidValve.prototype.drawDiaphAct = function (c, w, h) {\n        c.begin();\n        c.moveTo(w * 0.5, h * 0.2);\n        c.lineTo(w * 0.5, h);\n        c.stroke();\n\n        c.begin();\n        c.moveTo(0, h * 0.2);\n        c.arcTo(w * 0.6, h * 0.4, 0, 0, 1, w, h * 0.2);\n        c.close();\n        c.fillAndStroke();\n    };\n\n    mxShapePidValve.prototype.drawBalDiaphActBg = function (c, w, h) {\n        c.ellipse(0, 0, w, h * 0.3);\n        c.fillAndStroke();\n\n        c.begin();\n        c.moveTo(w * 0.5, h * 0.3);\n        c.lineTo(w * 0.5, h);\n        c.stroke();\n    };\n\n    mxShapePidValve.prototype.drawBalDiaphActFg = function (c, w, h) {\n        c.begin();\n        c.moveTo(0, h * 0.15);\n        c.lineTo(w, h * 0.15);\n        c.stroke();\n    };\n\n    mxShapePidValve.prototype.drawCircleAct = function (c, w, h, actuator) {\n        c.ellipse(0, 0, w, h * 0.5);\n        c.fillAndStroke();\n\n        c.begin();\n        c.moveTo(w * 0.5, h * 0.5);\n        c.lineTo(w * 0.5, h);\n        c.stroke();\n\n        var m = '';\n\n        if (actuator === mxShapePidValve.prototype.cst.MOTOR) {\n            m = 'M';\n        }\n        else if (actuator === mxShapePidValve.prototype.cst.ELECTRO_HYDRAULIC) {\n            m = 'E/H';\n        }\n\n        c.setFontStyle(1);\n        c.setFontFamily('Helvetica');\n        c.setFontSize(Math.min(w, h) * 0.4);\n        c.text(w * 0.5, h * 0.25, 0, 0, m, mxConstants.ALIGN_CENTER, mxConstants.ALIGN_MIDDLE, 0, null, 0, 0, 0);\n    };\n\n    mxShapePidValve.prototype.drawSpringAct = function (c, w, h) {\n        c.begin();\n        c.moveTo(w * 0.5, 0);\n        c.lineTo(w * 0.5, h);\n        c.moveTo(w * 0.32, h * 0.16);\n        c.lineTo(w * 0.68, h * 0.08);\n        c.moveTo(w * 0.21, h * 0.32);\n        c.lineTo(w * 0.79, h * 0.20);\n        c.moveTo(w * 0.1, h * 0.52);\n        c.lineTo(w * 0.9, h * 0.36);\n        c.moveTo(0, h * 0.72);\n        c.lineTo(w, h * 0.5);\n        c.stroke();\n    };\n\n    mxShapePidValve.prototype.drawSolenoidManResetAct = function (c, w, h) {\n        c.rect(0, 0, w * 0.61, h * 0.46);\n        c.fillAndStroke();\n\n        c.begin();\n        c.moveTo(w * 0.56, h * 0.6);\n        c.lineTo(w * 0.78, h * 0.5);\n        c.lineTo(w, h * 0.6);\n        c.lineTo(w * 0.78, h * 0.7);\n        c.close();\n        c.fillAndStroke();\n\n        c.begin();\n        c.moveTo(w * 0.305, h * 0.46);\n        c.lineTo(w * 0.305, h);\n        c.moveTo(w * 0.305, h * 0.6);\n        c.lineTo(w * 0.56, h * 0.6);\n        c.stroke();\n\n        c.setFontStyle(1);\n        c.setFontFamily('Helvetica');\n        c.setFontSize(Math.min(w, h) * 0.4);\n        c.text(w * 0.305, h * 0.23, 0, 0, 'S', mxConstants.ALIGN_CENTER, mxConstants.ALIGN_MIDDLE, 0, null, 0, 0, 0);\n\n        c.setFontStyle(0);\n        c.setFontSize(Math.min(w, h) * 0.15);\n        c.text(w * 0.78, h * 0.6, 0, 0, 'R', mxConstants.ALIGN_CENTER, mxConstants.ALIGN_MIDDLE, 0, null, 0, 0, 0);\n    };\n\n    mxShapePidValve.prototype.drawSingActingActBg = function (c, w, h) {\n        c.rect(0, 0, w * 0.46, h * 0.46);\n        c.fillAndStroke();\n\n        c.begin();\n        c.moveTo(w * 0.23, h * 0.46);\n        c.lineTo(w * 0.23, h);\n        c.moveTo(w * 0.46, h * 0.23);\n        c.lineTo(w, h * 0.23);\n        c.moveTo(w * 0.77, h * 0.15);\n        c.lineTo(w * 0.69, h * 0.31);\n        c.moveTo(w * 0.82, h * 0.15);\n        c.lineTo(w * 0.74, h * 0.31);\n        c.stroke();\n    };\n\n    mxShapePidValve.prototype.drawActingActFg = function (c, w, h) {\n        c.begin();\n        c.moveTo(w * 0.23, h * 0.23);\n        c.lineTo(w * 0.23, h * 0.46);\n        c.moveTo(0, h * 0.23);\n        c.lineTo(w * 0.46, h * 0.23);\n        c.stroke();\n    };\n\n    mxShapePidValve.prototype.drawDblActingActBg = function (c, w, h) {\n        c.rect(0, 0, w * 0.46, h * 0.46);\n        c.fillAndStroke();\n\n        c.begin();\n        c.moveTo(w * 0.23, h * 0.46);\n        c.lineTo(w * 0.23, h);\n        c.moveTo(w * 0.46, h * 0.115);\n        c.lineTo(w, h * 0.115);\n        c.moveTo(w * 0.77, h * 0.035);\n        c.lineTo(w * 0.69, h * 0.195);\n        c.moveTo(w * 0.82, h * 0.035);\n        c.lineTo(w * 0.74, h * 0.195);\n        c.moveTo(w * 0.46, h * 0.345);\n        c.lineTo(w, h * 0.345);\n        c.moveTo(w * 0.77, h * 0.265);\n        c.lineTo(w * 0.69, h * 0.425);\n        c.moveTo(w * 0.82, h * 0.265);\n        c.lineTo(w * 0.74, h * 0.425);\n        c.stroke();\n    };\n\n    mxShapePidValve.prototype.drawPilotCylinderActBg = function (c, w, h) {\n        c.rect(0, 0, w * 0.46, h * 0.46);\n        c.fillAndStroke();\n\n        c.begin();\n        c.moveTo(w * 0.23, h * 0.46);\n        c.lineTo(w * 0.23, h);\n        c.moveTo(w * 0.46, h * 0.23);\n        c.lineTo(w * 0.77, h * 0.23);\n        c.stroke();\n\n        c.rect(w * 0.77, h * 0.115, w * 0.23, h * 0.23);\n        c.fillAndStroke();\n\n        c.setFontStyle(0);\n        c.setFontFamily('Helvetica');\n        c.setFontSize(Math.min(w, h) * 0.15);\n        c.text(w * 0.885, h * 0.23, 0, 0, 'P', mxConstants.ALIGN_CENTER, mxConstants.ALIGN_MIDDLE, 0, null, 0, 0, 0);\n    };\n\n    mxShapePidValve.prototype.drawAngleBlowdownAct = function (c, w, h) {\n        c.begin();\n        c.moveTo(w * 0.34, 0);\n        c.lineTo(w, h * 0.405);\n        c.moveTo(0, h);\n        c.lineTo(w * 0.665, h * 0.205);\n        c.stroke();\n    };\n\n    mxShapePidValve.prototype.drawSquareAct = function (c, w, h, actuator) {\n        c.rect(0, 0, w, h * 0.5);\n        c.fillAndStroke();\n\n        c.begin();\n        c.moveTo(w * 0.5, h * 0.5);\n        c.lineTo(w * 0.5, h);\n        c.stroke();\n\n        var m = '';\n\n        if (actuator === mxShapePidValve.prototype.cst.PILOT) {\n            m = 'P';\n        }\n        else if (actuator === mxShapePidValve.prototype.cst.SOLENOID) {\n            m = 'S';\n        }\n        else if (actuator === mxShapePidValve.prototype.cst.DIGITAL) {\n            m = 'D';\n        }\n        else if (actuator === mxShapePidValve.prototype.cst.WEIGHT) {\n            m = 'W';\n        }\n        else if (actuator === mxShapePidValve.prototype.cst.KEY) {\n            m = 'K';\n        }\n\n        c.setFontStyle(1);\n        c.setFontFamily('Helvetica');\n        c.setFontSize(Math.min(w, h) * 0.4);\n        c.text(w * 0.5, h * 0.25, 0, 0, m, mxConstants.ALIGN_CENTER, mxConstants.ALIGN_MIDDLE, 0, null, 0, 0, 0);\n    };\n\n    mxShapePidValve.prototype.drawGateVariantFg = function (c, x, y, w, h, valveType, actuator, actH) {\n        var defState = mxUtils.getValue(this.style, mxShapePidValve.prototype.cst.DEFAULT_STATE, 'open');\n        var fillColor = mxUtils.getValue(this.style, mxConstants.STYLE_FILLCOLOR, '#ffffff');\n        var strokeColor = mxUtils.getValue(this.style, mxConstants.STYLE_STROKECOLOR, '#000000');\n\n        if (valveType === mxShapePidValve.prototype.cst.BALL) {\n            c.ellipse(x + w * 0.3, y + actH + (h - actH) * 0.18, w * 0.4, (h - actH) * 0.64);\n            c.fillAndStroke();\n        }\n        else if (valveType === mxShapePidValve.prototype.cst.GLOBE) {\n            c.ellipse(x + w * 0.3, y + actH + (h - actH) * 0.18, w * 0.4, (h - actH) * 0.64);\n            c.setFillColor(strokeColor);\n            c.fillAndStroke();\n            c.setFillColor(fillColor);\n        }\n        else if (valveType === mxShapePidValve.prototype.cst.PLUG) {\n            this.drawPlug(c, x + w * 0.4, y + actH + (h - actH) * 0.25, w * 0.2, (h - actH) * 0.5);\n        }\n        else if (valveType === mxShapePidValve.prototype.cst.NEEDLE) {\n            this.drawNeedle(c, x + w * 0.45, y + actH + (h - actH) * 0.1, w * 0.1, (h - actH) * 0.9);\n        }\n        else if (valveType === mxShapePidValve.prototype.cst.SELF_DRAINING) {\n            this.drawDrain(c, x + w * 0.48, y + actH + (h - actH) * 0.5, w * 0.04, (h - actH) * 0.49);\n        }\n    };\n\n    mxShapePidValve.prototype.drawAngleVariantFg = function (c, x, y, w, h, valveType, actuator, actH) {\n        var defState = mxUtils.getValue(this.style, mxShapePidValve.prototype.cst.DEFAULT_STATE, 'open');\n        var fillColor = mxUtils.getValue(this.style, mxConstants.STYLE_FILLCOLOR, '#ffffff');\n        var strokeColor = mxUtils.getValue(this.style, mxConstants.STYLE_STROKECOLOR, '#000000');\n\n        if (valveType === mxShapePidValve.prototype.cst.ANGLE_GLOBE) {\n            if (actuator === 'none') {\n                c.ellipse(w * 0.34, h * 0.175, w * 0.32, h * 0.4);\n            }\n            else {\n                c.ellipse(w * 0.34, h * 0.45, w * 0.32, h * 0.2667);\n            }\n            c.setFillColor(strokeColor);\n            c.fillAndStroke();\n            c.setFillColor(fillColor);\n        }\n    };\n\n    mxShapePidValve.prototype.drawGateVariantBg = function (c, x, y, w, h, valveType, actuator, actH) {\n        if (valveType === mxShapePidValve.prototype.cst.GATE) {\n            this.drawGateValve(c, x, y + actH, w, h - actH);\n        }\n        else if (valveType === mxShapePidValve.prototype.cst.BALL || valveType === mxShapePidValve.prototype.cst.GLOBE) {\n            c.ellipse(x + w * 0.3, y + actH + (h - actH) * 0.18, w * 0.4, (h - actH) * 0.64);\n            c.fillAndStroke();\n            this.drawGateValve(c, x, y + actH, w, h - actH);\n        }\n        else if (valveType === mxShapePidValve.prototype.cst.PLUG) {\n            this.drawPlug(c, x + w * 0.4, y + actH + (h - actH) * 0.25, w * 0.2, (h - actH) * 0.5);\n            this.drawGateValve(c, x, y + actH, w, h - actH);\n        }\n        else if (valveType === mxShapePidValve.prototype.cst.NEEDLE) {\n            this.drawNeedle(c, x + w * 0.45, y + actH + (h - actH) * 0.1, w * 0.1, (h - actH) * 0.9);\n            this.drawGateValve(c, x, y + actH, w, h - actH);\n        }\n        else if (valveType === mxShapePidValve.prototype.cst.SELF_DRAINING) {\n            this.drawDrain(c, x + w * 0.48, y + actH + (h - actH) * 0.5, w * 0.04, (h - actH) * 0.49);\n            this.drawGateValve(c, x, y + actH, w, h - actH);\n        }\n    };\n\n    mxShapePidValve.prototype.drawAngleVariantBg = function (c, x, y, w, h, valveType, actuator, actH) {\n        if (valveType === mxShapePidValve.prototype.cst.ANGLE) {\n            this.drawAngleValve(c, w * 0.2, y + actH, w * 0.8, h - actH);\n        }\n        else if (valveType === mxShapePidValve.prototype.cst.ANGLE_GLOBE) {\n            this.drawAngleGlobeValveBg(c, w * 0.2, y + actH, w * 0.8, h - actH);\n        }\n        else if (valveType === mxShapePidValve.prototype.cst.THREE_WAY) {\n            this.drawThreeWayValve(c, 0, y + actH, w, h - actH);\n        }\n        else if (valveType === mxShapePidValve.prototype.cst.ANGLE_BLOWDOWN) {\n            this.drawAngleBlowdownValve(c, x, y + actH, w, h - actH);\n        }\n    };\n\n    mxShapePidValve.prototype.drawPlug = function (c, x, y, w, h) {\n        c.translate(x, y);\n        c.begin();\n        c.moveTo(0, h * 0.5);\n        c.lineTo(w * 0.5, 0);\n        c.lineTo(w, h * 0.5);\n        c.lineTo(w * 0.5, h);\n        c.close();\n        c.fillAndStroke();\n        c.translate(-x, -y);\n    };\n\n    mxShapePidValve.prototype.drawNeedle = function (c, x, y, w, h) {\n        var fillColor = mxUtils.getValue(this.style, mxConstants.STYLE_FILLCOLOR, '#ffffff');\n        var strokeColor = mxUtils.getValue(this.style, mxConstants.STYLE_STROKECOLOR, '#000000');\n\n        c.translate(x, y);\n        c.begin();\n        c.moveTo(0, 0);\n        c.lineTo(w, 0);\n        c.lineTo(w * 0.5, h);\n        c.close();\n        c.setFillColor(strokeColor);\n        c.fillAndStroke();\n        c.setFillColor(fillColor);\n        c.translate(-x, -y);\n    };\n\n    mxShapePidValve.prototype.drawDrain = function (c, x, y, w, h) {\n        var fillColor = mxUtils.getValue(this.style, mxConstants.STYLE_FILLCOLOR, '#ffffff');\n        var strokeColor = mxUtils.getValue(this.style, mxConstants.STYLE_STROKECOLOR, '#000000');\n\n        c.translate(x, y);\n        c.begin();\n        c.moveTo(w * 0.5, 0);\n        c.lineTo(w * 0.5, h * 0.96);\n        c.stroke();\n\n        c.begin();\n        c.moveTo(0, h * 0.9);\n        c.lineTo(w, h * 0.9);\n        c.lineTo(w * 0.5, h);\n        c.close();\n        c.setFillColor(strokeColor);\n        c.fillAndStroke();\n        c.setFillColor(fillColor);\n        c.translate(-x, -y);\n    };\n\n    mxShapePidValve.prototype.drawGateValve = function (c, x, y, w, h) {\n        var defState = mxUtils.getValue(this.style, mxShapePidValve.prototype.cst.DEFAULT_STATE, 'open');\n        var fillColor = mxUtils.getValue(this.style, mxConstants.STYLE_FILLCOLOR, '#ffffff');\n        var strokeColor = mxUtils.getValue(this.style, mxConstants.STYLE_STROKECOLOR, '#000000');\n\n        c.translate(x, y);\n        c.begin();\n        c.moveTo(0, 0);\n        c.lineTo(w * 0.5, h * 0.5);\n        c.lineTo(0, h);\n        c.close();\n        c.moveTo(w, 0);\n        c.lineTo(w * 0.5, h * 0.5);\n        c.lineTo(w, h);\n        c.close();\n\n        if (defState === mxShapePidValve.prototype.cst.CLOSED) {\n            c.setFillColor(strokeColor);\n            c.fillAndStroke();\n            c.setFillColor(fillColor);\n        }\n        else {\n            c.fillAndStroke();\n        }\n\n        c.translate(-x, -y);\n    };\n\n    mxShapePidValve.prototype.drawAngleValve = function (c, x, y, w, h) {\n        c.translate(x, y);\n\n        c.begin();\n        c.moveTo(w * 0.375, h * 0.375);\n        c.lineTo(w, 0);\n        c.lineTo(w, h * 0.75);\n        c.close();\n        c.moveTo(w * 0.375, h * 0.375);\n        c.lineTo(w * 0.75, h);\n        c.lineTo(0, h);\n        c.close();\n        c.fillAndStroke();\n\n        c.translate(-x, -y);\n    };\n\n    mxShapePidValve.prototype.drawAngleGlobeValveBg = function (c, x, y, w, h) {\n        c.translate(x, y);\n\n        c.ellipse(w * 0.175, h * 0.175, w * 0.4, h * 0.4);\n        c.fillAndStroke();\n        c.begin();\n        c.moveTo(w * 0.375, h * 0.375);\n        c.lineTo(w, 0);\n        c.lineTo(w, h * 0.75);\n        c.close();\n        c.moveTo(w * 0.375, h * 0.375);\n        c.lineTo(w * 0.75, h);\n        c.lineTo(0, h);\n        c.close();\n        c.fillAndStroke();\n        c.translate(-x, -y);\n    };\n\n    mxShapePidValve.prototype.drawAngleGlobeValveFg = function (c, x, y, w, h) {\n        c.translate(x, y);\n        c.ellipse(w * 0.275, h * 0.275, w * 0.2, h * 0.2);\n        c.fillAndStroke();\n        c.translate(-x, -y);\n    };\n\n    mxShapePidValve.prototype.drawThreeWayValve = function (c, x, y, w, h) {\n        c.translate(x, y);\n\n        c.begin();\n        c.moveTo(0, 0);\n        c.lineTo(w * 0.5, h * 0.375);\n        c.lineTo(0, h * 0.75);\n        c.close();\n\n        c.moveTo(w, 0);\n        c.lineTo(w * 0.5, h * 0.375);\n        c.lineTo(w, h * 0.75);\n        c.close();\n\n        c.moveTo(w * 0.5, h * 0.375);\n        c.lineTo(w * 0.8, h);\n        c.lineTo(w * 0.2, h);\n        c.close();\n        c.fillAndStroke();\n\n        c.translate(-x, -y);\n    };\n\n    mxShapePidValve.prototype.drawAngleBlowdownValve = function (c, x, y, w, h) {\n\n    };\n\n\n    mxShapePidValve.prototype.drawButterflyValve = function (c, x, y, w, h, actuator, actH) {\n        var fillColor = mxUtils.getValue(this.style, mxConstants.STYLE_FILLCOLOR, '#ffffff');\n        var strokeColor = mxUtils.getValue(this.style, mxConstants.STYLE_STROKECOLOR, '#000000');\n\n        var yv = y + actH;\n        var hv = h - actH;\n\n        c.translate(x, yv);\n        c.begin();\n        c.moveTo(0, 0);\n        c.lineTo(0, hv);\n        c.moveTo(w, 0);\n        c.lineTo(w, hv);\n\n        c.moveTo(w * 0.05, hv * 0.05);\n        c.lineTo(w * 0.95, hv * 0.95);\n\n        c.fillAndStroke();\n\n        c.ellipse(w * 0.4, hv * 0.33, w * 0.2, hv * 0.33);\n        c.fillAndStroke();\n\n        c.translate(-x, -y);\n    };\n\n    mxShapePidValve.prototype.drawCheckValve = function (c, x, y, w, h, actuator, actH) {\n        var fillColor = mxUtils.getValue(this.style, mxConstants.STYLE_FILLCOLOR, '#ffffff');\n        var strokeColor = mxUtils.getValue(this.style, mxConstants.STYLE_STROKECOLOR, '#000000');\n\n        var yv = y + actH;\n        var hv = h - actH;\n\n        c.translate(x, yv);\n        c.begin();\n        c.moveTo(0, 0);\n        c.lineTo(0, hv);\n        c.moveTo(w, 0);\n        c.lineTo(w, hv);\n        c.moveTo(w * 0.05, hv * 0.05);\n        c.lineTo(w * 0.95, hv * 0.95);\n        c.fillAndStroke();\n\n        c.begin();\n        c.moveTo(w * 0.8925, hv * 0.815);\n        c.lineTo(w * 0.957, hv * 0.955);\n        c.lineTo(w * 0.85, hv * 0.928);\n        c.close();\n        c.setFillColor(strokeColor);\n        c.fillAndStroke();\n        c.setFillColor(fillColor);\n\n        c.translate(-x, -y);\n    };\n\n    mxShapePidValve.prototype.isGateVariant = function (valveType) {\n        if (valveType === mxShapePidValve.prototype.cst.GATE ||\n            valveType === mxShapePidValve.prototype.cst.BALL ||\n            valveType === mxShapePidValve.prototype.cst.PLUG ||\n            valveType === mxShapePidValve.prototype.cst.NEEDLE ||\n            valveType === mxShapePidValve.prototype.cst.SELF_DRAINING ||\n            valveType === mxShapePidValve.prototype.cst.GLOBE) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n\n    mxShapePidValve.prototype.isAngleVariant = function (valveType) {\n        if (valveType === mxShapePidValve.prototype.cst.ANGLE ||\n            valveType === mxShapePidValve.prototype.cst.ANGLE_GLOBE ||\n            valveType === mxShapePidValve.prototype.cst.THREE_WAY ||\n            valveType === mxShapePidValve.prototype.cst.ANGLE_BLOWDOWN) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n\n    mxShapePidValve.prototype.isSquareVariant = function (actType) {\n        if (actType === mxShapePidValve.prototype.cst.PILOT ||\n            actType === mxShapePidValve.prototype.cst.SOLENOID ||\n            actType === mxShapePidValve.prototype.cst.POWERED ||\n            actType === mxShapePidValve.prototype.cst.DIGITAL ||\n            actType === mxShapePidValve.prototype.cst.WEIGHT ||\n            actType === mxShapePidValve.prototype.cst.KEY) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n\n    mxCellRenderer.registerShape(mxShapePidValve.prototype.cst.SHAPE_VALVE, mxShapePidValve);\n\n    //**********************************************************************************************************************************************************\n    //Integrated Block And Bleed Valve\n    //**********************************************************************************************************************************************************\n    /**\n    * Extends mxShape.\n    */\n    function mxShapePidIntBlockBleedValve(bounds, fill, stroke, strokewidth) {\n        mxShape.call(this);\n        this.bounds = bounds;\n        this.fill = fill;\n        this.stroke = stroke;\n        this.strokewidth = (strokewidth != null) ? strokewidth : 1;\n    };\n\n    /**\n    * Extends mxShapePidValve.\n    */\n    mxUtils.extend(mxShapePidIntBlockBleedValve, mxShapePidValve);\n\n    /**\n    * Function: paintVertexShape\n    * \n    * Paints the vertex shape.\n    */\n    mxShapePidIntBlockBleedValve.prototype.paintVertexShape = function (c, x, y, w, h) {\n        var actuator = mxUtils.getValue(this.style, mxShapePidIntBlockBleedValve.prototype.cst.ACTUATOR, mxShapePidIntBlockBleedValve.prototype.cst.NONE);\n        var actH = 0;\n\n        if (actuator !== 'none') {\n            actH = h * 0.2353;\n        }\n\n        c.translate(x, y);\n        c.setLineJoin('round');\n\n        this.background(c, x, y, w, h, actuator, actH);\n        c.setShadow(false);\n        this.foreground(c, x, y, w, h, actuator, actH);\n    };\n\n    mxShapePidIntBlockBleedValve.prototype.background = function (c, x, y, w, h, actuator, actH) {\n        //draw the actuator\n        if (actuator !== mxShapePidIntBlockBleedValve.prototype.cst.NONE) {\n            this.drawActuatorBg(c, x, y, w, h, actuator);\n        }\n\n        //draw the valve body\n        this.drawValveBg(c, 0, actH, w, h - actH);\n    };\n\n    mxShapePidIntBlockBleedValve.prototype.foreground = function (c, x, y, w, h, actuator, actH) {\n        //draw the actuator\n        if (actuator !== mxShapePidIntBlockBleedValve.prototype.cst.NONE) {\n            this.drawActuatorFg(c, x, y, w, h, actuator);\n        }\n    };\n\n    mxShapePidIntBlockBleedValve.prototype.drawValveBg = function (c, x, y, w, h) {\n        var fillColor = mxUtils.getValue(this.style, mxConstants.STYLE_FILLCOLOR, '#ffffff');\n        var strokeColor = mxUtils.getValue(this.style, mxConstants.STYLE_STROKECOLOR, '#000000');\n\n        c.translate(x, y);\n        c.begin();\n        c.moveTo(0, 0);\n        c.lineTo(w * 0.5, h * 0.23);\n        c.lineTo(0, h * 0.46);\n        c.close();\n        c.moveTo(w * 0.5, h * 0.23);\n        c.lineTo(w, 0);\n        c.lineTo(w, h * 0.46);\n        c.close();\n        c.fillAndStroke();\n\n        c.begin();\n        c.moveTo(w * 0.5, h * 0.23);\n        c.lineTo(w * 0.5, h * 0.5);\n        c.stroke();\n\n        c.setFillColor(strokeColor);\n        c.begin();\n        c.moveTo(w * 0.3, h * 0.5);\n        c.lineTo(w * 0.7, h * 0.5);\n        c.lineTo(w * 0.5, h * 0.75);\n        c.close();\n        c.fillAndStroke();\n\n        c.begin();\n        c.moveTo(w * 0.3, h);\n        c.lineTo(w * 0.5, h * 0.75);\n        c.lineTo(w * 0.7, h);\n        c.fillAndStroke();\n        c.setFillColor(fillColor);\n\n        c.translate(-x, -y);\n    };\n\n    mxShapePidIntBlockBleedValve.prototype.drawActuatorBg = function (c, x, y, w, h, actuator) {\n        if (this.isSquareVariant(actuator)) {\n            c.translate(w * 0.325, 0);\n            this.drawSquareAct(c, w * 0.35, h * 0.4112, actuator);\n            c.translate(- w * 0.325, 0);\n        }\n        else if (actuator === mxShapePidIntBlockBleedValve.prototype.cst.MANUAL) {\n            c.translate(w * 0.25, h * 0.0882);\n            this.drawManAct(c, w * 0.5, h * 0.323);\n            c.translate(- w * 0.25, - h * 0.0882);\n        }\n        else if (actuator === mxShapePidIntBlockBleedValve.prototype.cst.DIAPHRAGM) {\n            c.translate(w * 0.25, h * 0.0588);\n            this.drawDiaphAct(c, w * 0.5, h * 0.3524);\n            c.translate(- w * 0.25, - h * 0.0588);\n        }\n        else if (actuator === mxShapePidIntBlockBleedValve.prototype.cst.BALANCED_DIAPHRAGM) {\n            c.translate(w * 0.25, h * 0.0588);\n            this.drawBalDiaphActBg(c, w * 0.5, h * 0.3524);\n            c.translate(- w * 0.25, - h * 0.0588);\n        }\n        else if (actuator === mxShapePidIntBlockBleedValve.prototype.cst.MOTOR || actuator === mxShapePidIntBlockBleedValve.prototype.cst.ELECTRO_HYDRAULIC) {\n            c.translate(w * 0.325, 0);\n            this.drawCircleAct(c, w * 0.35, h * 0.4112, actuator);\n            c.translate(- w * 0.325, 0);\n        }\n        else if (actuator === mxShapePidIntBlockBleedValve.prototype.cst.SPRING) {\n            c.translate(w * 0.36, 0);\n            this.drawSpringAct(c, w * 0.28, h * 0.4112);\n            c.translate(- w * 0.36, 0);\n        }\n        else if (actuator === mxShapePidIntBlockBleedValve.prototype.cst.SOLENOID_MANUAL_RESET) {\n            c.translate(w * 0.325, 0);\n            this.drawSolenoidManResetAct(c, w * 0.575, h * 0.4112);\n            c.translate(- w * 0.325, 0);\n        }\n        else if (actuator === mxShapePidIntBlockBleedValve.prototype.cst.SINGLE_ACTING) {\n            c.translate(w * 0.35, 0);\n            this.drawSingActingActBg(c, w * 0.65, h * 0.4112);\n            c.translate(- w * 0.35, 0);\n        }\n        else if (actuator === mxShapePidIntBlockBleedValve.prototype.cst.DOUBLE_ACTING) {\n            c.translate(w * 0.35, 0);\n            this.drawDblActingActBg(c, w * 0.65, h * 0.4112);\n            c.translate(- w * 0.35, 0);\n        }\n        else if (actuator === mxShapePidIntBlockBleedValve.prototype.cst.PILOT_CYLINDER) {\n            c.translate(w * 0.35, 0);\n            this.drawPilotCylinderActBg(c, w * 0.65, h * 0.4112);\n            c.translate(- w * 0.35, 0);\n        }\n    };\n\n    mxShapePidIntBlockBleedValve.prototype.drawActuatorFg = function (c, x, y, w, h, actuator) {\n        if (actuator === mxShapePidIntBlockBleedValve.prototype.cst.BALANCED_DIAPHRAGM) {\n            c.translate(w * 0.25, h * 0.0588);\n            this.drawBalDiaphActFg(c, w * 0.5, h * 0.3524);\n            c.translate(- w * 0.25, - h * 0.0588);\n        }\n        else if (actuator === mxShapePidIntBlockBleedValve.prototype.cst.SINGLE_ACTING ||\n            actuator === mxShapePidIntBlockBleedValve.prototype.cst.DOUBLE_ACTING ||\n            actuator === mxShapePidIntBlockBleedValve.prototype.cst.PILOT_CYLINDER) {\n            c.translate(w * 0.35, 0);\n            this.drawActingActFg(c, w * 0.65, h * 0.4112);\n            c.translate(- w * 0.35, 0);\n        }\n    };\n\n    mxCellRenderer.registerShape('mxgraph.pid2valves.blockBleedValve', mxShapePidIntBlockBleedValve);\n\n    //**********************************************************************************************************************************************************\n    //Auto Recirculation Valve\n    //**********************************************************************************************************************************************************\n    /**\n     * Extends mxShape.\n     */\n    function mxShapePidAutoRecircValve(bounds, fill, stroke, strokewidth) {\n        mxShape.call(this);\n        this.bounds = bounds;\n        this.fill = fill;\n        this.stroke = stroke;\n        this.strokewidth = (strokewidth != null) ? strokewidth : 1;\n    };\n\n    /**\n     * Extends mxShape.\n     */\n    mxUtils.extend(mxShapePidAutoRecircValve, mxShape);\n\n\n    /**\n     * Function: paintVertexShape\n     * \n     * Paints the vertex shape.\n     */\n    mxShapePidAutoRecircValve.prototype.paintVertexShape = function (c, x, y, w, h) {\n        c.setLineJoin('round');\n        c.translate(x, y);\n\n        //background\n        c.rect(0, 0, w, h);\n        c.fillAndStroke();\n        c.setShadow(false);\n\n        //foreground\n        c.begin();\n        c.moveTo(w * 0.08, h * 0.08);\n        c.lineTo(w * 0.08, h * 0.92);\n        c.moveTo(w * 0.92, h * 0.08);\n        c.lineTo(w * 0.92, h * 0.92);\n        c.moveTo(w * 0.12, h * 0.122);\n        c.lineTo(w * 0.8738, h * 0.8837);\n\n        c.moveTo(w * 0.5, 0);\n        c.lineTo(w * 0.55, h * 0.05);\n        c.lineTo(w * 0.45, h * 0.15);\n        c.lineTo(w * 0.55, h * 0.25);\n        c.lineTo(w * 0.45, h * 0.35);\n        c.lineTo(w * 0.55, h * 0.45);\n        c.lineTo(w * 0.49, h * 0.5);\n        c.stroke();\n\n        var fillColor = mxUtils.getValue(this.style, mxConstants.STYLE_FILLCOLOR, '#ffffff');\n        var strokeColor = mxUtils.getValue(this.style, mxConstants.STYLE_STROKECOLOR, '#000000');\n\n        c.begin();\n        c.moveTo(w * 0.8257, h * 0.7695);\n        c.lineTo(w * 0.8797, h * 0.888);\n        c.lineTo(w * 0.79, h * 0.8651);\n        c.close();\n        c.setFillColor(strokeColor);\n        c.fillAndStroke();\n        c.setFillColor(fillColor);\n    };\n\n    mxCellRenderer.registerShape('mxgraph.pid2valves.autoRecircValve', mxShapePidAutoRecircValve);\n    /**\n     * $Id: mxPidInstruments.js,v 1.4 2014/01/21 13:10:17 gaudenz Exp $\n     * Copyright (c) 2006-2013, JGraph Ltd\n     */\n\n    //**********************************************************************************************************************************************************\n    //Discrete Instrument\n    //**********************************************************************************************************************************************************\n    /**\n     * Extends mxShape.\n     */\n    function mxShapePidDiscInst(bounds, fill, stroke, strokewidth) {\n        mxShape.call(this);\n        this.bounds = bounds;\n        this.fill = fill;\n        this.stroke = stroke;\n        this.strokewidth = (strokewidth != null) ? strokewidth : 1;\n    };\n\n    /**\n     * Extends mxShape.\n     */\n    mxUtils.extend(mxShapePidDiscInst, mxShape);\n\n    mxShapePidDiscInst.prototype.cst = {\n        SHAPE_DISC_INST: 'mxgraph.pid2inst.discInst',\n        MOUNTING: 'mounting',\n        FIELD: 'field',\n        ROOM: 'room',\n        INACCESSIBLE: 'inaccessible',\n        LOCAL: 'local'\n    };\n\n    /**\n     * Function: paintVertexShape\n     * \n     * Paints the vertex shape.\n     */\n    mxShapePidDiscInst.prototype.paintVertexShape = function (c, x, y, w, h) {\n        c.translate(x, y);\n        this.background(c, x, y, w, h);\n        c.setShadow(false);\n        this.foreground(c, x, y, w, h);\n    };\n\n    mxShapePidDiscInst.prototype.background = function (c, x, y, w, h) {\n        c.ellipse(0, 0, w, h);\n        c.fillAndStroke();\n    };\n\n    mxShapePidDiscInst.prototype.foreground = function (c, x, y, w, h) {\n        var mounting = mxUtils.getValue(this.style, mxShapePidDiscInst.prototype.cst.MOUNTING, 'field');\n\n        if (mounting === mxShapePidDiscInst.prototype.cst.ROOM) {\n            c.begin();\n            c.moveTo(0, h * 0.5);\n            c.lineTo(w, h * 0.5);\n            c.stroke();\n        }\n        else if (mounting === mxShapePidDiscInst.prototype.cst.INACCESSIBLE) {\n            c.setDashed(true);\n            c.begin();\n            c.moveTo(0, h * 0.5);\n            c.lineTo(w, h * 0.5);\n            c.stroke();\n        }\n        else if (mounting === mxShapePidDiscInst.prototype.cst.LOCAL) {\n            c.begin();\n            c.moveTo(w * 0.005, h * 0.48);\n            c.lineTo(w * 0.995, h * 0.48);\n            c.moveTo(w * 0.005, h * 0.52);\n            c.lineTo(w * 0.995, h * 0.52);\n            c.stroke();\n        }\n    };\n\n    mxCellRenderer.registerShape(mxShapePidDiscInst.prototype.cst.SHAPE_DISC_INST, mxShapePidDiscInst);\n\n    mxShapePidDiscInst.prototype.constraints = [\n        new mxConnectionConstraint(new mxPoint(0.5, 0), true),\n        new mxConnectionConstraint(new mxPoint(0.5, 1), true),\n        new mxConnectionConstraint(new mxPoint(0, 0.5), true),\n        new mxConnectionConstraint(new mxPoint(1, 0.5), true),\n        new mxConnectionConstraint(new mxPoint(0.145, 0.145), false),\n        new mxConnectionConstraint(new mxPoint(0.145, 0.855), false),\n        new mxConnectionConstraint(new mxPoint(0.855, 0.145), false),\n        new mxConnectionConstraint(new mxPoint(0.855, 0.855), false)\n    ];\n\n    //**********************************************************************************************************************************************************\n    //Shared Control/Display\n    //**********************************************************************************************************************************************************\n    /**\n    * Extends mxShape.\n    */\n    function mxShapePidSharedCont(bounds, fill, stroke, strokewidth) {\n        mxShape.call(this);\n        this.bounds = bounds;\n        this.fill = fill;\n        this.stroke = stroke;\n        this.strokewidth = (strokewidth != null) ? strokewidth : 1;\n    };\n\n    /**\n    * Extends mxShape.\n    */\n    mxUtils.extend(mxShapePidSharedCont, mxShape);\n\n    mxShapePidSharedCont.prototype.cst = {\n        SHAPE_SHARED_CONT: 'mxgraph.pid2inst.sharedCont',\n        MOUNTING: 'mounting',\n        FIELD: 'field',\n        ROOM: 'room',\n        INACCESSIBLE: 'inaccessible',\n        LOCAL: 'local'\n    };\n\n    /**\n    * Function: paintVertexShape\n    * \n    * Paints the vertex shape.\n    */\n    mxShapePidSharedCont.prototype.paintVertexShape = function (c, x, y, w, h) {\n        c.translate(x, y);\n        this.background(c, x, y, w, h);\n        c.setShadow(false);\n        this.foreground(c, x, y, w, h);\n    };\n\n    mxShapePidSharedCont.prototype.background = function (c, x, y, w, h) {\n        c.rect(0, 0, w, h);\n        c.fillAndStroke();\n    };\n\n    mxShapePidSharedCont.prototype.foreground = function (c, x, y, w, h) {\n        var mounting = mxUtils.getValue(this.style, mxShapePidSharedCont.prototype.cst.MOUNTING, 'field');\n\n        c.ellipse(0, 0, w, h);\n        c.fillAndStroke();\n\n        if (mounting === mxShapePidSharedCont.prototype.cst.ROOM) {\n            c.begin();\n            c.moveTo(0, h * 0.5);\n            c.lineTo(w, h * 0.5);\n            c.stroke();\n        }\n        else if (mounting === mxShapePidSharedCont.prototype.cst.INACCESSIBLE) {\n            c.setDashed(true);\n            c.begin();\n            c.moveTo(0, h * 0.5);\n            c.lineTo(w, h * 0.5);\n            c.stroke();\n        }\n        else if (mounting === mxShapePidDiscInst.prototype.cst.LOCAL) {\n            c.begin();\n            c.moveTo(w * 0.005, h * 0.48);\n            c.lineTo(w * 0.995, h * 0.48);\n            c.moveTo(w * 0.005, h * 0.52);\n            c.lineTo(w * 0.995, h * 0.52);\n            c.stroke();\n        }\n    };\n\n    mxCellRenderer.registerShape(mxShapePidSharedCont.prototype.cst.SHAPE_SHARED_CONT, mxShapePidSharedCont);\n\n    mxShapePidSharedCont.prototype.constraints = [\n        new mxConnectionConstraint(new mxPoint(0.5, 0), true),\n        new mxConnectionConstraint(new mxPoint(0.5, 1), true),\n        new mxConnectionConstraint(new mxPoint(0, 0.5), true),\n        new mxConnectionConstraint(new mxPoint(1, 0.5), true),\n        new mxConnectionConstraint(new mxPoint(0, 0), false),\n        new mxConnectionConstraint(new mxPoint(0, 1), false),\n        new mxConnectionConstraint(new mxPoint(1, 0), false),\n        new mxConnectionConstraint(new mxPoint(1, 1), false)\n    ];\n\n    //**********************************************************************************************************************************************************\n    //Computer Function\n    //**********************************************************************************************************************************************************\n    /**\n    * Extends mxShape.\n    */\n    function mxShapePidCompFunc(bounds, fill, stroke, strokewidth) {\n        mxShape.call(this);\n        this.bounds = bounds;\n        this.fill = fill;\n        this.stroke = stroke;\n        this.strokewidth = (strokewidth != null) ? strokewidth : 1;\n    };\n\n    /**\n    * Extends mxShape.\n    */\n    mxUtils.extend(mxShapePidCompFunc, mxShape);\n\n    mxShapePidCompFunc.prototype.cst = {\n        SHAPE_COMP_FUNC: 'mxgraph.pid2inst.compFunc',\n        MOUNTING: 'mounting',\n        FIELD: 'field',\n        ROOM: 'room',\n        INACCESSIBLE: 'inaccessible',\n        LOCAL: 'local'\n    };\n\n    /**\n    * Function: paintVertexShape\n    * \n    * Paints the vertex shape.\n    */\n    mxShapePidCompFunc.prototype.paintVertexShape = function (c, x, y, w, h) {\n        c.translate(x, y);\n        this.background(c, x, y, w, h);\n        c.setShadow(false);\n        this.foreground(c, x, y, w, h);\n    };\n\n    mxShapePidCompFunc.prototype.background = function (c, x, y, w, h) {\n        c.begin();\n        c.moveTo(0, h * 0.5);\n        c.lineTo(w * 0.25, 0);\n        c.lineTo(w * 0.75, 0);\n        c.lineTo(w, h * 0.5);\n        c.lineTo(w * 0.75, h);\n        c.lineTo(w * 0.25, h);\n        c.close();\n        c.fillAndStroke();\n    };\n\n    mxShapePidCompFunc.prototype.foreground = function (c, x, y, w, h) {\n        var mounting = mxUtils.getValue(this.style, mxShapePidCompFunc.prototype.cst.MOUNTING, 'field');\n\n        if (mounting === mxShapePidCompFunc.prototype.cst.ROOM) {\n            c.begin();\n            c.moveTo(0, h * 0.5);\n            c.lineTo(w, h * 0.5);\n            c.stroke();\n        }\n        else if (mounting === mxShapePidCompFunc.prototype.cst.INACCESSIBLE) {\n            c.setDashed(true);\n            c.begin();\n            c.moveTo(0, h * 0.5);\n            c.lineTo(w, h * 0.5);\n            c.stroke();\n        }\n        else if (mounting === mxShapePidDiscInst.prototype.cst.LOCAL) {\n            c.begin();\n            c.moveTo(w * 0.01, h * 0.48);\n            c.lineTo(w * 0.99, h * 0.48);\n            c.moveTo(w * 0.01, h * 0.52);\n            c.lineTo(w * 0.99, h * 0.52);\n            c.stroke();\n        }\n    };\n\n    mxCellRenderer.registerShape(mxShapePidCompFunc.prototype.cst.SHAPE_COMP_FUNC, mxShapePidCompFunc);\n\n    mxShapePidCompFunc.prototype.constraints = [\n        new mxConnectionConstraint(new mxPoint(0.5, 0), true),\n        new mxConnectionConstraint(new mxPoint(0.5, 1), true),\n        new mxConnectionConstraint(new mxPoint(0, 0.5), true),\n        new mxConnectionConstraint(new mxPoint(1, 0.5), true),\n        new mxConnectionConstraint(new mxPoint(0.25, 0), false),\n        new mxConnectionConstraint(new mxPoint(0.75, 0), false),\n        new mxConnectionConstraint(new mxPoint(0.25, 1), false),\n        new mxConnectionConstraint(new mxPoint(0.75, 1), false)\n    ];\n\n    //**********************************************************************************************************************************************************\n    //Computer Function\n    //**********************************************************************************************************************************************************\n    /**\n    * Extends mxShape.\n    */\n    function mxShapePidProgLogCont(bounds, fill, stroke, strokewidth) {\n        mxShape.call(this);\n        this.bounds = bounds;\n        this.fill = fill;\n        this.stroke = stroke;\n        this.strokewidth = (strokewidth != null) ? strokewidth : 1;\n    };\n\n    /**\n    * Extends mxShape.\n    */\n    mxUtils.extend(mxShapePidProgLogCont, mxShape);\n\n    mxShapePidProgLogCont.prototype.cst = {\n        SHAPE_PROG_LOG_CONT: 'mxgraph.pid2inst.progLogCont',\n        MOUNTING: 'mounting',\n        FIELD: 'field',\n        ROOM: 'room',\n        INACCESSIBLE: 'inaccessible',\n        LOCAL: 'local'\n    };\n\n    /**\n    * Function: paintVertexShape\n    * \n    * Paints the vertex shape.\n    */\n    mxShapePidProgLogCont.prototype.paintVertexShape = function (c, x, y, w, h) {\n        c.translate(x, y);\n        this.background(c, x, y, w, h);\n        c.setShadow(false);\n        this.foreground(c, x, y, w, h);\n    };\n\n    mxShapePidProgLogCont.prototype.background = function (c, x, y, w, h) {\n        c.rect(0, 0, w, h);\n        c.fillAndStroke();\n    };\n\n    mxShapePidProgLogCont.prototype.foreground = function (c, x, y, w, h) {\n        var mounting = mxUtils.getValue(this.style, mxShapePidProgLogCont.prototype.cst.MOUNTING, 'field');\n\n        c.begin();\n        c.moveTo(0, h * 0.5);\n        c.lineTo(w * 0.5, 0);\n        c.lineTo(w, h * 0.5);\n        c.lineTo(w * 0.5, h);\n        c.close();\n        c.stroke();\n\n        if (mounting === mxShapePidProgLogCont.prototype.cst.ROOM) {\n            c.begin();\n            c.moveTo(0, h * 0.5);\n            c.lineTo(w, h * 0.5);\n            c.stroke();\n        }\n        else if (mounting === mxShapePidProgLogCont.prototype.cst.INACCESSIBLE) {\n            c.setDashed(true);\n            c.begin();\n            c.moveTo(0, h * 0.5);\n            c.lineTo(w, h * 0.5);\n            c.stroke();\n        }\n        else if (mounting === mxShapePidDiscInst.prototype.cst.LOCAL) {\n            c.begin();\n            c.moveTo(w * 0.02, h * 0.48);\n            c.lineTo(w * 0.98, h * 0.48);\n            c.moveTo(w * 0.02, h * 0.52);\n            c.lineTo(w * 0.98, h * 0.52);\n            c.stroke();\n        }\n    };\n\n    mxCellRenderer.registerShape(mxShapePidProgLogCont.prototype.cst.SHAPE_PROG_LOG_CONT, mxShapePidProgLogCont);\n\n    mxShapePidProgLogCont.prototype.constraints = [\n        new mxConnectionConstraint(new mxPoint(0.5, 0), true),\n        new mxConnectionConstraint(new mxPoint(0.5, 1), true),\n        new mxConnectionConstraint(new mxPoint(0, 0.5), true),\n        new mxConnectionConstraint(new mxPoint(1, 0.5), true),\n        new mxConnectionConstraint(new mxPoint(0, 0), false),\n        new mxConnectionConstraint(new mxPoint(0, 1), false),\n        new mxConnectionConstraint(new mxPoint(1, 0), false),\n        new mxConnectionConstraint(new mxPoint(1, 1), false)\n    ];\n\n    //**********************************************************************************************************************************************************\n    //Indicator\n    //**********************************************************************************************************************************************************\n    /**\n    * Extends mxShape.\n    */\n    function mxShapePidIndicator(bounds, fill, stroke, strokewidth) {\n        mxShape.call(this);\n        this.bounds = bounds;\n        this.fill = fill;\n        this.stroke = stroke;\n        this.strokewidth = (strokewidth != null) ? strokewidth : 1;\n    };\n\n    /**\n    * Extends mxShape.\n    */\n    mxUtils.extend(mxShapePidIndicator, mxShape);\n\n    mxShapePidIndicator.prototype.cst = {\n        SHAPE_INDICATOR: 'mxgraph.pid2inst.indicator',\n        MOUNTING: 'mounting',\n        FIELD: 'field',\n        ROOM: 'room',\n        INACCESSIBLE: 'inaccessible',\n        LOCAL: 'local',\n        IND_TYPE: 'indType',\n        INSTRUMENT: 'inst',\n        CONTROL: 'ctrl',\n        FUNCTION: 'func',\n        PLC: 'plc'\n    };\n\n    /**\n    * Function: paintVertexShape\n    * \n    * Paints the vertex shape.\n    */\n    mxShapePidIndicator.prototype.paintVertexShape = function (c, x, y, w, h) {\n        c.translate(x, y);\n        this.background(c, x, y, w, h);\n        c.setShadow(false);\n        this.foreground(c, x, y, w, h);\n    };\n\n    mxShapePidIndicator.prototype.background = function (c, x, y, w, h) {\n        var type = mxUtils.getValue(this.style, mxShapePidIndicator.prototype.cst.IND_TYPE, 'inst');\n\n        c.begin();\n        c.moveTo(w * 0.5, w);\n        c.lineTo(w * 0.5, h);\n        c.stroke();\n\n        if (type === mxShapePidIndicator.prototype.cst.INSTRUMENT) {\n            c.ellipse(0, 0, w, w);\n            c.fillAndStroke();\n        }\n        else if (type === mxShapePidIndicator.prototype.cst.CONTROL) {\n            c.rect(0, 0, w, w);\n            c.fillAndStroke();\n        }\n        else if (type === mxShapePidIndicator.prototype.cst.FUNCTION) {\n            c.begin();\n            c.moveTo(0, w * 0.5);\n            c.lineTo(w * 0.25, 0);\n            c.lineTo(w * 0.75, 0);\n            c.lineTo(w, w * 0.5);\n            c.lineTo(w * 0.75, w);\n            c.lineTo(w * 0.25, w);\n            c.close();\n            c.fillAndStroke();\n        }\n        else if (type === mxShapePidIndicator.prototype.cst.PLC) {\n            c.rect(0, 0, w, w);\n            c.fillAndStroke();\n        }\n    };\n\n    mxShapePidIndicator.prototype.foreground = function (c, x, y, w, h) {\n        var mounting = mxUtils.getValue(this.style, mxShapePidIndicator.prototype.cst.MOUNTING, 'field');\n        var type = mxUtils.getValue(this.style, mxShapePidIndicator.prototype.cst.IND_TYPE, 'inst');\n\n        if (type === mxShapePidIndicator.prototype.cst.CONTROL) {\n            c.ellipse(0, 0, w, w);\n            c.stroke();\n        }\n        else if (type === mxShapePidIndicator.prototype.cst.PLC) {\n            c.begin();\n            c.moveTo(0, w * 0.5);\n            c.lineTo(w * 0.5, 0);\n            c.lineTo(w, w * 0.5);\n            c.lineTo(w * 0.5, w);\n            c.close();\n            c.stroke();\n        }\n\n        if (mounting === mxShapePidIndicator.prototype.cst.ROOM) {\n            c.begin();\n            c.moveTo(0, w * 0.5);\n            c.lineTo(w, w * 0.5);\n            c.stroke();\n        }\n        else if (mounting === mxShapePidIndicator.prototype.cst.INACCESSIBLE) {\n            c.setDashed(true);\n            c.begin();\n            c.moveTo(0, w * 0.5);\n            c.lineTo(w, w * 0.5);\n            c.stroke();\n        }\n        else if (mounting === mxShapePidIndicator.prototype.cst.LOCAL) {\n            c.begin();\n            c.moveTo(w * 0.005, w * 0.48);\n            c.lineTo(w * 0.995, w * 0.48);\n            c.moveTo(w * 0.005, w * 0.52);\n            c.lineTo(w * 0.995, w * 0.52);\n            c.stroke();\n        }\n    };\n\n    mxCellRenderer.registerShape(mxShapePidIndicator.prototype.cst.SHAPE_INDICATOR, mxShapePidIndicator);\n\n    mxShapePidIndicator.prototype.constraints = [new mxConnectionConstraint(new mxPoint(0.5, 1), true)];\n\n    //**********************************************************************************************************************************************************\n    //Logic\n    //**********************************************************************************************************************************************************\n    /**\n    * Extends mxShape.\n    */\n    function mxShapePidLogic(bounds, fill, stroke, strokewidth) {\n        mxShape.call(this);\n        this.bounds = bounds;\n        this.fill = fill;\n        this.stroke = stroke;\n        this.strokewidth = (strokewidth != null) ? strokewidth : 1;\n    };\n\n    /**\n    * Extends mxShape.\n    */\n    mxUtils.extend(mxShapePidLogic, mxShape);\n\n    mxShapePidLogic.prototype.cst = {\n        SHAPE_LOGIC: 'mxgraph.pid2inst.logic',\n        MOUNTING: 'mounting',\n        FIELD: 'field',\n        ROOM: 'room',\n        INACCESSIBLE: 'inaccessible',\n        LOCAL: 'local'\n    };\n\n    /**\n    * Function: paintVertexShape\n    * \n    * Paints the vertex shape.\n    */\n    mxShapePidLogic.prototype.paintVertexShape = function (c, x, y, w, h) {\n        c.translate(x, y);\n        this.background(c, x, y, w, h);\n        c.setShadow(false);\n        this.foreground(c, x, y, w, h);\n    };\n\n    mxShapePidLogic.prototype.background = function (c, x, y, w, h) {\n        c.begin();\n        c.moveTo(0, h * 0.5);\n        c.lineTo(w * 0.5, 0);\n        c.lineTo(w, h * 0.5);\n        c.lineTo(w * 0.5, h);\n        c.close();\n        c.fillAndStroke();\n    };\n\n    mxShapePidLogic.prototype.foreground = function (c, x, y, w, h) {\n        var mounting = mxUtils.getValue(this.style, mxShapePidLogic.prototype.cst.MOUNTING, 'field');\n\n        if (mounting === mxShapePidLogic.prototype.cst.ROOM) {\n            c.begin();\n            c.moveTo(0, h * 0.5);\n            c.lineTo(w, h * 0.5);\n            c.stroke();\n        }\n        else if (mounting === mxShapePidLogic.prototype.cst.INACCESSIBLE) {\n            c.setDashed(true);\n            c.begin();\n            c.moveTo(0, h * 0.5);\n            c.lineTo(w, h * 0.5);\n            c.stroke();\n        }\n        else if (mounting === mxShapePidLogic.prototype.cst.LOCAL) {\n            c.begin();\n            c.moveTo(w * 0.02, h * 0.48);\n            c.lineTo(w * 0.98, h * 0.48);\n            c.moveTo(w * 0.02, h * 0.52);\n            c.lineTo(w * 0.98, h * 0.52);\n            c.stroke();\n        }\n    };\n\n    mxCellRenderer.registerShape(mxShapePidLogic.prototype.cst.SHAPE_LOGIC, mxShapePidLogic);\n\n    mxShapePidLogic.prototype.constraints = [\n        new mxConnectionConstraint(new mxPoint(0.5, 0), true),\n        new mxConnectionConstraint(new mxPoint(0.5, 1), true),\n        new mxConnectionConstraint(new mxPoint(0, 0.5), true),\n        new mxConnectionConstraint(new mxPoint(1, 0.5), true),\n        new mxConnectionConstraint(new mxPoint(0.25, 0.25), false),\n        new mxConnectionConstraint(new mxPoint(0.25, 0.75), false),\n        new mxConnectionConstraint(new mxPoint(0.75, 0.25), false),\n        new mxConnectionConstraint(new mxPoint(0.75, 0.75), false)\n    ];\n}", "ColumnPosition" : 31, "DirectLinkUUID" : "", "DisplayName" : "BMCodeHost-11", "Exports" : "interface shapeCatalogue extends TWRuntimeWidget {execute(); \t    \t/**\t    \t * Should be invoked to dispatch an event to the Thingworx runtime, causing all actions bound to that event to execute.\n\t    \t * @param event - The name of the event to dispatch.\n\t    \t */\n\t\t\tdispatchEvent(event: string): void;\n\t    \t/**\n\t    \t * Invoked after any property has been updated as a result of a binding.\n\t    \t * This method will be invoked after the specific ..DidUpdateToValue method is invoked.\n\t    \t * Scripts can override this method to react to all property updates.\n\t    \t * @param event - The name of the event to dispatch.\n\t    \t */\n\t\t\tpropertyDidUpdateToValue(property: string, value: any | undefined): void;\n\t    \t/**\n\t    \t * Finds and returns the widget with the given name in the current mashup.\n\t    \t * @param name - The DisplayName of the widget to find.\n\t    \t * @return - The widget object if it was found, undefined otherwise.\n\t    \t */\n\t\t\twidgetNamed(name: string): TWRuntimeWidget | undefined;\n\t    \t/**\n\t    \t * Sends a property update to the given widget as if it came from a binding.\n\t    \t * Supported properties may be updated this way even if they are not bound to anything in the composer.\n\t    \t * @param widget - The widget object whose property should be updated.\n\t    \t * @param args - An object containing additional arguments. This object must have the following properties:\n\t    \t *\t\t\t\t\tforProperty {String} - The name of the property to update.\n\t    \t *\t\t\t\t\tvalue {AnyObject} - The value to which that property should update.\n\t    \t */\n\t\t\tdispatchPropertyUpdateToWidget(widget: any, args: SelfDispatchPropertyUpdateToWidgetArgs): void;\n\t    \t/**\n\t    \t * May be overriden by scripts that create an UI. This method receives the script's container as its parameter.\n\t    \t * It is the script's responsibility to add their content to the supplied container.\n\t    \t * @param container - The container in which the UI elements should be added.\n\t    \t */\n\t\t\trenderWithContainer(container: $): void;\n\t\t}\n", "FullScreen" : false, "Height" : 46, "Id" : "BMCodeHost-11", "Left" : 310, "ResponsiveLayout" : false, "RuntimeProperties" : "[{\"name\":\"execute\",\"dataType\":\"STRING\",\"type\":\"service\"}]", "Scope" : "local", "ScrollPosition" : 322, "ShowDataLoading" : true, "Title" : "shapeCatalogue", "Top" : 25, "Type" : "BMCodeHost", "Visible" : true, "Width" : 169, "Z-index" : 10, "__TypeDisplayName" : "Object" }, "Widgets" : [ ] }, { "Properties" : { "Area" : "UI", "Code" : "// defines the internal structure of a JSON mtp file\ninterface IPoint {\n    x: number;\n    y: number;\n}\n\nclass Point implements IPoint {\n    x: number;\n    y: number;\n\n    constructor(x: number, y: number) \n    constructor(value: string)\n    constructor(xOrValue: number | string, y?: number) {\n        if(typeof xOrValue == \"string\") {\n            const tokens = xOrValue.split(\",\");\n            if (tokens.length < 2) {\n                throw \"We need two points to create a mxPoint\"\n            }\n            this.x = parseFloat(tokens[0])\n            this.y = parseFloat(tokens[1])\n        } else {\n            this.x = xOrValue;\n            this.y = y as number;\n        }\n    }\n\n    equals(otherPoint: IPoint) {\n        return this.x == otherPoint.x && this.y == otherPoint.y;\n    }\n}\n\nfunction isNozzle(object: IPoint | Nozzle): object is Nozzle {\n    return 'type' in object && object.type == ElementType.NOZZLE;\n}\n\ninterface Shape extends IPoint {\n    width: number;\n    height: number;\n    rotation: number;\n}\n\nenum ElementType {\n    PIPE = \"Pipe\", \n    NOZZLE = \"Nozzle\",\n    VISUAL_ELEMENT = \"VisualElement\", \n    COMMUNICATION_INTERFACE = \"CommunicationInterface\", \n    COMMUNICATION_OBJECT = \"CommunicationObject\"\n}\n\ninterface GenericMptElement {\n    id: string;\n    name: string;\n    type: ElementType;\n}\n\ninterface PositionableElement extends IPoint {\n    // empty\n}\n\ninterface Nozzle extends GenericMptElement, PositionableElement {\n    externalConnectorId: string;\n    baseClass: string;\n}\n\ninterface VisualObject extends Shape, GenericMptElement {\n    viewType: string;\n    eClassVersion: string;\n    eClassClassification: string;\n    eClassIrdi: string;\n    refId: string;\n    nozzles: Nozzle[];\n    subElement?: Shape;\n}\n\ninterface PipeDefinition extends GenericMptElement {\n    source: IPoint | Nozzle;\n    target: IPoint | Nozzle;\n    waypoints: IPoint[];\n    nozzles: Nozzle[];\n}\n\ninterface CommunicationInterface extends GenericMptElement {\n    identifier: string;\n    namespace: string;\n    access: string;\n    endpoint: string;\n}\n\ninterface CommunicationObject extends GenericMptElement {\n    description: string;\n    interfaces: CommunicationInterface[];\n}\n\ninterface InteractibleElement {\n    obj: VisualObject;\n    communication?: CommunicationObject;\n}\n\ninterface HmiDiagram {\n    width: number;\n    height: number;\n    elements: InteractibleElement[];\n    pipes: PipeDefinition[];\n}\n\ninterface Window {\n    Point: typeof Point\n    ElementType: typeof ElementType,\n    isNozzle: typeof isNozzle\n}\nwindow[\"Point\"] = Point;\nwindow[\"ElementType\"] = ElementType;\nwindow[\"isNozzle\"] = isNozzle;", "ColumnPosition" : 1, "Description" : "", "DirectLinkUUID" : "", "DisplayName" : "BMTypescriptHost-12", "Exports" : "interface mtpJsonDef extends TWRuntimeWidget {\t    \t/**\t    \t * Should be invoked to dispatch an event to the Thingworx runtime, causing all actions bound to that event to execute.\n\t    \t * @param event - The name of the event to dispatch.\n\t    \t */\n\t\t\tdispatchEvent(event: string): void;\n\t    \t/**\n\t    \t * Invoked after any property has been updated as a result of a binding.\n\t    \t * This method will be invoked after the specific ..DidUpdateToValue method is invoked.\n\t    \t * Scripts can override this method to react to all property updates.\n\t    \t * @param event - The name of the event to dispatch.\n\t    \t */\n\t\t\tpropertyDidUpdateToValue(property: string, value: any | undefined): void;\n\t    \t/**\n\t    \t * Finds and returns the widget with the given name in the current mashup.\n\t    \t * @param name - The DisplayName of the widget to find.\n\t    \t * @return - The widget object if it was found, undefined otherwise.\n\t    \t */\n\t\t\twidgetNamed(name: string): TWRuntimeWidget | undefined;\n\t    \t/**\n\t    \t * Sends a property update to the given widget as if it came from a binding.\n\t    \t * Supported properties may be updated this way even if they are not bound to anything in the composer.\n\t    \t * @param widget - The widget object whose property should be updated.\n\t    \t * @param args - An object containing additional arguments. This object must have the following properties:\n\t    \t *\t\t\t\t\tforProperty {String} - The name of the property to update.\n\t    \t *\t\t\t\t\tvalue {AnyObject} - The value to which that property should update.\n\t    \t */\n\t\t\tdispatchPropertyUpdateToWidget(widget: any, args: SelfDispatchPropertyUpdateToWidgetArgs): void;\n\t    \t/**\n\t    \t * May be overriden by scripts that create an UI. This method receives the script's container as its parameter.\n\t    \t * It is the script's responsibility to add their content to the supplied container.\n\t    \t * @param container - The container in which the UI elements should be added.\n\t    \t */\n\t\t\trenderWithContainer(container: $): void;\n\t\t}\n", "FullScreen" : false, "Height" : 48, "Id" : "BMTypescriptHost-12", "Left" : 855, "ResponsiveLayout" : false, "RuntimeProperties" : "[]", "Scope" : "global", "ScrollPosition" : 1, "ShowDataLoading" : true, "Title" : "mtpJsonDef", "Top" : 15, "TranspiledCode" : "\"use strict\";\r\nclass Point {\r\n    constructor(xOrValue, y) {\r\n        if (typeof xOrValue == \"string\") {\r\n            const tokens = xOrValue.split(\",\");\r\n            if (tokens.length < 2) {\r\n                throw \"We need two points to create a mxPoint\";\r\n            }\r\n            this.x = parseFloat(tokens[0]);\r\n            this.y = parseFloat(tokens[1]);\r\n        }\r\n        else {\r\n            this.x = xOrValue;\r\n            this.y = y;\r\n        }\r\n    }\r\n    equals(otherPoint) {\r\n        return this.x == otherPoint.x && this.y == otherPoint.y;\r\n    }\r\n}\r\nfunction isNozzle(object) {\r\n    return 'type' in object && object.type == ElementType.NOZZLE;\r\n}\r\nvar ElementType;\r\n(function (ElementType) {\r\n    ElementType[\"PIPE\"] = \"Pipe\";\r\n    ElementType[\"NOZZLE\"] = \"Nozzle\";\r\n    ElementType[\"VISUAL_ELEMENT\"] = \"VisualElement\";\r\n    ElementType[\"COMMUNICATION_INTERFACE\"] = \"CommunicationInterface\";\r\n    ElementType[\"COMMUNICATION_OBJECT\"] = \"CommunicationObject\";\r\n})(ElementType || (ElementType = {}));\r\nwindow[\"Point\"] = Point;\r\nwindow[\"ElementType\"] = ElementType;\r\nwindow[\"isNozzle\"] = isNozzle;\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIjkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQU1BO0lBTUksWUFBWSxRQUF5QixFQUFFLENBQVU7UUFDN0MsSUFBRyxPQUFPLFFBQVEsSUFBSSxRQUFRLEVBQUU7WUFDNUIsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNuQyxJQUFJLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUNuQixNQUFNLHdDQUF3QyxDQUFBO2FBQ2pEO1lBQ0QsSUFBSSxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDOUIsSUFBSSxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7U0FDakM7YUFBTTtZQUNILElBQUksQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDO1lBQ2xCLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBVyxDQUFDO1NBQ3hCO0lBQ0wsQ0FBQztJQUVELE1BQU0sQ0FBQyxVQUFrQjtRQUNyQixPQUFPLElBQUksQ0FBQyxDQUFDLElBQUksVUFBVSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxDQUFDLENBQUM7SUFDNUQsQ0FBQztDQUNKO0FBRUQsa0JBQWtCLE1BQXVCO0lBQ3JDLE9BQU8sTUFBTSxJQUFJLE1BQU0sSUFBSSxNQUFNLENBQUMsSUFBSSxJQUFJLFdBQVcsQ0FBQyxNQUFNLENBQUM7QUFDakUsQ0FBQztBQVFELElBQUssV0FNSjtBQU5ELFdBQUssV0FBVztJQUNaLDRCQUFhLENBQUE7SUFDYixnQ0FBaUIsQ0FBQTtJQUNqQiwrQ0FBZ0MsQ0FBQTtJQUNoQyxpRUFBa0QsQ0FBQTtJQUNsRCwyREFBNEMsQ0FBQTtBQUNoRCxDQUFDLEVBTkksV0FBVyxLQUFYLFdBQVcsUUFNZjtBQStERCxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsS0FBSyxDQUFDO0FBQ3hCLE1BQU0sQ0FBQyxhQUFhLENBQUMsR0FBRyxXQUFXLENBQUM7QUFDcEMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGRlZmluZXMgdGhlIGludGVybmFsIHN0cnVjdHVyZSBvZiBhIEpTT04gbXRwIGZpbGVcbmludGVyZmFjZSBJUG9pbnQge1xuICAgIHg6IG51bWJlcjtcbiAgICB5OiBudW1iZXI7XG59XG5cbmNsYXNzIFBvaW50IGltcGxlbWVudHMgSVBvaW50IHtcbiAgICB4OiBudW1iZXI7XG4gICAgeTogbnVtYmVyO1xuXG4gICAgY29uc3RydWN0b3IoeDogbnVtYmVyLCB5OiBudW1iZXIpIFxuICAgIGNvbnN0cnVjdG9yKHZhbHVlOiBzdHJpbmcpXG4gICAgY29uc3RydWN0b3IoeE9yVmFsdWU6IG51bWJlciB8IHN0cmluZywgeT86IG51bWJlcikge1xuICAgICAgICBpZih0eXBlb2YgeE9yVmFsdWUgPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgY29uc3QgdG9rZW5zID0geE9yVmFsdWUuc3BsaXQoXCIsXCIpO1xuICAgICAgICAgICAgaWYgKHRva2Vucy5sZW5ndGggPCAyKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgXCJXZSBuZWVkIHR3byBwb2ludHMgdG8gY3JlYXRlIGEgbXhQb2ludFwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnggPSBwYXJzZUZsb2F0KHRva2Vuc1swXSlcbiAgICAgICAgICAgIHRoaXMueSA9IHBhcnNlRmxvYXQodG9rZW5zWzFdKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy54ID0geE9yVmFsdWU7XG4gICAgICAgICAgICB0aGlzLnkgPSB5IGFzIG51bWJlcjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGVxdWFscyhvdGhlclBvaW50OiBJUG9pbnQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMueCA9PSBvdGhlclBvaW50LnggJiYgdGhpcy55ID09IG90aGVyUG9pbnQueTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGlzTm96emxlKG9iamVjdDogSVBvaW50IHwgTm96emxlKTogb2JqZWN0IGlzIE5venpsZSB7XG4gICAgcmV0dXJuICd0eXBlJyBpbiBvYmplY3QgJiYgb2JqZWN0LnR5cGUgPT0gRWxlbWVudFR5cGUuTk9aWkxFO1xufVxuXG5pbnRlcmZhY2UgU2hhcGUgZXh0ZW5kcyBJUG9pbnQge1xuICAgIHdpZHRoOiBudW1iZXI7XG4gICAgaGVpZ2h0OiBudW1iZXI7XG4gICAgcm90YXRpb246IG51bWJlcjtcbn1cblxuZW51bSBFbGVtZW50VHlwZSB7XG4gICAgUElQRSA9IFwiUGlwZVwiLCBcbiAgICBOT1paTEUgPSBcIk5venpsZVwiLFxuICAgIFZJU1VBTF9FTEVNRU5UID0gXCJWaXN1YWxFbGVtZW50XCIsIFxuICAgIENPTU1VTklDQVRJT05fSU5URVJGQUNFID0gXCJDb21tdW5pY2F0aW9uSW50ZXJmYWNlXCIsIFxuICAgIENPTU1VTklDQVRJT05fT0JKRUNUID0gXCJDb21tdW5pY2F0aW9uT2JqZWN0XCJcbn1cblxuaW50ZXJmYWNlIEdlbmVyaWNNcHRFbGVtZW50IHtcbiAgICBpZDogc3RyaW5nO1xuICAgIG5hbWU6IHN0cmluZztcbiAgICB0eXBlOiBFbGVtZW50VHlwZTtcbn1cblxuaW50ZXJmYWNlIFBvc2l0aW9uYWJsZUVsZW1lbnQgZXh0ZW5kcyBJUG9pbnQge1xuICAgIC8vIGVtcHR5XG59XG5cbmludGVyZmFjZSBOb3p6bGUgZXh0ZW5kcyBHZW5lcmljTXB0RWxlbWVudCwgUG9zaXRpb25hYmxlRWxlbWVudCB7XG4gICAgZXh0ZXJuYWxDb25uZWN0b3JJZDogc3RyaW5nO1xuICAgIGJhc2VDbGFzczogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgVmlzdWFsT2JqZWN0IGV4dGVuZHMgU2hhcGUsIEdlbmVyaWNNcHRFbGVtZW50IHtcbiAgICB2aWV3VHlwZTogc3RyaW5nO1xuICAgIGVDbGFzc1ZlcnNpb246IHN0cmluZztcbiAgICBlQ2xhc3NDbGFzc2lmaWNhdGlvbjogc3RyaW5nO1xuICAgIGVDbGFzc0lyZGk6IHN0cmluZztcbiAgICByZWZJZDogc3RyaW5nO1xuICAgIG5venpsZXM6IE5venpsZVtdO1xuICAgIHN1YkVsZW1lbnQ/OiBTaGFwZTtcbn1cblxuaW50ZXJmYWNlIFBpcGVEZWZpbml0aW9uIGV4dGVuZHMgR2VuZXJpY01wdEVsZW1lbnQge1xuICAgIHNvdXJjZTogSVBvaW50IHwgTm96emxlO1xuICAgIHRhcmdldDogSVBvaW50IHwgTm96emxlO1xuICAgIHdheXBvaW50czogSVBvaW50W107XG4gICAgbm96emxlczogTm96emxlW107XG59XG5cbmludGVyZmFjZSBDb21tdW5pY2F0aW9uSW50ZXJmYWNlIGV4dGVuZHMgR2VuZXJpY01wdEVsZW1lbnQge1xuICAgIGlkZW50aWZpZXI6IHN0cmluZztcbiAgICBuYW1lc3BhY2U6IHN0cmluZztcbiAgICBhY2Nlc3M6IHN0cmluZztcbiAgICBlbmRwb2ludDogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgQ29tbXVuaWNhdGlvbk9iamVjdCBleHRlbmRzIEdlbmVyaWNNcHRFbGVtZW50IHtcbiAgICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICAgIGludGVyZmFjZXM6IENvbW11bmljYXRpb25JbnRlcmZhY2VbXTtcbn1cblxuaW50ZXJmYWNlIEludGVyYWN0aWJsZUVsZW1lbnQge1xuICAgIG9iajogVmlzdWFsT2JqZWN0O1xuICAgIGNvbW11bmljYXRpb24/OiBDb21tdW5pY2F0aW9uT2JqZWN0O1xufVxuXG5pbnRlcmZhY2UgSG1pRGlhZ3JhbSB7XG4gICAgd2lkdGg6IG51bWJlcjtcbiAgICBoZWlnaHQ6IG51bWJlcjtcbiAgICBlbGVtZW50czogSW50ZXJhY3RpYmxlRWxlbWVudFtdO1xuICAgIHBpcGVzOiBQaXBlRGVmaW5pdGlvbltdO1xufVxuXG5pbnRlcmZhY2UgV2luZG93IHtcbiAgICBQb2ludDogdHlwZW9mIFBvaW50XG4gICAgRWxlbWVudFR5cGU6IHR5cGVvZiBFbGVtZW50VHlwZSxcbiAgICBpc05venpsZTogdHlwZW9mIGlzTm96emxlXG59XG53aW5kb3dbXCJQb2ludFwiXSA9IFBvaW50O1xud2luZG93W1wiRWxlbWVudFR5cGVcIl0gPSBFbGVtZW50VHlwZTtcbndpbmRvd1tcImlzTm96emxlXCJdID0gaXNOb3p6bGU7Il19", "Type" : "BMTypescriptHost", "Visible" : true, "Width" : 128, "Z-index" : 10, "__TypeDisplayName" : "TypeScript Object" }, "Widgets" : [ ] }, { "Properties" : { "Area" : "UI", "Code" : "//#import mtpJsonDef from MTPViewerV2\n\n/**\n * A MtpFileParser handles loading a mtp file from the given link,\n * parsing it into an HMIDiagram object\n */\nclass MtpFileParser {\n\n    public async loadFile(filePath: string): Promise<HmiDiagram> {\n        try {\n            const response = await fetch(filePath);\n            const responseText = await response.text();\n            const xmlData = new DOMParser().parseFromString(responseText, \"text/xml\");\n            return this.parseMtpXml(xmlData);\n        } catch (e) {\n            console.error(\"Failed to load MTP\")\n            throw e;\n        }\n    }\n\n    private parseMtpXml(file: Document): HmiDiagram {\n        let diagram: HmiDiagram = {\n            pipes: [],\n            elements: [],\n            width: 0,\n            height: 0\n        };\n\n        // find a referece to the diagram object\n        const hmiDiagramXml = file.querySelector('InstanceHierarchy[Name=\"HMI\"] InternalElement[Name=\"Visu_Main\"]');\n        if (!hmiDiagramXml) {\n            throw \"No hmi diagram found in given file\"\n        }\n        diagram.width = this.getAttributeTagValue(hmiDiagramXml, \"Width\", true);\n        diagram.height = this.getAttributeTagValue(hmiDiagramXml, \"Height\", true);\n\n        // iterate through the internal elements of the diagram and add them to the diagram\n        for (let i = 0; i < hmiDiagramXml.childElementCount; i++) {\n            const element = hmiDiagramXml.children[i] as Element;\n            if (element.nodeName == \"InternalElement\") {\n                this.parseHmiInternalElement(element, diagram, file);\n            }\n        }\n\n        return diagram;\n    }\n\n    private parseHmiInternalElement(element: Element, diagram: HmiDiagram, file: Document) {\n        // if there is a attribute with an edge path, assume it's a line\n        if (this.getAttributeTagValue(element, \"Edgepath\", false)) {\n            this.parseHmiPipe(element, diagram);\n        } else if (this.getAttributeTagValue(element, \"eClassClassificationClass\", false)) {\n            this.parseDiagramElement(element, diagram, file);\n        }\n    }\n\n    private parseDiagramElement(element: Element, diagram: HmiDiagram, file: Document) {\n        let nozzles = this.getNozzleList(element);\n        let visualElement: VisualObject = {\n            viewType: this.getAttributeTagValue(element, \"ViewType\", false),\n            eClassVersion: this.getAttributeTagValue(element, \"eClassVersion\", false),\n            eClassClassification: this.getAttributeTagValue(element, \"eClassClassificationClass\", false),\n            eClassIrdi: this.getAttributeTagValue(element, \"eClassIRDI\", false),\n            refId: this.getAttributeTagValue(element, \"RefID\", false),\n            id: element.getAttribute(\"ID\")!,\n            name: element.getAttribute(\"Name\")!,\n            width: this.getAttributeTagValue(element, \"Width\", true),\n            height: this.getAttributeTagValue(element, \"Height\", true),\n            rotation: this.getAttributeTagValue(element, \"Rotation\", true),\n            x: this.getAttributeTagValue(element, \"X\", true),\n            y: this.getAttributeTagValue(element, \"Y\", true),\n            nozzles: nozzles,\n            type: ElementType.VISUAL_ELEMENT\n        };\n        // find the elements that are real nozzles \n        let realNozzles = nozzles.filter((el) => { return el.baseClass == \"MTPHMISUCLib/PortObject/Nozzle\" });\n        if (realNozzles.length == 2) {\n            // we will assume that the subelement will be positioned between this two realNozzles\n            visualElement.subElement = {\n                x: Math.min(realNozzles[0].x, realNozzles[1].x),\n                y: Math.min(realNozzles[0].y, realNozzles[1].y),\n                height: realNozzles[0].y < realNozzles[1].y ? realNozzles[1].y - realNozzles[0].y : realNozzles[0].y - realNozzles[1].y,\n                width: Math.sqrt((realNozzles[0].x - realNozzles[1].x) ** 2 + (realNozzles[0].y - realNozzles[1].y) ** 2),\n                rotation: visualElement.rotation            // inherit the rotation from the parent\n            };\n\n            // TODO: decide on when the height or width will be 0\n            if (visualElement.subElement.height < 1) {\n                visualElement.subElement.height = 10;\n            }\n            if (visualElement.subElement.width < 1) {\n                visualElement.subElement.width = 10;\n            }\n        }\n\n        // we need to now search for the communication\n        let communicationElementAttr = file.evaluate(`//InstanceHierarchy[@Name=\"ModuleTypePackage\"]//InternalElement[@Name=\"Communication\"]` +\n            `/InternalElement[@Name=\"InstanceList\"]//Attribute[@Name=\"RefID\"][Value=\"${visualElement.refId}\"]`,\n            file, null, XPathResult.ANY_TYPE, null).iterateNext();\n        let communicationElement = communicationElementAttr ? communicationElementAttr.parentElement : undefined;\n        let communicationObject = undefined;\n        if (communicationElement != null) {\n            let communicationDescription = communicationElement.querySelector(\"Description\")!.textContent!;\n            let interfaceList: CommunicationInterface[] = [];\n            // interate through the attributes and try to get each communication element\n            for (let i = 0; i < communicationElement.childElementCount; i++) {\n                const attrElement = communicationElement.children[i] as Element;\n                if (attrElement.nodeName == \"Attribute\" && attrElement.getAttribute(\"Node\") != \"RefID\") {\n                    let attrValue = attrElement.getElementsByTagName(\"Value\")[0].textContent;\n                    // search for this attribute in the communication lib\n                    let sourceCommunicationElement = file.querySelector(`InstanceHierarchy[Name=\"ModuleTypePackage\"] InternalElement[Name=\"Communication\"] ` +\n                        `InternalElement[Name=\"SourceList\"]  ExternalInterface[ID=\"${attrValue}\"]`);\n                    if (sourceCommunicationElement) {\n                        interfaceList.push({\n                            access: this.getAttributeTagValue(sourceCommunicationElement, \"Access\", false),\n                            identifier: this.getAttributeTagValue(sourceCommunicationElement, \"Identifier\", false),\n                            namespace: this.getAttributeTagValue(sourceCommunicationElement, \"Namespace\", false),\n                            type: ElementType.COMMUNICATION_INTERFACE,\n                            id: sourceCommunicationElement.getAttribute(\"ID\")!,\n                            name: attrElement.getAttribute(\"Name\")!,\n                            endpoint: this.getAttributeTagValue(sourceCommunicationElement.parentElement!, \"Endpoint\", false)\n                        })\n                    }\n                }\n            }\n            communicationObject = {\n                description: communicationDescription,\n                interfaces: interfaceList,\n                type: ElementType.COMMUNICATION_OBJECT,\n                id: communicationElement.getAttribute(\"ID\")!,\n                name: communicationElement.getAttribute(\"Name\")!\n            }\n        }\n        if (communicationObject) {\n            diagram.elements.push({ communication: communicationObject, obj: visualElement });\n        } else {\n            diagram.elements.push({ obj: visualElement });\n        }\n    }\n\n    private parseHmiPipe(element: Element, diagram: HmiDiagram) {\n        let pipe: PipeDefinition = <PipeDefinition>{\n            id: element.getAttribute(\"ID\"),\n            name: element.getAttribute(\"Name\"),\n            type: ElementType.PIPE\n        };\n        // get the parsed path\n        let parsedPath = this.parseEdgePath(this.getAttributeTagValue(element, \"Edgepath\", false));\n        // parse the nozzles\n        pipe.nozzles = this.getNozzleList(element);\n        // check to see if the the source and target points form the path are equal to a nozzle\n        for (const nozzle of pipe.nozzles) {\n            if (parsedPath.source.equals(nozzle)) {\n                pipe.source = nozzle;\n            }\n            if (parsedPath.target.equals(nozzle)) {\n                pipe.target = nozzle;\n            }\n        }\n        // check if the soruce and target were assigned\n        if (!pipe.source) {\n            pipe.source = parsedPath.source;\n        }\n        if (!pipe.target) {\n            pipe.target = parsedPath.target;\n        }\n        pipe.waypoints = parsedPath.waypoints;\n        diagram.pipes.push(pipe);\n    }\n\n    private getNozzleList(element: Element): Nozzle[] {\n        let nozzles: Nozzle[] = [];\n        for (let j = 0; j < element.childElementCount; j++) {\n            const subElement = element.children[j] as Element;\n            if (subElement.nodeName == \"InternalElement\") {\n                nozzles.push({\n                    id: subElement.getAttribute(\"ID\")!,\n                    name: subElement.getAttribute(\"Name\")!,\n                    x: this.getAttributeTagValue(subElement, \"X\", true),\n                    y: this.getAttributeTagValue(subElement, \"Y\", true),\n                    externalConnectorId: element.querySelector('ExternalInterface[Name=\"Connector\"]')!.getAttribute(\"ID\")!,\n                    baseClass: subElement.getAttribute(\"RefBaseSystemUnitPath\")!,\n                    type: ElementType.NOZZLE\n                })\n            }\n        }\n        return nozzles;\n    }\n\n\n    /**\n     * Computes a list of points into a start, end and intermidiate points\n     */\n    private parseEdgePath(edgePath: string): { source: Point, target: Point, waypoints: Point[] } {\n        let tokens = edgePath.split(\";\");\n        return {\n            source: new Point(tokens[0]),\n            target: new Point(tokens[tokens.length - 1]),\n            waypoints: tokens.slice(1, -1).map((el) => { return new Point(el) })\n        }\n    }\n\n    private getAttributeTagValue(parent: Element, attrName: string, asNumber: true): number;\n    private getAttributeTagValue(parent: Element, attrName: string, asNumber: false): string;\n\n    /**\n     * XML parsing fucntion, helping getting the Value tag of a Attribute tag identified by the attrName\n     */\n    private getAttributeTagValue(parent: Element, attrName: string, asNumber: boolean): number | string | undefined | null {\n        let value = parent.querySelector(`Attribute[Name=\"${attrName}\"] > Value`);\n        if (value) {\n            if (asNumber && value.textContent) {\n                return parseFloat(value.textContent);\n            } else {\n                return value.textContent;\n            }\n        }\n    }\n}\n\ninterface Window {\n    MtpFileParser: typeof MtpFileParser\n}\nwindow[\"MtpFileParser\"] = MtpFileParser;", "ColumnPosition" : 25, "DirectLinkUUID" : "", "DisplayName" : "BMTypescriptHost-13", "Exports" : "interface mptFileParser extends TWRuntimeWidget {\t    \t/**\t    \t * Should be invoked to dispatch an event to the Thingworx runtime, causing all actions bound to that event to execute.\n\t    \t * @param event - The name of the event to dispatch.\n\t    \t */\n\t\t\tdispatchEvent(event: string): void;\n\t    \t/**\n\t    \t * Invoked after any property has been updated as a result of a binding.\n\t    \t * This method will be invoked after the specific ..DidUpdateToValue method is invoked.\n\t    \t * Scripts can override this method to react to all property updates.\n\t    \t * @param event - The name of the event to dispatch.\n\t    \t */\n\t\t\tpropertyDidUpdateToValue(property: string, value: any | undefined): void;\n\t    \t/**\n\t    \t * Finds and returns the widget with the given name in the current mashup.\n\t    \t * @param name - The DisplayName of the widget to find.\n\t    \t * @return - The widget object if it was found, undefined otherwise.\n\t    \t */\n\t\t\twidgetNamed(name: string): TWRuntimeWidget | undefined;\n\t    \t/**\n\t    \t * Sends a property update to the given widget as if it came from a binding.\n\t    \t * Supported properties may be updated this way even if they are not bound to anything in the composer.\n\t    \t * @param widget - The widget object whose property should be updated.\n\t    \t * @param args - An object containing additional arguments. This object must have the following properties:\n\t    \t *\t\t\t\t\tforProperty {String} - The name of the property to update.\n\t    \t *\t\t\t\t\tvalue {AnyObject} - The value to which that property should update.\n\t    \t */\n\t\t\tdispatchPropertyUpdateToWidget(widget: any, args: SelfDispatchPropertyUpdateToWidgetArgs): void;\n\t    \t/**\n\t    \t * May be overriden by scripts that create an UI. This method receives the script's container as its parameter.\n\t    \t * It is the script's responsibility to add their content to the supplied container.\n\t    \t * @param container - The container in which the UI elements should be added.\n\t    \t */\n\t\t\trenderWithContainer(container: $): void;\n\t\t}\n", "FullScreen" : true, "Height" : 46, "Id" : "BMTypescriptHost-13", "Left" : 685, "ResponsiveLayout" : false, "RuntimeProperties" : "[]", "Scope" : "global", "ScrollPosition" : 82, "ShowDataLoading" : true, "Title" : "mptFileParser", "Top" : 15, "TranspiledCode" : "\"use strict\";\r\n//#import mtpJsonDef from MTPViewerV2\r\n/**\r\n * A MtpFileParser handles loading a mtp file from the given link,\r\n * parsing it into an HMIDiagram object\r\n */\r\nclass MtpFileParser {\r\n    async loadFile(filePath) {\r\n        try {\r\n            const response = await fetch(filePath);\r\n            const responseText = await response.text();\r\n            const xmlData = new DOMParser().parseFromString(responseText, \"text/xml\");\r\n            return this.parseMtpXml(xmlData);\r\n        }\r\n        catch (e) {\r\n            console.error(\"Failed to load MTP\");\r\n            throw e;\r\n        }\r\n    }\r\n    parseMtpXml(file) {\r\n        let diagram = {\r\n            pipes: [],\r\n            elements: [],\r\n            width: 0,\r\n            height: 0\r\n        };\r\n        // find a referece to the diagram object\r\n        const hmiDiagramXml = file.querySelector('InstanceHierarchy[Name=\"HMI\"] InternalElement[Name=\"Visu_Main\"]');\r\n        if (!hmiDiagramXml) {\r\n            throw \"No hmi diagram found in given file\";\r\n        }\r\n        diagram.width = this.getAttributeTagValue(hmiDiagramXml, \"Width\", true);\r\n        diagram.height = this.getAttributeTagValue(hmiDiagramXml, \"Height\", true);\r\n        // iterate through the internal elements of the diagram and add them to the diagram\r\n        for (let i = 0; i < hmiDiagramXml.childElementCount; i++) {\r\n            const element = hmiDiagramXml.children[i];\r\n            if (element.nodeName == \"InternalElement\") {\r\n                this.parseHmiInternalElement(element, diagram, file);\r\n            }\r\n        }\r\n        return diagram;\r\n    }\r\n    parseHmiInternalElement(element, diagram, file) {\r\n        // if there is a attribute with an edge path, assume it's a line\r\n        if (this.getAttributeTagValue(element, \"Edgepath\", false)) {\r\n            this.parseHmiPipe(element, diagram);\r\n        }\r\n        else if (this.getAttributeTagValue(element, \"eClassClassificationClass\", false)) {\r\n            this.parseDiagramElement(element, diagram, file);\r\n        }\r\n    }\r\n    parseDiagramElement(element, diagram, file) {\r\n        let nozzles = this.getNozzleList(element);\r\n        let visualElement = {\r\n            viewType: this.getAttributeTagValue(element, \"ViewType\", false),\r\n            eClassVersion: this.getAttributeTagValue(element, \"eClassVersion\", false),\r\n            eClassClassification: this.getAttributeTagValue(element, \"eClassClassificationClass\", false),\r\n            eClassIrdi: this.getAttributeTagValue(element, \"eClassIRDI\", false),\r\n            refId: this.getAttributeTagValue(element, \"RefID\", false),\r\n            id: element.getAttribute(\"ID\"),\r\n            name: element.getAttribute(\"Name\"),\r\n            width: this.getAttributeTagValue(element, \"Width\", true),\r\n            height: this.getAttributeTagValue(element, \"Height\", true),\r\n            rotation: this.getAttributeTagValue(element, \"Rotation\", true),\r\n            x: this.getAttributeTagValue(element, \"X\", true),\r\n            y: this.getAttributeTagValue(element, \"Y\", true),\r\n            nozzles: nozzles,\r\n            type: ElementType.VISUAL_ELEMENT\r\n        };\r\n        // find the elements that are real nozzles \r\n        let realNozzles = nozzles.filter((el) => { return el.baseClass == \"MTPHMISUCLib/PortObject/Nozzle\"; });\r\n        if (realNozzles.length == 2) {\r\n            // we will assume that the subelement will be positioned between this two realNozzles\r\n            visualElement.subElement = {\r\n                x: Math.min(realNozzles[0].x, realNozzles[1].x),\r\n                y: Math.min(realNozzles[0].y, realNozzles[1].y),\r\n                height: realNozzles[0].y < realNozzles[1].y ? realNozzles[1].y - realNozzles[0].y : realNozzles[0].y - realNozzles[1].y,\r\n                width: Math.sqrt((realNozzles[0].x - realNozzles[1].x) ** 2 + (realNozzles[0].y - realNozzles[1].y) ** 2),\r\n                rotation: visualElement.rotation // inherit the rotation from the parent\r\n            };\r\n            // TODO: decide on when the height or width will be 0\r\n            if (visualElement.subElement.height < 1) {\r\n                visualElement.subElement.height = 10;\r\n            }\r\n            if (visualElement.subElement.width < 1) {\r\n                visualElement.subElement.width = 10;\r\n            }\r\n        }\r\n        // we need to now search for the communication\r\n        let communicationElementAttr = file.evaluate(`//InstanceHierarchy[@Name=\"ModuleTypePackage\"]//InternalElement[@Name=\"Communication\"]` +\r\n            `/InternalElement[@Name=\"InstanceList\"]//Attribute[@Name=\"RefID\"][Value=\"${visualElement.refId}\"]`, file, null, XPathResult.ANY_TYPE, null).iterateNext();\r\n        let communicationElement = communicationElementAttr ? communicationElementAttr.parentElement : undefined;\r\n        let communicationObject = undefined;\r\n        if (communicationElement != null) {\r\n            let communicationDescription = communicationElement.querySelector(\"Description\").textContent;\r\n            let interfaceList = [];\r\n            // interate through the attributes and try to get each communication element\r\n            for (let i = 0; i < communicationElement.childElementCount; i++) {\r\n                const attrElement = communicationElement.children[i];\r\n                if (attrElement.nodeName == \"Attribute\" && attrElement.getAttribute(\"Node\") != \"RefID\") {\r\n                    let attrValue = attrElement.getElementsByTagName(\"Value\")[0].textContent;\r\n                    // search for this attribute in the communication lib\r\n                    let sourceCommunicationElement = file.querySelector(`InstanceHierarchy[Name=\"ModuleTypePackage\"] InternalElement[Name=\"Communication\"] ` +\r\n                        `InternalElement[Name=\"SourceList\"]  ExternalInterface[ID=\"${attrValue}\"]`);\r\n                    if (sourceCommunicationElement) {\r\n                        interfaceList.push({\r\n                            access: this.getAttributeTagValue(sourceCommunicationElement, \"Access\", false),\r\n                            identifier: this.getAttributeTagValue(sourceCommunicationElement, \"Identifier\", false),\r\n                            namespace: this.getAttributeTagValue(sourceCommunicationElement, \"Namespace\", false),\r\n                            type: ElementType.COMMUNICATION_INTERFACE,\r\n                            id: sourceCommunicationElement.getAttribute(\"ID\"),\r\n                            name: attrElement.getAttribute(\"Name\"),\r\n                            endpoint: this.getAttributeTagValue(sourceCommunicationElement.parentElement, \"Endpoint\", false)\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            communicationObject = {\r\n                description: communicationDescription,\r\n                interfaces: interfaceList,\r\n                type: ElementType.COMMUNICATION_OBJECT,\r\n                id: communicationElement.getAttribute(\"ID\"),\r\n                name: communicationElement.getAttribute(\"Name\")\r\n            };\r\n        }\r\n        if (communicationObject) {\r\n            diagram.elements.push({ communication: communicationObject, obj: visualElement });\r\n        }\r\n        else {\r\n            diagram.elements.push({ obj: visualElement });\r\n        }\r\n    }\r\n    parseHmiPipe(element, diagram) {\r\n        let pipe = {\r\n            id: element.getAttribute(\"ID\"),\r\n            name: element.getAttribute(\"Name\"),\r\n            type: ElementType.PIPE\r\n        };\r\n        // get the parsed path\r\n        let parsedPath = this.parseEdgePath(this.getAttributeTagValue(element, \"Edgepath\", false));\r\n        // parse the nozzles\r\n        pipe.nozzles = this.getNozzleList(element);\r\n        // check to see if the the source and target points form the path are equal to a nozzle\r\n        for (const nozzle of pipe.nozzles) {\r\n            if (parsedPath.source.equals(nozzle)) {\r\n                pipe.source = nozzle;\r\n            }\r\n            if (parsedPath.target.equals(nozzle)) {\r\n                pipe.target = nozzle;\r\n            }\r\n        }\r\n        // check if the soruce and target were assigned\r\n        if (!pipe.source) {\r\n            pipe.source = parsedPath.source;\r\n        }\r\n        if (!pipe.target) {\r\n            pipe.target = parsedPath.target;\r\n        }\r\n        pipe.waypoints = parsedPath.waypoints;\r\n        diagram.pipes.push(pipe);\r\n    }\r\n    getNozzleList(element) {\r\n        let nozzles = [];\r\n        for (let j = 0; j < element.childElementCount; j++) {\r\n            const subElement = element.children[j];\r\n            if (subElement.nodeName == \"InternalElement\") {\r\n                nozzles.push({\r\n                    id: subElement.getAttribute(\"ID\"),\r\n                    name: subElement.getAttribute(\"Name\"),\r\n                    x: this.getAttributeTagValue(subElement, \"X\", true),\r\n                    y: this.getAttributeTagValue(subElement, \"Y\", true),\r\n                    externalConnectorId: element.querySelector('ExternalInterface[Name=\"Connector\"]').getAttribute(\"ID\"),\r\n                    baseClass: subElement.getAttribute(\"RefBaseSystemUnitPath\"),\r\n                    type: ElementType.NOZZLE\r\n                });\r\n            }\r\n        }\r\n        return nozzles;\r\n    }\r\n    /**\r\n     * Computes a list of points into a start, end and intermidiate points\r\n     */\r\n    parseEdgePath(edgePath) {\r\n        let tokens = edgePath.split(\";\");\r\n        return {\r\n            source: new Point(tokens[0]),\r\n            target: new Point(tokens[tokens.length - 1]),\r\n            waypoints: tokens.slice(1, -1).map((el) => { return new Point(el); })\r\n        };\r\n    }\r\n    /**\r\n     * XML parsing fucntion, helping getting the Value tag of a Attribute tag identified by the attrName\r\n     */\r\n    getAttributeTagValue(parent, attrName, asNumber) {\r\n        let value = parent.querySelector(`Attribute[Name=\"${attrName}\"] > Value`);\r\n        if (value) {\r\n            if (asNumber && value.textContent) {\r\n                return parseFloat(value.textContent);\r\n            }\r\n            else {\r\n                return value.textContent;\r\n            }\r\n        }\r\n    }\r\n}\r\nwindow[\"MtpFileParser\"] = MtpFileParser;\r\n//# sourceMappingURL=data:application/json;base64,", "Type" : "BMTypescriptHost", "Visible" : true, "Width" : 144, "Z-index" : 10, "__TypeDisplayName" : "TypeScript Object" }, "Widgets" : [ ] }, { "Properties" : { "Area" : "UI", "Code" : "//#import mtpJsonDef from MTPViewerV2\n\nconst NOZZLE_WIDTH = 5;\nconst NOZZLE_HEIGHT = 5;\nconst STENCIL_PATH = \"/mtp/stencils/\";\nconst STENCIL_LIST = ['agitators.xml', 'apparatus_elements.xml', 'agitators.xml', 'centrifuges.xml', 'compressors.xml',\n    'compressors_iso.xml', 'crushers_grinding.xml', 'driers.xml', 'engines.xml', 'feeders.xml', 'filters.xml', 'fittings.xml',\n    'flow_sensors.xml', 'heat_exchangers.xml', 'instruments.xml', 'misc.xml', 'mixers.xml', 'piping.xml', 'feeders.xml', 'feeders.xml',\n    'pumps.xml', 'pumps_din.xml', 'pumps_iso.xml', 'separators.xml', 'shaping_machines.xml', 'valves.xml', 'vessels.xml'];\n\n/**\n * A MtpFileLoader handles loading a mtp file from the given link, \n * parsing it into an mxgraph graph object and retring it.\n */\nclass MtpJsonToMxGraph {\n    private mxgraph: any;\n    private container: HTMLElement;\n    private shapeMap: { [key: string]: string };\n    /**\n     *  Intializes the MtpFileLoader with the mxgraph namespace\n     */\n    constructor(mxGraphNamespace: any, container: HTMLElement, shapeMap: { [key: string]: string }) {\n        this.mxgraph = mxGraphNamespace;\n        this.container = container;\n        // load all the stencils\n        this.loadStencilFiles(STENCIL_LIST.map((el) => { return STENCIL_PATH + el }));\n        this.shapeMap = shapeMap;\n    }\n\n    public drawMpt(mtpDiagram: HmiDiagram): any {\n        try {\n            let graph = this.initGraph();\n            // draw the pipes\n            this.drawPipes(graph, graph.getDefaultParent(), mtpDiagram.pipes);\n            // draw the elements\n            this.drawElements(graph, graph.getDefaultParent(), mtpDiagram.elements);\n\n            return graph;\n        } catch (e) {\n            console.error(\"Failed to draw mxgraph for MTP\")\n            throw e;\n        }\n    }\n\n    private drawElements(graph: any, parent: any, elements: InteractibleElement[]) {\n        for (const element of elements) {\n            if (element.obj.subElement) {\n                // draw the element first (container then the subelement)\n                // depending on the rotation of the element we need to offset it across that axis\n                let elementOffsetX = element.obj.subElement.height / 2 * Math.abs(Math.sin(element.obj.rotation * Math.PI / 180));\n                let elementOffsetY = NOZZLE_HEIGHT * Math.abs(Math.cos(element.obj.rotation * Math.PI / 180));\n                graph.insertVertex(parent, element.obj.id, element.obj.name, element.obj.subElement.x - elementOffsetX, element.obj.subElement.y - elementOffsetY,\n                    element.obj.subElement.width, element.obj.subElement.height, `element;shape=${this.shapeMap[element.obj.eClassClassification]};rotation=${element.obj.rotation}`);\n            } else {\n                // if we don't have a subelement, draw the visual object directly\n                graph.insertVertex(parent, element.obj.id, element.obj.name, element.obj.x, element.obj.y,\n                    element.obj.width, element.obj.height, `element;shape=${this.shapeMap[element.obj.eClassClassification]}`);\n            }\n            if (element.communication) {\n                // draw the parent first \n                let elParent = graph.insertVertex(parent, element.communication.id, element.communication.name, element.obj.x, element.obj.y,\n                    element.obj.width, element.obj.height, \"swimlane;childLayout=stackLayout;horizontal=1;startSize=26;horizontalStack=0;resizeParent=1;collapsible=1;resizeParentMax=0;resizeLast=0;\");\n                elParent.collapsed = true;\n                // if we have communication elements, draw them in the container\n                for (const commInterface of element.communication.interfaces) {\n                    let value = document.createElement(\"Value\");\n                    value.setAttribute('label', commInterface.name);\n                    let cell = graph.insertVertex(elParent, commInterface.id, value, 0, 0, element.obj.width, 20, \"interfaceValue\");\n                }\n            }\n        }\n    }\n\n    private drawPipes(graph: any, parent: any, pipes: PipeDefinition[]) {\n        for (const pipe of pipes) {\n            // keep a map of the nozzles\n            let nozzleMap: { [key: string]: any } = {};\n            // draw the nozzles first, then the pipe itself\n            for (const nozzle of pipe.nozzles) {\n                nozzleMap[nozzle.id] = graph.insertVertex(parent, nozzle.id, nozzle.name,\n                    nozzle.x - NOZZLE_WIDTH / 2, nozzle.y - NOZZLE_HEIGHT / 2, NOZZLE_WIDTH, NOZZLE_HEIGHT, nozzle.type);\n            }\n            // draw the pipe itself, but make sure that it's either connected to a nozzle or to a point\n            let edge = new this.mxgraph.mxCell(pipe.name, new this.mxgraph.mxGeometry(), pipe.type);\n            edge.setId(pipe.id);\n            edge.setEdge(true);\n            edge.geometry.relative = true;\n            // set the  waypoints\n            edge.geometry.points = pipe.waypoints.map((point) => { return new this.mxgraph.mxPoint(point.x, point.y) });\n            // soruce and target point to the vertex or to nothing\n            let source = undefined;\n            let target = undefined;\n            if (isNozzle(pipe.source)) {\n                source = nozzleMap[pipe.source.id];\n            } else {\n                // set the starting point a a point\n                edge.geometry.sourcePoint = new this.mxgraph.mxPoint(pipe.source.x, pipe.source.y);\n            }\n            if (isNozzle(pipe.target)) {\n                target = nozzleMap[pipe.target.id];\n            } else {\n                // set the target point a a point\n                edge.geometry.targetPoint = new this.mxgraph.mxPoint(pipe.target.x, pipe.target.y);\n            }\n            graph.addEdge(edge, parent, source, target);\n        }\n    }\n\n    private initGraph(): any {\n        // start creating the diagram\n        let graph = new this.mxgraph.mxGraph(this.container);\n        // Allow panning using the right click buttion\n        graph.setPanning(true);\n        // enable the display of tooltips\n        graph.setTooltips(true);\n        // disable new connections and cloning cells, as well as drag and drop outside\n        graph.setConnectable(false);\n        graph.setCellsCloneable(true);\n        graph.setCellsDeletable(true);\n        graph.setDropEnabled(true);\n        graph.setSplitEnabled(false);\n        graph.resetEdgesOnConnect = false;\n\n        this.declareMxGraphStyles(graph);\n        graph.getModel().prefix = \"autoGenerated\";\n\n        graph.getLabel = function (cell: any) {\n            if (cell) {\n                // get the name of style\n                let cellStyle = cell.style ? (cell.style.split(\";\") ? cell.style.split(\";\")[0] : cell.style) : undefined;\n                if (cellStyle == \"interfaceValue\") {\n                    return `${cell.getAttribute(\"label\")}: ${cell.getAttribute(\"value\", \"N/A\")}`;\n                } else if (cellStyle == \"Nozzle\") {\n                    return \"\";\n                } else if (cellStyle == \"element\") {\n                    return \"\";\n                } else if (cell.edge) {\n                    return \"\"\n                } else {\n                    return cell.value;\n                }\n            }\n        }\n\n        let layout = new this.mxgraph.mxStackLayout(graph, true);\n        layout.resizeParent = true;\n        layout.horizontal = false;\n        layout.spacing = 2;\n        let layoutMgr = new this.mxgraph.mxLayoutManager(graph);\n        layoutMgr.getLayout = function (cell: any) {\n            let cellStyle = cell.style ? (cell.style.split(\";\") ? cell.style.split(\";\")[0] : cell.style) : undefined;\n            if (cellStyle == \"swimlane\") {\n                return layout;\n            }\n\n            return null;\n        };\n\n        return graph;\n    }\n\n    /**\n     * Creates the generic styles for elements\n     */\n    private declareMxGraphStyles(graph: any) {\n        let style = graph.getStylesheet().getDefaultVertexStyle();\n        style[this.mxgraph.mxConstants.STYLE_ROUNDED] = false;\n        style[this.mxgraph.mxConstants.STYLE_FONTCOLOR] = '#1d1b1b';\n        style[this.mxgraph.mxConstants.STYLE_STROKECOLOR] = '#9673A6';\n        style[this.mxgraph.mxConstants.STYLE_FILLCOLOR] = '#f3f4f9';\n\n\n        style = this.mxgraph.mxUtils.clone(style);\n        style[this.mxgraph.mxConstants.STYLE_SHAPE] = 'swimlane';\n        style[this.mxgraph.mxConstants.STYLE_STARTSIZE] = 20;\n        graph.getStylesheet().putCellStyle('swimlane', style);\n\n        style = [];\n        style[this.mxgraph.mxConstants.STYLE_STROKECOLOR] = 'red';\n        style[this.mxgraph.mxConstants.STYLE_SHAPE] = \"ellipse\";\n        graph.getStylesheet().putCellStyle('Nozzle', style);\n\n        style = [];\n        style[this.mxgraph.mxConstants.STYLE_FILLCOLOR] = 'none';\n        style[this.mxgraph.mxConstants.STYLE_STROKECOLOR] = 'none';\n        style[this.mxgraph.mxConstants.STYLE_SHAPE] = this.mxgraph.mxConstants.SHAPE_RECTANGLE;\n        style[this.mxgraph.mxConstants.STYLE_PERIMETER] = this.mxgraph.mxConstants.PERIMETER_RECTANGLE;\n        graph.getStylesheet().putCellStyle('parent', style);\n\n        style = [];\n        style[this.mxgraph.mxConstants.STYLE_FILLCOLOR] = 'none';\n        style[this.mxgraph.mxConstants.STYLE_STROKECOLOR] = 'none';\n        graph.getStylesheet().putCellStyle('interfaceValue', style);\n\n        style = graph.getStylesheet().getDefaultEdgeStyle();\n        style[this.mxgraph.mxConstants.STYLE_ENDARROW] = 'none';\n        style[this.mxgraph.mxConstants.STYLE_STROKEWIDTH] = 2;\n    }\n    /**\n     * Loads the stencil files for pid diagrams\n     */\n    private loadStencilFiles(files: string[]) {\n        for (const filePath of files) {\n            let req = this.mxgraph.mxUtils.load(filePath);\n            let root = req.getDocumentElement();\n            let prefix = root.getAttribute(\"name\");\n            let shape = root.firstChild;\n\n            while (shape != null) {\n                if (shape.nodeType == this.mxgraph.mxConstants.NODETYPE_ELEMENT) {\n                    let name = prefix + '.' + shape.getAttribute('name').replace(/ /g, '_');\n                    this.mxgraph.mxStencilRegistry.addStencil(name.toLowerCase(), new this.mxgraph.mxStencil(shape));\n                }\n                shape = shape.nextSibling;\n            }\n        }\n    }\n}\ninterface Window {\n    MtpJsonToMxGraph: typeof MtpJsonToMxGraph\n}\nwindow[\"MtpJsonToMxGraph\"] = MtpJsonToMxGraph;", "ColumnPosition" : 118, "DirectLinkUUID" : "", "DisplayName" : "BMTypescriptHost-14", "Exports" : "interface mtpJsonToMxGraph extends TWRuntimeWidget {\t    \t/**\t    \t * Should be invoked to dispatch an event to the Thingworx runtime, causing all actions bound to that event to execute.\n\t    \t * @param event - The name of the event to dispatch.\n\t    \t */\n\t\t\tdispatchEvent(event: string): void;\n\t    \t/**\n\t    \t * Invoked after any property has been updated as a result of a binding.\n\t    \t * This method will be invoked after the specific ..DidUpdateToValue method is invoked.\n\t    \t * Scripts can override this method to react to all property updates.\n\t    \t * @param event - The name of the event to dispatch.\n\t    \t */\n\t\t\tpropertyDidUpdateToValue(property: string, value: any | undefined): void;\n\t    \t/**\n\t    \t * Finds and returns the widget with the given name in the current mashup.\n\t    \t * @param name - The DisplayName of the widget to find.\n\t    \t * @return - The widget object if it was found, undefined otherwise.\n\t    \t */\n\t\t\twidgetNamed(name: string): TWRuntimeWidget | undefined;\n\t    \t/**\n\t    \t * Sends a property update to the given widget as if it came from a binding.\n\t    \t * Supported properties may be updated this way even if they are not bound to anything in the composer.\n\t    \t * @param widget - The widget object whose property should be updated.\n\t    \t * @param args - An object containing additional arguments. This object must have the following properties:\n\t    \t *\t\t\t\t\tforProperty {String} - The name of the property to update.\n\t    \t *\t\t\t\t\tvalue {AnyObject} - The value to which that property should update.\n\t    \t */\n\t\t\tdispatchPropertyUpdateToWidget(widget: any, args: SelfDispatchPropertyUpdateToWidgetArgs): void;\n\t    \t/**\n\t    \t * May be overriden by scripts that create an UI. This method receives the script's container as its parameter.\n\t    \t * It is the script's responsibility to add their content to the supplied container.\n\t    \t * @param container - The container in which the UI elements should be added.\n\t    \t */\n\t\t\trenderWithContainer(container: $): void;\n\t\t}\n", "FullScreen" : true, "Height" : 44, "Id" : "BMTypescriptHost-14", "Left" : 1000, "ResponsiveLayout" : false, "RuntimeProperties" : "[]", "Scope" : "global", "ScrollPosition" : 151, "ShowDataLoading" : true, "Title" : "mtpJsonToMxGraph", "Top" : 15, "TranspiledCode" : "\"use strict\";\r\n//#import mtpJsonDef from MTPViewerV2\r\nconst NOZZLE_WIDTH = 5;\r\nconst NOZZLE_HEIGHT = 5;\r\nconst STENCIL_PATH = \"/mtp/stencils/\";\r\nconst STENCIL_LIST = ['agitators.xml', 'apparatus_elements.xml', 'agitators.xml', 'centrifuges.xml', 'compressors.xml',\r\n    'compressors_iso.xml', 'crushers_grinding.xml', 'driers.xml', 'engines.xml', 'feeders.xml', 'filters.xml', 'fittings.xml',\r\n    'flow_sensors.xml', 'heat_exchangers.xml', 'instruments.xml', 'misc.xml', 'mixers.xml', 'piping.xml', 'feeders.xml', 'feeders.xml',\r\n    'pumps.xml', 'pumps_din.xml', 'pumps_iso.xml', 'separators.xml', 'shaping_machines.xml', 'valves.xml', 'vessels.xml'];\r\n/**\r\n * A MtpFileLoader handles loading a mtp file from the given link,\r\n * parsing it into an mxgraph graph object and retring it.\r\n */\r\nclass MtpJsonToMxGraph {\r\n    /**\r\n     *  Intializes the MtpFileLoader with the mxgraph namespace\r\n     */\r\n    constructor(mxGraphNamespace, container, shapeMap) {\r\n        this.mxgraph = mxGraphNamespace;\r\n        this.container = container;\r\n        // load all the stencils\r\n        this.loadStencilFiles(STENCIL_LIST.map((el) => { return STENCIL_PATH + el; }));\r\n        this.shapeMap = shapeMap;\r\n    }\r\n    drawMpt(mtpDiagram) {\r\n        try {\r\n            let graph = this.initGraph();\r\n            // draw the pipes\r\n            this.drawPipes(graph, graph.getDefaultParent(), mtpDiagram.pipes);\r\n            // draw the elements\r\n            this.drawElements(graph, graph.getDefaultParent(), mtpDiagram.elements);\r\n            return graph;\r\n        }\r\n        catch (e) {\r\n            console.error(\"Failed to draw mxgraph for MTP\");\r\n            throw e;\r\n        }\r\n    }\r\n    drawElements(graph, parent, elements) {\r\n        for (const element of elements) {\r\n            if (element.obj.subElement) {\r\n                // draw the element first (container then the subelement)\r\n                // depending on the rotation of the element we need to offset it across that axis\r\n                let elementOffsetX = element.obj.subElement.height / 2 * Math.abs(Math.sin(element.obj.rotation * Math.PI / 180));\r\n                let elementOffsetY = NOZZLE_HEIGHT * Math.abs(Math.cos(element.obj.rotation * Math.PI / 180));\r\n                graph.insertVertex(parent, element.obj.id, element.obj.name, element.obj.subElement.x - elementOffsetX, element.obj.subElement.y - elementOffsetY, element.obj.subElement.width, element.obj.subElement.height, `element;shape=${this.shapeMap[element.obj.eClassClassification]};rotation=${element.obj.rotation}`);\r\n            }\r\n            else {\r\n                // if we don't have a subelement, draw the visual object directly\r\n                graph.insertVertex(parent, element.obj.id, element.obj.name, element.obj.x, element.obj.y, element.obj.width, element.obj.height, `element;shape=${this.shapeMap[element.obj.eClassClassification]}`);\r\n            }\r\n            if (element.communication) {\r\n                // draw the parent first \r\n                let elParent = graph.insertVertex(parent, element.communication.id, element.communication.name, element.obj.x, element.obj.y, element.obj.width, element.obj.height, \"swimlane;childLayout=stackLayout;horizontal=1;startSize=26;horizontalStack=0;resizeParent=1;collapsible=1;resizeParentMax=0;resizeLast=0;\");\r\n                elParent.collapsed = true;\r\n                // if we have communication elements, draw them in the container\r\n                for (const commInterface of element.communication.interfaces) {\r\n                    let value = document.createElement(\"Value\");\r\n                    value.setAttribute('label', commInterface.name);\r\n                    let cell = graph.insertVertex(elParent, commInterface.id, value, 0, 0, element.obj.width, 20, \"interfaceValue\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n    drawPipes(graph, parent, pipes) {\r\n        for (const pipe of pipes) {\r\n            // keep a map of the nozzles\r\n            let nozzleMap = {};\r\n            // draw the nozzles first, then the pipe itself\r\n            for (const nozzle of pipe.nozzles) {\r\n                nozzleMap[nozzle.id] = graph.insertVertex(parent, nozzle.id, nozzle.name, nozzle.x - NOZZLE_WIDTH / 2, nozzle.y - NOZZLE_HEIGHT / 2, NOZZLE_WIDTH, NOZZLE_HEIGHT, nozzle.type);\r\n            }\r\n            // draw the pipe itself, but make sure that it's either connected to a nozzle or to a point\r\n            let edge = new this.mxgraph.mxCell(pipe.name, new this.mxgraph.mxGeometry(), pipe.type);\r\n            edge.setId(pipe.id);\r\n            edge.setEdge(true);\r\n            edge.geometry.relative = true;\r\n            // set the  waypoints\r\n            edge.geometry.points = pipe.waypoints.map((point) => { return new this.mxgraph.mxPoint(point.x, point.y); });\r\n            // soruce and target point to the vertex or to nothing\r\n            let source = undefined;\r\n            let target = undefined;\r\n            if (isNozzle(pipe.source)) {\r\n                source = nozzleMap[pipe.source.id];\r\n            }\r\n            else {\r\n                // set the starting point a a point\r\n                edge.geometry.sourcePoint = new this.mxgraph.mxPoint(pipe.source.x, pipe.source.y);\r\n            }\r\n            if (isNozzle(pipe.target)) {\r\n                target = nozzleMap[pipe.target.id];\r\n            }\r\n            else {\r\n                // set the target point a a point\r\n                edge.geometry.targetPoint = new this.mxgraph.mxPoint(pipe.target.x, pipe.target.y);\r\n            }\r\n            graph.addEdge(edge, parent, source, target);\r\n        }\r\n    }\r\n    initGraph() {\r\n        // start creating the diagram\r\n        let graph = new this.mxgraph.mxGraph(this.container);\r\n        // Allow panning using the right click buttion\r\n        graph.setPanning(true);\r\n        // enable the display of tooltips\r\n        graph.setTooltips(true);\r\n        // disable new connections and cloning cells, as well as drag and drop outside\r\n        graph.setConnectable(false);\r\n        graph.setCellsCloneable(true);\r\n        graph.setCellsDeletable(true);\r\n        graph.setDropEnabled(true);\r\n        graph.setSplitEnabled(false);\r\n        graph.resetEdgesOnConnect = false;\r\n        this.declareMxGraphStyles(graph);\r\n        graph.getModel().prefix = \"autoGenerated\";\r\n        graph.getLabel = function (cell) {\r\n            if (cell) {\r\n                // get the name of style\r\n                let cellStyle = cell.style ? (cell.style.split(\";\") ? cell.style.split(\";\")[0] : cell.style) : undefined;\r\n                if (cellStyle == \"interfaceValue\") {\r\n                    return `${cell.getAttribute(\"label\")}: ${cell.getAttribute(\"value\", \"N/A\")}`;\r\n                }\r\n                else if (cellStyle == \"Nozzle\") {\r\n                    return \"\";\r\n                }\r\n                else if (cellStyle == \"element\") {\r\n                    return \"\";\r\n                }\r\n                else if (cell.edge) {\r\n                    return \"\";\r\n                }\r\n                else {\r\n                    return cell.value;\r\n                }\r\n            }\r\n        };\r\n        let layout = new this.mxgraph.mxStackLayout(graph, true);\r\n        layout.resizeParent = true;\r\n        layout.horizontal = false;\r\n        layout.spacing = 2;\r\n        let layoutMgr = new this.mxgraph.mxLayoutManager(graph);\r\n        layoutMgr.getLayout = function (cell) {\r\n            let cellStyle = cell.style ? (cell.style.split(\";\") ? cell.style.split(\";\")[0] : cell.style) : undefined;\r\n            if (cellStyle == \"swimlane\") {\r\n                return layout;\r\n            }\r\n            return null;\r\n        };\r\n        return graph;\r\n    }\r\n    /**\r\n     * Creates the generic styles for elements\r\n     */\r\n    declareMxGraphStyles(graph) {\r\n        let style = graph.getStylesheet().getDefaultVertexStyle();\r\n        style[this.mxgraph.mxConstants.STYLE_ROUNDED] = false;\r\n        style[this.mxgraph.mxConstants.STYLE_FONTCOLOR] = '#1d1b1b';\r\n        style[this.mxgraph.mxConstants.STYLE_STROKECOLOR] = '#9673A6';\r\n        style[this.mxgraph.mxConstants.STYLE_FILLCOLOR] = '#f3f4f9';\r\n        style = this.mxgraph.mxUtils.clone(style);\r\n        style[this.mxgraph.mxConstants.STYLE_SHAPE] = 'swimlane';\r\n        style[this.mxgraph.mxConstants.STYLE_STARTSIZE] = 20;\r\n        graph.getStylesheet().putCellStyle('swimlane', style);\r\n        style = [];\r\n        style[this.mxgraph.mxConstants.STYLE_STROKECOLOR] = 'red';\r\n        style[this.mxgraph.mxConstants.STYLE_SHAPE] = \"ellipse\";\r\n        graph.getStylesheet().putCellStyle('Nozzle', style);\r\n        style = [];\r\n        style[this.mxgraph.mxConstants.STYLE_FILLCOLOR] = 'none';\r\n        style[this.mxgraph.mxConstants.STYLE_STROKECOLOR] = 'none';\r\n        style[this.mxgraph.mxConstants.STYLE_SHAPE] = this.mxgraph.mxConstants.SHAPE_RECTANGLE;\r\n        style[this.mxgraph.mxConstants.STYLE_PERIMETER] = this.mxgraph.mxConstants.PERIMETER_RECTANGLE;\r\n        graph.getStylesheet().putCellStyle('parent', style);\r\n        style = [];\r\n        style[this.mxgraph.mxConstants.STYLE_FILLCOLOR] = 'none';\r\n        style[this.mxgraph.mxConstants.STYLE_STROKECOLOR] = 'none';\r\n        graph.getStylesheet().putCellStyle('interfaceValue', style);\r\n        style = graph.getStylesheet().getDefaultEdgeStyle();\r\n        style[this.mxgraph.mxConstants.STYLE_ENDARROW] = 'none';\r\n        style[this.mxgraph.mxConstants.STYLE_STROKEWIDTH] = 2;\r\n    }\r\n    /**\r\n     * Loads the stencil files for pid diagrams\r\n     */\r\n    loadStencilFiles(files) {\r\n        for (const filePath of files) {\r\n            let req = this.mxgraph.mxUtils.load(filePath);\r\n            let root = req.getDocumentElement();\r\n            let prefix = root.getAttribute(\"name\");\r\n            let shape = root.firstChild;\r\n            while (shape != null) {\r\n                if (shape.nodeType == this.mxgraph.mxConstants.NODETYPE_ELEMENT) {\r\n                    let name = prefix + '.' + shape.getAttribute('name').replace(/ /g, '_');\r\n                    this.mxgraph.mxStencilRegistry.addStencil(name.toLowerCase(), new this.mxgraph.mxStencil(shape));\r\n                }\r\n                shape = shape.nextSibling;\r\n            }\r\n        }\r\n    }\r\n}\r\nwindow[\"MtpJsonToMxGraph\"] = MtpJsonToMxGraph;\r\n//# sourceMappingURL=data:application/json;base64,", "Type" : "BMTypescriptHost", "Visible" : true, "Width" : 175, "Z-index" : 10, "__TypeDisplayName" : "TypeScript Object" }, "Widgets" : [ ] }, { "Properties" : { "ActiveStyle" : "DefaultButtonActiveStyle", "Area" : "UI", "AutoRefresh" : false, "AutoRefreshTabSequence" : 0, "DisplayName" : "autorefresh-15", "FocusStyle" : "DefaultButtonFocusStyle", "Height" : 28, "HoverStyle" : "DefaultButtonHoverStyle", "IconAlignment" : "left", "Id" : "autorefresh-15", "Label" : "Refresh Now", "Left" : 555, "RefreshInterval" : 30, "RefreshNowTabSequence" : 0, "RefreshToggleLabel" : "On", "RefreshToggleLabelOff" : "Off", "RefreshToggleSliderStyle" : "DefaultAutoRefreshToggleSliderStyle", "RefreshToggleStyle" : "DefaultAutoRefreshToggleStyle", "RefreshToggleStyleOff" : "DefaultAutoRefreshToggleOffStyle", "ResponsiveLayout" : false, "ShowControls" : true, "ShowDataLoading" : true, "Style" : "DefaultButtonStyle", "Top" : 80, "Type" : "autorefresh", "Visible" : true, "Width" : 180, "Z-index" : 10, "__TypeDisplayName" : "Auto Refresh" }, "Widgets" : [ ] } ] } ] }, { "Properties" : { "AnimateExpandCollapse" : true, "Area" : "UI", "BGImageRepeat" : "no-repeat", "BGImageSize" : "auto", "DisplayName" : "Row 1", "ExpandCollapseTabLocation" : "outside", "Expanded" : true, "Id" : "container-3", "MinHeight" : 0, "MinWidth" : 0, "Overlay" : false, "OverlayIsTransparent" : false, "ResponsiveLayout" : true, "ShowDataLoading" : true, "ShowExpandCollapseTab" : false, "Style" : "DefaultContainerStyle", "TabCollapseStyle" : "DefaultTabCollapseStyle", "TabExpandStyle" : "DefaultTabExpandStyle", "TabHeight" : 36, "TabLocation" : "center", "TabOffset" : 0, "TabWidth" : 36, "Type" : "container", "Visible" : true, "Z-index" : 10, "__TypeDisplayName" : "Container" }, "Widgets" : [ { "Properties" : { "Area" : "UI", "Columns" : 1, "DisplayName" : "layout-17", "Footer" : false, "FooterHeight" : 0, "Header" : false, "HeaderHeight" : 0, "Id" : "layout-17", "IncludeSpacingInFixedAreas" : false, "IsPrintLayout" : false, "Left" : 435, "LeftSidebar" : false, "LeftSidebarWidth" : 0, "Orientation" : "horizontal", "PctColumn1" : 100, "PctColumn2" : 0, "PctColumn3" : 1, "PctColumn4" : 1, "PctColumn5" : 1, "PctColumn6" : 1, "PctColumn7" : 1, "PctColumn8" : 1, "PctRow1" : 50, "PctRow2" : 50, "PctRow3" : 0, "PctRow4" : 0, "PctRow5" : 0, "PctRow6" : 0, "PctRow7" : 0, "PctRow8" : 0, "PrintMarginLeftRight" : 0.5, "PrintMarginTopBottom" : 0.5, "PrintWidth" : 650, "ResponsiveLayout" : true, "RightSidebar" : true, "RightSidebarWidth" : 100, "Rows" : 0, "ShowDataLoading" : true, "Spacing" : 2, "Top" : 145, "Type" : "layout", "Visible" : true, "Z-index" : 10, "__TypeDisplayName" : "Layout" }, "Widgets" : [ { "Properties" : { "AnimateExpandCollapse" : true, "Area" : "UI", "BGImageRepeat" : "no-repeat", "BGImageSize" : "auto", "DisplayName" : "Column 1", "ExpandCollapseTabLocation" : "outside", "Expanded" : true, "Id" : "container-18", "MinHeight" : 0, "MinWidth" : 0, "Overlay" : false, "OverlayIsTransparent" : false, "ResponsiveLayout" : true, "ShowDataLoading" : true, "ShowExpandCollapseTab" : false, "Style" : "DefaultContainerStyle", "TabCollapseStyle" : "DefaultTabCollapseStyle", "TabExpandStyle" : "DefaultTabExpandStyle", "TabHeight" : 36, "TabLocation" : "center", "TabOffset" : 0, "TabWidth" : 36, "Type" : "container", "Visible" : true, "Z-index" : 10, "__TypeDisplayName" : "Container" }, "Widgets" : [ { "Properties" : { "Area" : "UI", "AutoFit" : false, "AutoLayout" : "None", "DisplayName" : "mtpHMIDiagdam", "EdgeStyle" : "None", "Height" : 800, "Id" : "mxdiagram-4", "JSONArrayGraphCells" : "{}", "Left" : 0, "ResponsiveLayout" : true, "ShowDataLoading" : true, "ShowOutline" : false, "ShowTools" : true, "Top" : 0, "Type" : "mxdiagram", "ValueDiagram" : { }, "Visible" : true, "Width" : 640, "XMLDiagram" : "{}", "Z-index" : 10, "__TypeDisplayName" : "mxGraph Diagram" }, "Widgets" : [ ] } ] }, { "Properties" : { "AnimateExpandCollapse" : true, "Area" : "UI", "BGImageRepeat" : "no-repeat", "BGImageSize" : "auto", "DisplayName" : "Right Sidebar", "ExpandCollapseTabLocation" : "outside", "Expanded" : true, "Id" : "container-19", "MinHeight" : 0, "MinWidth" : 0, "Overlay" : false, "OverlayIsTransparent" : false, "ResponsiveLayout" : true, "ShowDataLoading" : true, "ShowExpandCollapseTab" : false, "Style" : "DefaultContainerStyle", "TabCollapseStyle" : "DefaultTabCollapseStyle", "TabExpandStyle" : "DefaultTabExpandStyle", "TabHeight" : 36, "TabLocation" : "center", "TabOffset" : 0, "TabWidth" : 36, "Type" : "container", "Visible" : true, "Z-index" : 10, "__TypeDisplayName" : "Container" }, "Widgets" : [ { "Properties" : { "Area" : "UI", "Columns" : 0, "DisplayName" : "layout-20", "Footer" : false, "FooterHeight" : 0, "Header" : false, "HeaderHeight" : 0, "Id" : "layout-20", "IncludeSpacingInFixedAreas" : false, "IsPrintLayout" : false, "Left" : 25, "LeftSidebar" : false, "LeftSidebarWidth" : 0, "Orientation" : "vertical", "PctColumn1" : 50, "PctColumn2" : 50, "PctColumn3" : 1, "PctColumn4" : 1, "PctColumn5" : 1, "PctColumn6" : 1, "PctColumn7" : 1, "PctColumn8" : 1, "PctRow1" : 50, "PctRow2" : 50, "PctRow3" : 0, "PctRow4" : 0, "PctRow5" : 0, "PctRow6" : 0, "PctRow7" : 0, "PctRow8" : 0, "PrintMarginLeftRight" : 0.5, "PrintMarginTopBottom" : 0.5, "PrintWidth" : 650, "ResponsiveLayout" : true, "RightSidebar" : false, "RightSidebarWidth" : 0, "Rows" : 2, "ShowDataLoading" : true, "Spacing" : 2, "Top" : 160, "Type" : "layout", "Visible" : true, "Z-index" : 10, "__TypeDisplayName" : "Layout" }, "Widgets" : [ { "Properties" : { "AnimateExpandCollapse" : true, "Area" : "UI", "BGImageRepeat" : "no-repeat", "BGImageSize" : "auto", "DisplayName" : "Row 1", "ExpandCollapseTabLocation" : "outside", "Expanded" : true, "Id" : "container-21", "MinHeight" : 0, "MinWidth" : 0, "Overlay" : false, "OverlayIsTransparent" : false, "ResponsiveLayout" : true, "ShowDataLoading" : true, "ShowExpandCollapseTab" : false, "Style" : "DefaultContainerStyle", "TabCollapseStyle" : "DefaultTabCollapseStyle", "TabExpandStyle" : "DefaultTabExpandStyle", "TabHeight" : 36, "TabLocation" : "center", "TabOffset" : 0, "TabWidth" : 36, "Type" : "container", "Visible" : true, "Z-index" : 10, "__TypeDisplayName" : "Container" }, "Widgets" : [ { "Properties" : { "Area" : "UI", "DisplayName" : "textarea-16", "Height" : 200, "Id" : "textarea-16", "InnerShadow" : true, "Label" : "", "LabelAlignment" : "left", "Left" : 210, "ReadOnly" : false, "ResponsiveLayout" : true, "ShowDataLoading" : true, "Style" : "DefaultTextAreaStyle", "TabSequence" : 0, "Text" : "", "TextareaFocusStyle" : "DefaultFocusStyle", "TextareaLabelStyle" : "DefaultWidgetLabelStyle", "ToolTipField" : "", "ToolTipStyle" : "DefaultTooltipStyle", "Top" : 0, "Type" : "textarea", "Visible" : true, "Width" : 300, "Z-index" : 10, "__TypeDisplayName" : "TextArea", "__supportsLabel" : true, "__supportsTooltip" : true }, "Widgets" : [ ] } ] }, { "Properties" : { "AnimateExpandCollapse" : true, "Area" : "UI", "BGImageRepeat" : "no-repeat", "BGImageSize" : "auto", "DisplayName" : "Row 2", "ExpandCollapseTabLocation" : "outside", "Expanded" : true, "Id" : "container-22", "MinHeight" : 0, "MinWidth" : 0, "Overlay" : false, "OverlayIsTransparent" : false, "ResponsiveLayout" : true, "ShowDataLoading" : true, "ShowExpandCollapseTab" : false, "Style" : "DefaultContainerStyle", "TabCollapseStyle" : "DefaultTabCollapseStyle", "TabExpandStyle" : "DefaultTabExpandStyle", "TabHeight" : 36, "TabLocation" : "center", "TabOffset" : 0, "TabWidth" : 36, "Type" : "container", "Visible" : true, "Z-index" : 10, "__TypeDisplayName" : "Container" }, "Widgets" : [ { "Properties" : { "Area" : "UI", "DisplayName" : "textarea-23", "Height" : 200, "Id" : "textarea-23", "InnerShadow" : true, "Label" : "", "LabelAlignment" : "left", "Left" : 210, "ReadOnly" : false, "ResponsiveLayout" : true, "ShowDataLoading" : true, "Style" : "DefaultTextAreaStyle", "TabSequence" : 0, "Text" : "", "TextareaFocusStyle" : "DefaultFocusStyle", "TextareaLabelStyle" : "DefaultWidgetLabelStyle", "ToolTipField" : "", "ToolTipStyle" : "DefaultTooltipStyle", "Top" : 0, "Type" : "textarea", "Visible" : true, "Width" : 300, "Z-index" : 10, "__TypeDisplayName" : "TextArea", "__supportsLabel" : true, "__supportsTooltip" : true }, "Widgets" : [ ] } ] } ] } ] } ] } ] } ] } ] }, "mashupType" : "mashup" }]]></mashupContent>
			<preview/>
			<ConfigurationChanges>
				<ConfigurationChange changeAction="CREATE" changeReason="" timestamp="2019-07-18T11:37:48.194+03:00" user="Administrator"/>
			</ConfigurationChanges>
		</Mashup>
		<Mashup aspect.isResponsive="true" aspect.mashupType="mashup" columns="0.0" description="" documentationContent="" homeMashup="" lastModifiedDate="2019-07-18T11:37:55.333+03:00" name="MTPViewer" projectName="MTP" rows="0.0" tags="">
			<Owner name="Administrator" type="User"/>
			<avatar/>
			<DesignTimePermissions>
				<Create/>
				<Read/>
				<Update/>
				<Delete/>
				<Metadata/>
			</DesignTimePermissions>
			<RunTimePermissions/>
			<VisibilityPermissions>
				<Visibility/>
			</VisibilityPermissions>
			<ConfigurationTableDefinitions/>
			<ConfigurationTables/>
			<ParameterDefinitions/>
			<Things>
				<Thing>MtpMxgraphUtilities</Thing>
			</Things>
			<ThingShapes/>
			<ThingTemplates/>
			<mashupContent><![CDATA[{ "ConfigurationTables" : { }, "CustomMashupCss" : "", "Data" : { "Session" : { "DataName" : "Session", "EntityName" : "", "EntityType" : "Session", "Id" : "session", "Services" : [ { "APIMethod" : "post", "Characteristic" : "Services", "Id" : "SessionInterface", "Name" : "GetGlobalSessionValues", "Parameters" : { }, "RefreshInterval" : 0, "Target" : "GetGlobalSessionValues" } ] }, "Things_MtpMxgraphUtilities" : { "DataName" : "Things_MtpMxgraphUtilities", "EntityName" : "MtpMxgraphUtilities", "EntityType" : "Things", "Id" : "7d91f3db-f8de-4583-b34c-47d8b88219b8", "Services" : [ { "APIMethod" : "get", "Characteristic" : "Services", "Id" : "54289561-5dc6-4f1b-9258-0545d8155f4c", "Name" : "GetProperties", "Parameters" : { }, "RefreshInterval" : 0, "Target" : "GetProperties" } ] }, "UserExtensions" : { "DataName" : "UserExtensions", "EntityName" : "", "EntityType" : "UserExtensions", "Id" : "UserExtensions", "Services" : [ { "APIMethod" : "post", "Characteristic" : "Services", "Id" : "UserExtensionInterface", "Name" : "GetCurrentUserExtensionProperties", "Parameters" : { }, "RefreshInterval" : 0, "Target" : "GetCurrentUserExtensionProperties" } ] } }, "DataBindings" : [ { "Id" : "0c1d0d33-0826-4a84-a43a-dc849b0e5f81", "PropertyMaps" : [ { "SourceProperty" : "Text", "SourcePropertyBaseType" : "STRING", "SourcePropertyType" : "Property", "TargetProperty" : "mtpFilePath", "TargetPropertyBaseType" : "STRING", "TargetPropertyType" : "property" } ], "SourceArea" : "UI", "SourceId" : "textbox-9", "SourceSection" : "", "TargetArea" : "UI", "TargetId" : "BMTypescriptHost-7", "TargetSection" : "" }, { "Id" : "122e5cfd-56c0-4d68-8309-b070834e9ef0", "PropertyMaps" : [ { "SourceProperty" : "mapping", "SourcePropertyBaseType" : "INFOTABLE", "SourcePropertyType" : "Property", "TargetProperty" : "shapeMapping", "TargetPropertyBaseType" : "INFOTABLE", "TargetPropertyType" : "property" } ], "SourceArea" : "Data", "SourceDetails" : "AllData", "SourceId" : "GetProperties", "SourceSection" : "Things_MtpMxgraphUtilities", "TargetArea" : "UI", "TargetId" : "BMTypescriptHost-7", "TargetSection" : "" } ], "DesignTimePermissions" : { "Create" : [ ], "Delete" : [ ], "Metadata" : [ ], "Read" : [ ], "Update" : [ ] }, "Events" : [ { "EventHandlerArea" : "UI", "EventHandlerId" : "BMTypescriptHost-7", "EventHandlerService" : "mashupDidFinishLoading", "EventTriggerArea" : "Mashup", "EventTriggerEvent" : "Loaded", "EventTriggerId" : "mashup-root", "EventTriggerSection" : "", "Id" : "d23a1753-706e-4b70-9737-c3d90eecae4a" }, { "EventHandlerArea" : "UI", "EventHandlerId" : "BMTypescriptHost-7", "EventHandlerService" : "loadFile", "EventTriggerArea" : "UI", "EventTriggerEvent" : "EnterKeyPressed", "EventTriggerId" : "textbox-9", "EventTriggerSection" : "", "Id" : "7eac4299-767d-4fc3-b1cc-38f0d009a10c" }, { "EventHandlerArea" : "UI", "EventHandlerId" : "BMCodeHost-11", "EventHandlerService" : "execute", "EventTriggerArea" : "UI", "EventTriggerEvent" : "loadSymbols", "EventTriggerId" : "BMTypescriptHost-7", "EventTriggerSection" : "", "Id" : "2bdaf292-ece2-47a0-82e2-3a2b1c923042" }, { "EventHandlerArea" : "Data", "EventHandlerId" : "Things_MtpMxgraphUtilities", "EventHandlerService" : "GetProperties", "EventTriggerArea" : "Mashup", "EventTriggerEvent" : "Loaded", "EventTriggerId" : "mashup-root", "EventTriggerSection" : "", "Id" : "39816aea-76d7-4e8f-aefb-e77a9db915fc" } ], "RunTimePermissions" : { "permissions" : [ ] }, "UI" : { "Properties" : { "AddToDashboardButtonStyle" : "DefaultAddToDashboardButtonStyle", "Area" : "Mashup", "BGImageRepeat" : "no-repeat", "BGImageSize" : "auto", "Columns" : 0, "ConfigureGadgetButtonStyle" : "DefaultConfigureGadgetButtonStyle", "DisplayName" : "Mashup", "EnableParameterEditing" : false, "Height" : 618, "Id" : "mashup-root", "IgnoreWarningsInViewMashup" : false, "IsPrintLayout" : false, "Left" : 0, "MashupToEditGadget" : "DefaultMashupToEditGadget", "MinHeight" : 0, "MinWidth" : 0, "ResponsiveLayout" : true, "Rows" : 0, "ShowDataLoading" : true, "Style" : "DefaultMashupStyle", "Title" : "", "TitleBar" : false, "TitleBarStyle" : "DefaultTitleBarStyle", "TitleBarText" : "Gadget Title Here", "Top" : 0, "Type" : "mashup", "Visible" : true, "Width" : 1024, "Z-index" : 10, "__TypeDisplayName" : "Mashup", "id_index" : 12, "supportsAutoResize" : true }, "Widgets" : [ { "Properties" : { "Area" : "UI", "Columns" : 0, "DisplayName" : "layout-1", "Footer" : false, "FooterHeight" : 0, "Header" : true, "HeaderHeight" : 100, "Id" : "layout-1", "IncludeSpacingInFixedAreas" : false, "IsPrintLayout" : false, "Left" : 500, "LeftSidebar" : false, "LeftSidebarWidth" : 0, "Orientation" : "vertical", "PctColumn1" : 50, "PctColumn2" : 50, "PctColumn3" : 1, "PctColumn4" : 1, "PctColumn5" : 1, "PctColumn6" : 1, "PctColumn7" : 1, "PctColumn8" : 1, "PctRow1" : 100, "PctRow2" : 0, "PctRow3" : 0, "PctRow4" : 0, "PctRow5" : 0, "PctRow6" : 0, "PctRow7" : 0, "PctRow8" : 0, "PrintMarginLeftRight" : 0.5, "PrintMarginTopBottom" : 0.5, "PrintWidth" : 650, "ResponsiveLayout" : true, "RightSidebar" : false, "RightSidebarWidth" : 0, "Rows" : 1, "ShowDataLoading" : true, "Spacing" : 2, "Top" : 160, "Type" : "layout", "Visible" : true, "Z-index" : 10, "__TypeDisplayName" : "Layout" }, "Widgets" : [ { "Properties" : { "AnimateExpandCollapse" : true, "Area" : "UI", "BGImageRepeat" : "no-repeat", "BGImageSize" : "auto", "DisplayName" : "Header", "ExpandCollapseTabLocation" : "outside", "Expanded" : true, "Id" : "container-2", "MinHeight" : 0, "MinWidth" : 0, "Overlay" : false, "OverlayIsTransparent" : false, "ResponsiveLayout" : true, "ShowDataLoading" : true, "ShowExpandCollapseTab" : false, "Style" : "DefaultContainerStyle", "TabCollapseStyle" : "DefaultTabCollapseStyle", "TabExpandStyle" : "DefaultTabExpandStyle", "TabHeight" : 36, "TabLocation" : "center", "TabOffset" : 0, "TabWidth" : 36, "Type" : "container", "Visible" : true, "Z-index" : 10, "__TypeDisplayName" : "Container" }, "Widgets" : [ { "Properties" : { "Area" : "UI", "DisplayName" : "panel-6", "Height" : 200, "HideScrollbars" : false, "HorizontalAnchor" : "left", "Id" : "panel-6", "Left" : 185, "ResponsiveLayout" : true, "ShowDataLoading" : true, "Style" : "DefaultContainerStyle", "Top" : 75, "Type" : "panel", "VerticalAnchor" : "top", "Visible" : true, "Width" : 300, "Z-index" : 10, "__TypeDisplayName" : "Panel" }, "Widgets" : [ { "Properties" : { "Area" : "UI", "Code" : "//#import mtpFileLoader from MTPViewer\n// exectutes when the mashup finishes loading\nlet diagdamWdg: any;\nlet fileLoader: MptFileLoader;\nlet eClassShapeMap : any= {};\nself.mashupDidFinishLoading = function () {\n    // get a reference to the mx diagram widget based on its display name\n    diagdamWdg = $w('mtpHMIDiagdam') as any;\n}\n\ndeclare interface Window {\n    [key: string]: any;\n}\n\nself.shapeMappingDidUpdateToValue = (value) => {\n    for (const element of value.rows) {\n        eClassShapeMap[element.eclass] = element.mxgraphShape;\n    }\n}\n\nself.loadFile = async () => {\n    if(!fileLoader) {\n        // add all of mxgraph to window\n        for (const key in diagdamWdg.mxGraphNamespace.mxgraph) {\n            if (diagdamWdg.mxGraphNamespace.mxgraph.hasOwnProperty(key)) {\n                window[key] = diagdamWdg.mxGraphNamespace.mxgraph[key] \n            }\n        }\n        fileLoader = new MptFileLoader(diagdamWdg.mxGraphNamespace.mxgraph, diagdamWdg.jqElement[0], eClassShapeMap);\n        self.dispatchEvent('loadSymbols');\n    }\n    diagdamWdg.resetCurrentGraph();\n    // load the xml file and parse it into a document\n    const graph = await fileLoader.loadFile(self.mtpFilePath as string);\n    diagdamWdg.setNewActiveGraph(graph);\n}", "ColumnPosition" : 21, "DirectLinkUUID" : "", "DisplayName" : "BMTypescriptHost-7", "Exports" : "interface mtpFileController extends TWRuntimeWidget {mtpFilePath: STRING; \n\t    \t/**\n\t    \t * Invoked whenever the mtpFilePath property is about to be updated to a new value as a result of a binding.\n\t    \t * Scripts can override this method to respond the incoming change and accept or reject the new value.\n\t    \t * The default implementation does nothing and accepts all new values.\n\t    \t * @param value - The property's new value.\n\t    \t * @param args - An object containing additional arguments including the previous value (args.fromValue).\n\t    \t * @return - True if the new value should be accepted, false otherwise.\n\t    \t */\n\t\t\tmtpFilePathShouldUpdateToValue(value: any, args: SelfShouldUpdateToValueArgs): boolean; \n\t    \t/**\n\t    \t * Invoked after the mtpFilePath property has been updated as a result of a binding.\n\t    \t * This method is only invoked if the corresponding ..ShouldUpdateToValue method has returned true.\n\t    \t * Scripts can override this method to respond to property updates.\n\t    \t * The default implementation does nothing.\n\t    \t * @param value - The property's new value.\n\t    \t * @param args - An object containing additional arguments including the previous value (args.fromValue).\n\t    \t */\n\t\t\tmtpFilePathDidUpdateToValue(value: any, args: SelfShouldUpdateToValueArgs); \nshapeMapping: INFOTABLE; \n\t    \t/**\n\t    \t * Invoked whenever the shapeMapping property is about to be updated to a new value as a result of a binding.\n\t    \t * Scripts can override this method to respond the incoming change and accept or reject the new value.\n\t    \t * The default implementation does nothing and accepts all new values.\n\t    \t * @param value - The property's new value.\n\t    \t * @param args - An object containing additional arguments including the previous value (args.fromValue).\n\t    \t * @return - True if the new value should be accepted, false otherwise.\n\t    \t */\n\t\t\tshapeMappingShouldUpdateToValue(value: any, args: SelfShouldUpdateToValueArgs): boolean; \n\t    \t/**\n\t    \t * Invoked after the shapeMapping property has been updated as a result of a binding.\n\t    \t * This method is only invoked if the corresponding ..ShouldUpdateToValue method has returned true.\n\t    \t * Scripts can override this method to respond to property updates.\n\t    \t * The default implementation does nothing.\n\t    \t * @param value - The property's new value.\n\t    \t * @param args - An object containing additional arguments including the previous value (args.fromValue).\n\t    \t */\n\t\t\tshapeMappingDidUpdateToValue(value: any, args: SelfShouldUpdateToValueArgs); \nmashupDidFinishLoading(); loadFile(); \t    \t/**\t    \t * Should be invoked to dispatch an event to the Thingworx runtime, causing all actions bound to that event to execute.\n\t    \t * @param event - The name of the event to dispatch.\n\t    \t */\n\t\t\tdispatchEvent(event: string): void;\n\t    \t/**\n\t    \t * Invoked after any property has been updated as a result of a binding.\n\t    \t * This method will be invoked after the specific ..DidUpdateToValue method is invoked.\n\t    \t * Scripts can override this method to react to all property updates.\n\t    \t * @param event - The name of the event to dispatch.\n\t    \t */\n\t\t\tpropertyDidUpdateToValue(property: string, value: any | undefined): void;\n\t    \t/**\n\t    \t * Finds and returns the widget with the given name in the current mashup.\n\t    \t * @param name - The DisplayName of the widget to find.\n\t    \t * @return - The widget object if it was found, undefined otherwise.\n\t    \t */\n\t\t\twidgetNamed(name: string): TWRuntimeWidget | undefined;\n\t    \t/**\n\t    \t * Sends a property update to the given widget as if it came from a binding.\n\t    \t * Supported properties may be updated this way even if they are not bound to anything in the composer.\n\t    \t * @param widget - The widget object whose property should be updated.\n\t    \t * @param args - An object containing additional arguments. This object must have the following properties:\n\t    \t *\t\t\t\t\tforProperty {String} - The name of the property to update.\n\t    \t *\t\t\t\t\tvalue {AnyObject} - The value to which that property should update.\n\t    \t */\n\t\t\tdispatchPropertyUpdateToWidget(widget: any, args: SelfDispatchPropertyUpdateToWidgetArgs): void;\n\t    \t/**\n\t    \t * May be overriden by scripts that create an UI. This method receives the script's container as its parameter.\n\t    \t * It is the script's responsibility to add their content to the supplied container.\n\t    \t * @param container - The container in which the UI elements should be added.\n\t    \t */\n\t\t\trenderWithContainer(container: $): void;\n\t\t}\n", "FullScreen" : false, "Height" : 46, "Id" : "BMTypescriptHost-7", "Left" : 30, "ResponsiveLayout" : false, "RuntimeProperties" : "[{\"name\":\"mtpFilePath\",\"dataType\":\"STRING\",\"type\":\"property\"},{\"name\":\"shapeMapping\",\"dataType\":\"INFOTABLE\",\"type\":\"property\"},{\"name\":\"mashupDidFinishLoading\",\"dataType\":\"STRING\",\"type\":\"service\"},{\"name\":\"loadFile\",\"dataType\":\"STRING\",\"type\":\"service\"},{\"name\":\"loadSymbols\",\"dataType\":\"STRING\",\"type\":\"event\"}]", "Scope" : "local", "ScrollPosition" : 3, "ShowDataLoading" : true, "Title" : "mtpFileController", "Top" : 20, "TranspiledCode" : "\"use strict\";\r\n//#import mtpFileLoader from MTPViewer\r\n// exectutes when the mashup finishes loading\r\nlet diagdamWdg;\r\nlet fileLoader;\r\nlet eClassShapeMap = {};\r\nself.mashupDidFinishLoading = function () {\r\n    // get a reference to the mx diagram widget based on its display name\r\n    diagdamWdg = $w('mtpHMIDiagdam');\r\n};\r\nself.shapeMappingDidUpdateToValue = (value) => {\r\n    for (const element of value.rows) {\r\n        eClassShapeMap[element.eclass] = element.mxgraphShape;\r\n    }\r\n};\r\nself.loadFile = async () => {\r\n    if (!fileLoader) {\r\n        // add all of mxgraph to window\r\n        for (const key in diagdamWdg.mxGraphNamespace.mxgraph) {\r\n            if (diagdamWdg.mxGraphNamespace.mxgraph.hasOwnProperty(key)) {\r\n                window[key] = diagdamWdg.mxGraphNamespace.mxgraph[key];\r\n            }\r\n        }\r\n        fileLoader = new MptFileLoader(diagdamWdg.mxGraphNamespace.mxgraph, diagdamWdg.jqElement[0], eClassShapeMap);\r\n        self.dispatchEvent('loadSymbols');\r\n    }\r\n    diagdamWdg.resetCurrentGraph();\r\n    // load the xml file and parse it into a document\r\n    const graph = await fileLoader.loadFile(self.mtpFilePath);\r\n    diagdamWdg.setNewActiveGraph(graph);\r\n};\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIjciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHNDQUFzQztBQUN0Qyw2Q0FBNkM7QUFDN0MsSUFBSSxVQUFlLENBQUM7QUFDcEIsSUFBSSxVQUF5QixDQUFDO0FBQzlCLElBQUksY0FBYyxHQUFRLEVBQUUsQ0FBQztBQUM3QixJQUFJLENBQUMsc0JBQXNCLEdBQUc7SUFDMUIscUVBQXFFO0lBQ3JFLFVBQVUsR0FBRyxFQUFFLENBQUMsZUFBZSxDQUFRLENBQUM7QUFDNUMsQ0FBQyxDQUFBO0FBTUQsSUFBSSxDQUFDLDRCQUE0QixHQUFHLENBQUMsS0FBSyxFQUFFLEVBQUU7SUFDMUMsS0FBSyxNQUFNLE9BQU8sSUFBSSxLQUFLLENBQUMsSUFBSSxFQUFFO1FBQzlCLGNBQWMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQztLQUN6RDtBQUNMLENBQUMsQ0FBQTtBQUVELElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxJQUFJLEVBQUU7SUFDdkIsSUFBRyxDQUFDLFVBQVUsRUFBRTtRQUNaLCtCQUErQjtRQUMvQixLQUFLLE1BQU0sR0FBRyxJQUFJLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUU7WUFDbkQsSUFBSSxVQUFVLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDekQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUE7YUFDekQ7U0FDSjtRQUNELFVBQVUsR0FBRyxJQUFJLGFBQWEsQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsY0FBYyxDQUFDLENBQUM7UUFDN0csSUFBSSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsQ0FBQztLQUNyQztJQUNELFVBQVUsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBQy9CLGlEQUFpRDtJQUNqRCxNQUFNLEtBQUssR0FBRyxNQUFNLFVBQVUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQXFCLENBQUMsQ0FBQztJQUNwRSxVQUFVLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDeEMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLy8jaW1wb3J0IG10cEZpbGVMb2FkZXIgZnJvbSBNVFBWaWV3ZXJcbi8vIGV4ZWN0dXRlcyB3aGVuIHRoZSBtYXNodXAgZmluaXNoZXMgbG9hZGluZ1xubGV0IGRpYWdkYW1XZGc6IGFueTtcbmxldCBmaWxlTG9hZGVyOiBNcHRGaWxlTG9hZGVyO1xubGV0IGVDbGFzc1NoYXBlTWFwIDogYW55PSB7fTtcbnNlbGYubWFzaHVwRGlkRmluaXNoTG9hZGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAvLyBnZXQgYSByZWZlcmVuY2UgdG8gdGhlIG14IGRpYWdyYW0gd2lkZ2V0IGJhc2VkIG9uIGl0cyBkaXNwbGF5IG5hbWVcbiAgICBkaWFnZGFtV2RnID0gJHcoJ210cEhNSURpYWdkYW0nKSBhcyBhbnk7XG59XG5cbmRlY2xhcmUgaW50ZXJmYWNlIFdpbmRvdyB7XG4gICAgW2tleTogc3RyaW5nXTogYW55O1xufVxuXG5zZWxmLnNoYXBlTWFwcGluZ0RpZFVwZGF0ZVRvVmFsdWUgPSAodmFsdWUpID0+IHtcbiAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgdmFsdWUucm93cykge1xuICAgICAgICBlQ2xhc3NTaGFwZU1hcFtlbGVtZW50LmVjbGFzc10gPSBlbGVtZW50Lm14Z3JhcGhTaGFwZTtcbiAgICB9XG59XG5cbnNlbGYubG9hZEZpbGUgPSBhc3luYyAoKSA9PiB7XG4gICAgaWYoIWZpbGVMb2FkZXIpIHtcbiAgICAgICAgLy8gYWRkIGFsbCBvZiBteGdyYXBoIHRvIHdpbmRvd1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBkaWFnZGFtV2RnLm14R3JhcGhOYW1lc3BhY2UubXhncmFwaCkge1xuICAgICAgICAgICAgaWYgKGRpYWdkYW1XZGcubXhHcmFwaE5hbWVzcGFjZS5teGdyYXBoLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3dba2V5XSA9IGRpYWdkYW1XZGcubXhHcmFwaE5hbWVzcGFjZS5teGdyYXBoW2tleV0gXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZmlsZUxvYWRlciA9IG5ldyBNcHRGaWxlTG9hZGVyKGRpYWdkYW1XZGcubXhHcmFwaE5hbWVzcGFjZS5teGdyYXBoLCBkaWFnZGFtV2RnLmpxRWxlbWVudFswXSwgZUNsYXNzU2hhcGVNYXApO1xuICAgICAgICBzZWxmLmRpc3BhdGNoRXZlbnQoJ2xvYWRTeW1ib2xzJyk7XG4gICAgfVxuICAgIGRpYWdkYW1XZGcucmVzZXRDdXJyZW50R3JhcGgoKTtcbiAgICAvLyBsb2FkIHRoZSB4bWwgZmlsZSBhbmQgcGFyc2UgaXQgaW50byBhIGRvY3VtZW50XG4gICAgY29uc3QgZ3JhcGggPSBhd2FpdCBmaWxlTG9hZGVyLmxvYWRGaWxlKHNlbGYubXRwRmlsZVBhdGggYXMgc3RyaW5nKTtcbiAgICBkaWFnZGFtV2RnLnNldE5ld0FjdGl2ZUdyYXBoKGdyYXBoKTtcbn0iXX0=", "Type" : "BMTypescriptHost", "Visible" : true, "Width" : 164, "Z-index" : 10, "__TypeDisplayName" : "TypeScript Object" }, "Widgets" : [ ] }, { "Properties" : { "Area" : "UI", "Code" : "const NOZZLE_WIDTH = 5;\nconst NOZZLE_HEIGHT = 5;\nconst STENCIL_PATH = \"/mtp/stencils/\"\nconst STENCIL_LIST = ['agitators.xml', 'apparatus_elements.xml', 'agitators.xml', 'centrifuges.xml', 'compressors.xml',\n    'compressors_iso.xml', 'crushers_grinding.xml', 'driers.xml', 'engines.xml', 'feeders.xml', 'filters.xml', 'fittings.xml',\n    'flow_sensors.xml', 'heat_exchangers.xml', 'instruments.xml', 'misc.xml', 'mixers.xml', 'piping.xml', 'feeders.xml', 'feeders.xml',\n    'pumps.xml', 'pumps_din.xml', 'pumps_iso.xml', 'separators.xml', 'shaping_machines.xml', 'valves.xml', 'vessels.xml'];\n\n/**\n * Utility class for easier working with points\n */\ninterface mxPoint {\n    x: number;\n    y: number;\n}\n/**\n * A MtpFileLoader handles loading a mtp file from the given link, \n * parsing it into an mxgraph graph object and retring it.\n */\nclass MptFileLoader {\n    private mxgraph: any;\n    private container: HTMLElement;\n    private shapeMap: {[key: string]: string};\n    /**\n     *  Intializes the MtpFileLoader with the mxgraph namespace\n     */\n    constructor(mxGraphNamespace: any, container: HTMLElement, shapeMap) {\n        this.mxgraph = mxGraphNamespace;\n        this.mxgraph.mxPoint.fromString = (value: string) => {\n            const tokens = value.split(\",\");\n            if (tokens.length < 2) {\n                throw \"We need two points to create a mxPoint\"\n            }\n            return new this.mxgraph.mxPoint(parseFloat(tokens[0]), parseFloat(tokens[1]));\n        }\n        this.container = container;\n        // load all the stencils\n        this.loadStencilFiles(STENCIL_LIST.map((el) => {return STENCIL_PATH + el}));\n        this.shapeMap = shapeMap;\n    }\n\n    public async loadFile(filePath: string): Promise<any> {\n        try {\n            const response = await fetch(filePath);\n            const responseText = await response.text();\n            const xmlData = new DOMParser().parseFromString(responseText, \"text/xml\");\n            return this.parseMtpXml(xmlData);\n        } catch (e) {\n            console.error(\"Failed to load MTP\")\n            throw e;\n        }\n    }\n\n    private parseMtpXml(file: Document): any {\n        // we need to iterate through the file and find a InstanceHierarchy with the name HMI\n        const hmiDiagram = file.querySelector('InstanceHierarchy[Name=\"HMI\"] InternalElement[Name=\"Visu_Main\"]');\n\n        if (!hmiDiagram) {\n            throw \"No HMI found\";\n        }\n\n        // start creating the diagram\n        let graph = new this.mxgraph.mxGraph(this.container);\n        graph.foldingEnabled = false;\n        // Allow panning using the right click buttion\n        graph.setPanning(true);\n        // enable the display of tooltips\n        graph.setTooltips(true);\n        // disable new connections and cloning cells, as well as drag and drop outside\n        graph.setConnectable(false);\n        graph.setCellsCloneable(false);\n        graph.setCellsDeletable(false);\n        graph.setDropEnabled(false);\n        graph.setSplitEnabled(false);\n\n        this.declareMxGraphStyles(graph);\n        let parent = graph.getDefaultParent();\n        // add the visualization\n        //parent = graph.insertVertex(parent, null, null, 0, 0, this.getAttributeValue(hmiDiagram, \"Width\"),\n        //    this.getAttributeValue(hmiDiagram, \"Height\"), 'parent');\n\n\n        graph.getModel().prefix = \"autoGenerated\";\n\n        // iterate through the internal elements of the diagram and add them to the diagram\n        for (let i = 0; i < hmiDiagram!.childElementCount; i++) {\n            const element = hmiDiagram!.children[i] as Element;\n            if (element.nodeName == \"InternalElement\") {\n                if (this.getAttributeValue(element, \"Edgepath\", false)) {\n                    // if there is a attribute with an edge path, assume it's a line\n                    // first find the internal elements, most likely Nozzles\n                    this.handleInternalNozzles(element, graph, parent);\n                    // now add the pipe element\n                    let edgePath = this.getAttributeValue(element, \"Edgepath\", false);\n                    let points = this.parseEdgePath(edgePath as string);\n                    let edge = this.createPipe(element.getAttribute(\"ID\")!, element.getAttribute(\"Name\")!, \"pipe\",\n                        points.start, points.end, points.waypoints);\n\n                    graph.addEdge(edge, parent);\n                } else if (this.getAttributeValue(element, \"eClassClassificationClass\")) {\n                     // we have a eClassClassificationClass, so this is most likely a diagram element\n                    let parsedPosition = {\n                        x: this.getAttributeValue(element, \"X\") as number,\n                        y: this.getAttributeValue(element, \"Y\") as number,\n                        width: this.getAttributeValue(element, \"Width\") as number,\n                        height: this.getAttributeValue(element, \"Height\") as number\n                    };\n                    // we create the parent for this element first. this is used as an container for all the components\n                    let elementParent = graph.insertVertex(parent, element.getAttribute(\"ID\"), element.getAttribute(\"Name\"),\n                        parsedPosition.x, parsedPosition.y, parsedPosition.width, parsedPosition.height,\n                        `parent;rotation=${this.getAttributeValue(element, \"Rotation\")}`);\n                    graph.insertVertex(parent, element.getAttribute(\"ID\"), element.getAttribute(\"Name\"),\n                        parsedPosition.x, parsedPosition.y, parsedPosition.width, parsedPosition.height,\n                        `element;shape=${this.shapeMap[this.getAttributeValue(element, \"eClassClassificationClass\") as string]};`+\n                        `rotation=${this.getAttributeValue(element, \"Rotation\")}`);\n                    this.handleInternalNozzles(element, graph, parent);\n                }\n            }\n\n        }\n\n        return graph;\n    }\n\n    /**\n     * Creates nozzles for the given element\n     */\n    private handleInternalNozzles(element: Element, graph: any, parent: any) {\n        for (let j = 0; j < element.childElementCount; j++) {\n            const subElement = element.children[j] as Element;\n            if (subElement.nodeName == \"InternalElement\") {\n                // find the x and y\n                let xPosition = this.getAttributeValue(subElement, \"X\") as number;\n                let yPosition = this.getAttributeValue(subElement, \"Y\") as number;\n                // add the nozzle to the graph\n                graph.insertVertex(parent, subElement.getAttribute(\"ID\"), undefined,\n                    xPosition - NOZZLE_WIDTH/2, yPosition - NOZZLE_HEIGHT/2, NOZZLE_WIDTH, NOZZLE_HEIGHT, \"nozzle\");\n            }\n        }\n    }\n    /**\n     * Computes a list of points into a start, end and intermidiate points\n     */\n    private parseEdgePath(edgePath: string): { start: mxPoint, end: mxPoint, waypoints: mxPoint[] } {\n        let tokens = edgePath.split(\";\");\n        return {\n            start: this.mxgraph.mxPoint.fromString(tokens[0]),\n            end: this.mxgraph.mxPoint.fromString(tokens[tokens.length - 1]),\n            waypoints: tokens.slice(1, -1).map((el) => { return this.mxgraph.mxPoint.fromString(el) })\n        }\n    }\n\n    /**\n     * XML parsing fucntion, helping getting the Value tag of a Attribute tag identified by the attrName\n     */\n    private getAttributeValue(parent: Element, attrName: string, asNumber = true) {\n        let value = parent.querySelector(`Attribute[Name=\"${attrName}\"] > Value`);\n        if (value) {\n            if (asNumber && value.textContent) {\n                return parseFloat(value.textContent);\n            } else {\n                return value.textContent;\n            }\n        }\n    }\n\n    /**\n     * Creates a pipe with the given attributes\n     */\n    private createPipe(id: string, value: string, style: string, sourcePoint: mxPoint, targetPoint: mxPoint, waypoints: mxPoint[]) {\n        let edge = new this.mxgraph.mxCell(value, new this.mxgraph.mxGeometry(), style);\n        edge.setId(id);\n        edge.setEdge(true);\n        edge.geometry.relative = true;\n        // set the starting and ending poitns\n        edge.geometry.sourcePoint = sourcePoint;\n        edge.geometry.targetPoint = targetPoint;\n        edge.geometry.points = waypoints;\n        return edge;\n    }\n\n    /**\n     * Creates the generic styles for elements\n     */\n    private declareMxGraphStyles(graph: any) {\n        var style = graph.getStylesheet().getDefaultVertexStyle();\n        style[this.mxgraph.mxConstants.STYLE_ROUNDED] = false;\n        style[this.mxgraph.mxConstants.STYLE_FONTCOLOR] = '#1d1b1b';\n        style[this.mxgraph.mxConstants.STYLE_STROKECOLOR] = '#9673A6';\n        style[this.mxgraph.mxConstants.STYLE_FILLCOLOR] = '#f3f4f9';\n\n        style = this.mxgraph.mxUtils.clone(style);\n        style[this.mxgraph.mxConstants.STYLE_STROKECOLOR] = 'red';\n        style[this.mxgraph.mxConstants.STYLE_SHAPE] = \"ellipse\";\n        graph.getStylesheet().putCellStyle('nozzle', style);\n\n        style = this.mxgraph.mxUtils.clone(style);\n        style[this.mxgraph.mxConstants.STYLE_FILLCOLOR] = 'transparent';\n        style[this.mxgraph.mxConstants.STYLE_STROKECOLOR] = 'transparent';\n        style[this.mxgraph.mxConstants.STYLE_SHAPE] = this.mxgraph.mxConstants.SHAPE_RECTANGLE;\n        style[this.mxgraph.mxConstants.STYLE_PERIMETER] = this.mxgraph.mxConstants.PERIMETER_RECTANGLE;\n        graph.getStylesheet().putCellStyle('parent', style);\n\n        var style = graph.getStylesheet().getDefaultEdgeStyle();\n        style[this.mxgraph.mxConstants.STYLE_ENDARROW] = 'none';\n        style[this.mxgraph.mxConstants.STYLE_STROKEWIDTH] = 2;\n    }\n    /**\n     * Loads the stencil files for pid diagrams\n     */\n    private loadStencilFiles(files: string[]) {\n        for (const filePath of files) {\n            var req = this.mxgraph.mxUtils.load(filePath);\n            var root = req.getDocumentElement();\n            var prefix = root.getAttribute(\"name\");\n            var shape = root.firstChild;\n\n            while (shape != null) {\n                if (shape.nodeType == this.mxgraph.mxConstants.NODETYPE_ELEMENT) {\n                    var name = prefix + '.' + shape.getAttribute('name').replace(/ /g, '_');\n                    this.mxgraph.mxStencilRegistry.addStencil(name.toLowerCase(), new this.mxgraph.mxStencil(shape));\n                }\n                shape = shape.nextSibling;\n            }\n        }\n    }\n}\ninterface Window {\n    MptFileLoader: typeof MptFileLoader\n}\nwindow[\"MptFileLoader\"] = MptFileLoader;", "ColumnPosition" : 91, "DirectLinkUUID" : "", "DisplayName" : "BMTypescriptHost-8", "Exports" : "interface mtpFileLoader extends TWRuntimeWidget {\t    \t/**\t    \t * Should be invoked to dispatch an event to the Thingworx runtime, causing all actions bound to that event to execute.\n\t    \t * @param event - The name of the event to dispatch.\n\t    \t */\n\t\t\tdispatchEvent(event: string): void;\n\t    \t/**\n\t    \t * Invoked after any property has been updated as a result of a binding.\n\t    \t * This method will be invoked after the specific ..DidUpdateToValue method is invoked.\n\t    \t * Scripts can override this method to react to all property updates.\n\t    \t * @param event - The name of the event to dispatch.\n\t    \t */\n\t\t\tpropertyDidUpdateToValue(property: string, value: any | undefined): void;\n\t    \t/**\n\t    \t * Finds and returns the widget with the given name in the current mashup.\n\t    \t * @param name - The DisplayName of the widget to find.\n\t    \t * @return - The widget object if it was found, undefined otherwise.\n\t    \t */\n\t\t\twidgetNamed(name: string): TWRuntimeWidget | undefined;\n\t    \t/**\n\t    \t * Sends a property update to the given widget as if it came from a binding.\n\t    \t * Supported properties may be updated this way even if they are not bound to anything in the composer.\n\t    \t * @param widget - The widget object whose property should be updated.\n\t    \t * @param args - An object containing additional arguments. This object must have the following properties:\n\t    \t *\t\t\t\t\tforProperty {String} - The name of the property to update.\n\t    \t *\t\t\t\t\tvalue {AnyObject} - The value to which that property should update.\n\t    \t */\n\t\t\tdispatchPropertyUpdateToWidget(widget: any, args: SelfDispatchPropertyUpdateToWidgetArgs): void;\n\t    \t/**\n\t    \t * May be overriden by scripts that create an UI. This method receives the script's container as its parameter.\n\t    \t * It is the script's responsibility to add their content to the supplied container.\n\t    \t * @param container - The container in which the UI elements should be added.\n\t    \t */\n\t\t\trenderWithContainer(container: $): void;\n\t\t}\n", "FullScreen" : true, "Height" : 46, "Id" : "BMTypescriptHost-8", "Left" : 225, "ResponsiveLayout" : false, "RuntimeProperties" : "[]", "Scope" : "global", "ScrollPosition" : 111, "ShowDataLoading" : true, "Title" : "mtpFileLoader", "Top" : 20, "TranspiledCode" : "\"use strict\";\r\nconst NOZZLE_WIDTH = 5;\r\nconst NOZZLE_HEIGHT = 5;\r\nconst STENCIL_PATH = \"/mtp/stencils/\";\r\nconst STENCIL_LIST = ['agitators.xml', 'apparatus_elements.xml', 'agitators.xml', 'centrifuges.xml', 'compressors.xml',\r\n    'compressors_iso.xml', 'crushers_grinding.xml', 'driers.xml', 'engines.xml', 'feeders.xml', 'filters.xml', 'fittings.xml',\r\n    'flow_sensors.xml', 'heat_exchangers.xml', 'instruments.xml', 'misc.xml', 'mixers.xml', 'piping.xml', 'feeders.xml', 'feeders.xml',\r\n    'pumps.xml', 'pumps_din.xml', 'pumps_iso.xml', 'separators.xml', 'shaping_machines.xml', 'valves.xml', 'vessels.xml'];\r\n/**\r\n * A MtpFileLoader handles loading a mtp file from the given link,\r\n * parsing it into an mxgraph graph object and retring it.\r\n */\r\nclass MptFileLoader {\r\n    /**\r\n     *  Intializes the MtpFileLoader with the mxgraph namespace\r\n     */\r\n    constructor(mxGraphNamespace, container, shapeMap) {\r\n        this.mxgraph = mxGraphNamespace;\r\n        this.mxgraph.mxPoint.fromString = (value) => {\r\n            const tokens = value.split(\",\");\r\n            if (tokens.length < 2) {\r\n                throw \"We need two points to create a mxPoint\";\r\n            }\r\n            return new this.mxgraph.mxPoint(parseFloat(tokens[0]), parseFloat(tokens[1]));\r\n        };\r\n        this.container = container;\r\n        // load all the stencils\r\n        this.loadStencilFiles(STENCIL_LIST.map((el) => { return STENCIL_PATH + el; }));\r\n        this.shapeMap = shapeMap;\r\n    }\r\n    async loadFile(filePath) {\r\n        try {\r\n            const response = await fetch(filePath);\r\n            const responseText = await response.text();\r\n            const xmlData = new DOMParser().parseFromString(responseText, \"text/xml\");\r\n            return this.parseMtpXml(xmlData);\r\n        }\r\n        catch (e) {\r\n            console.error(\"Failed to load MTP\");\r\n            throw e;\r\n        }\r\n    }\r\n    parseMtpXml(file) {\r\n        // we need to iterate through the file and find a InstanceHierarchy with the name HMI\r\n        const hmiDiagram = file.querySelector('InstanceHierarchy[Name=\"HMI\"] InternalElement[Name=\"Visu_Main\"]');\r\n        if (!hmiDiagram) {\r\n            throw \"No HMI found\";\r\n        }\r\n        // start creating the diagram\r\n        let graph = new this.mxgraph.mxGraph(this.container);\r\n        graph.foldingEnabled = false;\r\n        // Allow panning using the right click buttion\r\n        graph.setPanning(true);\r\n        // enable the display of tooltips\r\n        graph.setTooltips(true);\r\n        // disable new connections and cloning cells, as well as drag and drop outside\r\n        graph.setConnectable(false);\r\n        graph.setCellsCloneable(false);\r\n        graph.setCellsDeletable(false);\r\n        graph.setDropEnabled(false);\r\n        graph.setSplitEnabled(false);\r\n        this.declareMxGraphStyles(graph);\r\n        let parent = graph.getDefaultParent();\r\n        // add the visualization\r\n        //parent = graph.insertVertex(parent, null, null, 0, 0, this.getAttributeValue(hmiDiagram, \"Width\"),\r\n        //    this.getAttributeValue(hmiDiagram, \"Height\"), 'parent');\r\n        graph.getModel().prefix = \"autoGenerated\";\r\n        // iterate through the internal elements of the diagram and add them to the diagram\r\n        for (let i = 0; i < hmiDiagram.childElementCount; i++) {\r\n            const element = hmiDiagram.children[i];\r\n            if (element.nodeName == \"InternalElement\") {\r\n                if (this.getAttributeValue(element, \"Edgepath\", false)) {\r\n                    // if there is a attribute with an edge path, assume it's a line\r\n                    // first find the internal elements, most likely Nozzles\r\n                    this.handleInternalNozzles(element, graph, parent);\r\n                    // now add the pipe element\r\n                    let edgePath = this.getAttributeValue(element, \"Edgepath\", false);\r\n                    let points = this.parseEdgePath(edgePath);\r\n                    let edge = this.createPipe(element.getAttribute(\"ID\"), element.getAttribute(\"Name\"), \"pipe\", points.start, points.end, points.waypoints);\r\n                    graph.addEdge(edge, parent);\r\n                }\r\n                else if (this.getAttributeValue(element, \"eClassClassificationClass\")) {\r\n                    // we have a eClassClassificationClass, so this is most likely a diagram element\r\n                    let parsedPosition = {\r\n                        x: this.getAttributeValue(element, \"X\"),\r\n                        y: this.getAttributeValue(element, \"Y\"),\r\n                        width: this.getAttributeValue(element, \"Width\"),\r\n                        height: this.getAttributeValue(element, \"Height\")\r\n                    };\r\n                    // we create the parent for this element first. this is used as an container for all the components\r\n                    let elementParent = graph.insertVertex(parent, element.getAttribute(\"ID\"), element.getAttribute(\"Name\"), parsedPosition.x, parsedPosition.y, parsedPosition.width, parsedPosition.height, `parent;rotation=${this.getAttributeValue(element, \"Rotation\")}`);\r\n                    graph.insertVertex(parent, element.getAttribute(\"ID\"), element.getAttribute(\"Name\"), parsedPosition.x, parsedPosition.y, parsedPosition.width, parsedPosition.height, `element;shape=${this.shapeMap[this.getAttributeValue(element, \"eClassClassificationClass\")]};` +\r\n                        `rotation=${this.getAttributeValue(element, \"Rotation\")}`);\r\n                    this.handleInternalNozzles(element, graph, parent);\r\n                }\r\n            }\r\n        }\r\n        return graph;\r\n    }\r\n    /**\r\n     * Creates nozzles for the given element\r\n     */\r\n    handleInternalNozzles(element, graph, parent) {\r\n        for (let j = 0; j < element.childElementCount; j++) {\r\n            const subElement = element.children[j];\r\n            if (subElement.nodeName == \"InternalElement\") {\r\n                // find the x and y\r\n                let xPosition = this.getAttributeValue(subElement, \"X\");\r\n                let yPosition = this.getAttributeValue(subElement, \"Y\");\r\n                // add the nozzle to the graph\r\n                graph.insertVertex(parent, subElement.getAttribute(\"ID\"), undefined, xPosition - NOZZLE_WIDTH / 2, yPosition - NOZZLE_HEIGHT / 2, NOZZLE_WIDTH, NOZZLE_HEIGHT, \"nozzle\");\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Computes a list of points into a start, end and intermidiate points\r\n     */\r\n    parseEdgePath(edgePath) {\r\n        let tokens = edgePath.split(\";\");\r\n        return {\r\n            start: this.mxgraph.mxPoint.fromString(tokens[0]),\r\n            end: this.mxgraph.mxPoint.fromString(tokens[tokens.length - 1]),\r\n            waypoints: tokens.slice(1, -1).map((el) => { return this.mxgraph.mxPoint.fromString(el); })\r\n        };\r\n    }\r\n    /**\r\n     * XML parsing fucntion, helping getting the Value tag of a Attribute tag identified by the attrName\r\n     */\r\n    getAttributeValue(parent, attrName, asNumber = true) {\r\n        let value = parent.querySelector(`Attribute[Name=\"${attrName}\"] > Value`);\r\n        if (value) {\r\n            if (asNumber && value.textContent) {\r\n                return parseFloat(value.textContent);\r\n            }\r\n            else {\r\n                return value.textContent;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Creates a pipe with the given attributes\r\n     */\r\n    createPipe(id, value, style, sourcePoint, targetPoint, waypoints) {\r\n        let edge = new this.mxgraph.mxCell(value, new this.mxgraph.mxGeometry(), style);\r\n        edge.setId(id);\r\n        edge.setEdge(true);\r\n        edge.geometry.relative = true;\r\n        // set the starting and ending poitns\r\n        edge.geometry.sourcePoint = sourcePoint;\r\n        edge.geometry.targetPoint = targetPoint;\r\n        edge.geometry.points = waypoints;\r\n        return edge;\r\n    }\r\n    /**\r\n     * Creates the generic styles for elements\r\n     */\r\n    declareMxGraphStyles(graph) {\r\n        var style = graph.getStylesheet().getDefaultVertexStyle();\r\n        style[this.mxgraph.mxConstants.STYLE_ROUNDED] = false;\r\n        style[this.mxgraph.mxConstants.STYLE_FONTCOLOR] = '#1d1b1b';\r\n        style[this.mxgraph.mxConstants.STYLE_STROKECOLOR] = '#9673A6';\r\n        style[this.mxgraph.mxConstants.STYLE_FILLCOLOR] = '#f3f4f9';\r\n        style = this.mxgraph.mxUtils.clone(style);\r\n        style[this.mxgraph.mxConstants.STYLE_STROKECOLOR] = 'red';\r\n        style[this.mxgraph.mxConstants.STYLE_SHAPE] = \"ellipse\";\r\n        graph.getStylesheet().putCellStyle('nozzle', style);\r\n        style = this.mxgraph.mxUtils.clone(style);\r\n        style[this.mxgraph.mxConstants.STYLE_FILLCOLOR] = 'transparent';\r\n        style[this.mxgraph.mxConstants.STYLE_STROKECOLOR] = 'transparent';\r\n        style[this.mxgraph.mxConstants.STYLE_SHAPE] = this.mxgraph.mxConstants.SHAPE_RECTANGLE;\r\n        style[this.mxgraph.mxConstants.STYLE_PERIMETER] = this.mxgraph.mxConstants.PERIMETER_RECTANGLE;\r\n        graph.getStylesheet().putCellStyle('parent', style);\r\n        var style = graph.getStylesheet().getDefaultEdgeStyle();\r\n        style[this.mxgraph.mxConstants.STYLE_ENDARROW] = 'none';\r\n        style[this.mxgraph.mxConstants.STYLE_STROKEWIDTH] = 2;\r\n    }\r\n    /**\r\n     * Loads the stencil files for pid diagrams\r\n     */\r\n    loadStencilFiles(files) {\r\n        for (const filePath of files) {\r\n            var req = this.mxgraph.mxUtils.load(filePath);\r\n            var root = req.getDocumentElement();\r\n            var prefix = root.getAttribute(\"name\");\r\n            var shape = root.firstChild;\r\n            while (shape != null) {\r\n                if (shape.nodeType == this.mxgraph.mxConstants.NODETYPE_ELEMENT) {\r\n                    var name = prefix + '.' + shape.getAttribute('name').replace(/ /g, '_');\r\n                    this.mxgraph.mxStencilRegistry.addStencil(name.toLowerCase(), new this.mxgraph.mxStencil(shape));\r\n                }\r\n                shape = shape.nextSibling;\r\n            }\r\n        }\r\n    }\r\n}\r\nwindow[\"MptFileLoader\"] = MptFileLoader;\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIjYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU0sWUFBWSxHQUFHLENBQUMsQ0FBQztBQUN2QixNQUFNLGFBQWEsR0FBRyxDQUFDLENBQUM7QUFDeEIsTUFBTSxZQUFZLEdBQUcsZ0JBQWdCLENBQUE7QUFDckMsTUFBTSxZQUFZLEdBQUcsQ0FBQyxlQUFlLEVBQUUsd0JBQXdCLEVBQUUsZUFBZSxFQUFFLGlCQUFpQixFQUFFLGlCQUFpQjtJQUNsSCxxQkFBcUIsRUFBRSx1QkFBdUIsRUFBRSxZQUFZLEVBQUUsYUFBYSxFQUFFLGFBQWEsRUFBRSxhQUFhLEVBQUUsY0FBYztJQUN6SCxrQkFBa0IsRUFBRSxxQkFBcUIsRUFBRSxpQkFBaUIsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLFlBQVksRUFBRSxhQUFhLEVBQUUsYUFBYTtJQUNsSSxXQUFXLEVBQUUsZUFBZSxFQUFFLGVBQWUsRUFBRSxnQkFBZ0IsRUFBRSxzQkFBc0IsRUFBRSxZQUFZLEVBQUUsYUFBYSxDQUFDLENBQUM7QUFTMUg7OztHQUdHO0FBQ0g7SUFJSTs7T0FFRztJQUNILFlBQVksZ0JBQXFCLEVBQUUsU0FBc0IsRUFBRSxRQUFRO1FBQy9ELElBQUksQ0FBQyxPQUFPLEdBQUcsZ0JBQWdCLENBQUM7UUFDaEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsVUFBVSxHQUFHLENBQUMsS0FBYSxFQUFFLEVBQUU7WUFDaEQsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNoQyxJQUFJLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUNuQixNQUFNLHdDQUF3QyxDQUFBO2FBQ2pEO1lBQ0QsT0FBTyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsRixDQUFDLENBQUE7UUFDRCxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMzQix3QkFBd0I7UUFDeEIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxHQUFFLE9BQU8sWUFBWSxHQUFHLEVBQUUsQ0FBQSxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDNUUsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7SUFDN0IsQ0FBQztJQUVNLEtBQUssQ0FBQyxRQUFRLENBQUMsUUFBZ0I7UUFDbEMsSUFBSTtZQUNBLE1BQU0sUUFBUSxHQUFHLE1BQU0sS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3ZDLE1BQU0sWUFBWSxHQUFHLE1BQU0sUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO1lBQzNDLE1BQU0sT0FBTyxHQUFHLElBQUksU0FBUyxFQUFFLENBQUMsZUFBZSxDQUFDLFlBQVksRUFBRSxVQUFVLENBQUMsQ0FBQztZQUMxRSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDcEM7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNSLE9BQU8sQ0FBQyxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQTtZQUNuQyxNQUFNLENBQUMsQ0FBQztTQUNYO0lBQ0wsQ0FBQztJQUVPLFdBQVcsQ0FBQyxJQUFjO1FBQzlCLHFGQUFxRjtRQUNyRixNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLGlFQUFpRSxDQUFDLENBQUM7UUFFekcsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNiLE1BQU0sY0FBYyxDQUFDO1NBQ3hCO1FBRUQsNkJBQTZCO1FBQzdCLElBQUksS0FBSyxHQUFHLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3JELEtBQUssQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDO1FBQzdCLDhDQUE4QztRQUM5QyxLQUFLLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3ZCLGlDQUFpQztRQUNqQyxLQUFLLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3hCLDhFQUE4RTtRQUM5RSxLQUFLLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzVCLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMvQixLQUFLLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDL0IsS0FBSyxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM1QixLQUFLLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRTdCLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNqQyxJQUFJLE1BQU0sR0FBRyxLQUFLLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUN0Qyx3QkFBd0I7UUFDeEIsb0dBQW9HO1FBQ3BHLDhEQUE4RDtRQUc5RCxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsTUFBTSxHQUFHLGVBQWUsQ0FBQztRQUUxQyxtRkFBbUY7UUFDbkYsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFVBQVcsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNwRCxNQUFNLE9BQU8sR0FBRyxVQUFXLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBWSxDQUFDO1lBQ25ELElBQUksT0FBTyxDQUFDLFFBQVEsSUFBSSxpQkFBaUIsRUFBRTtnQkFDdkMsSUFBSSxJQUFJLENBQUMsaUJBQWlCLENBQUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxLQUFLLENBQUMsRUFBRTtvQkFDcEQsZ0VBQWdFO29CQUNoRSx3REFBd0Q7b0JBQ3hELElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO29CQUNuRCwyQkFBMkI7b0JBQzNCLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLEVBQUUsVUFBVSxFQUFFLEtBQUssQ0FBQyxDQUFDO29CQUNsRSxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQWtCLENBQUMsQ0FBQztvQkFDcEQsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBRSxFQUFFLE9BQU8sQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFFLEVBQUUsTUFBTSxFQUN6RixNQUFNLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO29CQUVoRCxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztpQkFDL0I7cUJBQU0sSUFBSSxJQUFJLENBQUMsaUJBQWlCLENBQUMsT0FBTyxFQUFFLDJCQUEyQixDQUFDLEVBQUU7b0JBQ3BFLGdGQUFnRjtvQkFDakYsSUFBSSxjQUFjLEdBQUc7d0JBQ2pCLENBQUMsRUFBRSxJQUFJLENBQUMsaUJBQWlCLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBVzt3QkFDakQsQ0FBQyxFQUFFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFXO3dCQUNqRCxLQUFLLEVBQUUsSUFBSSxDQUFDLGlCQUFpQixDQUFDLE9BQU8sRUFBRSxPQUFPLENBQVc7d0JBQ3pELE1BQU0sRUFBRSxJQUFJLENBQUMsaUJBQWlCLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBVztxQkFDOUQsQ0FBQztvQkFDRixtR0FBbUc7b0JBQ25HLElBQUksYUFBYSxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsRUFDbkcsY0FBYyxDQUFDLENBQUMsRUFBRSxjQUFjLENBQUMsQ0FBQyxFQUFFLGNBQWMsQ0FBQyxLQUFLLEVBQUUsY0FBYyxDQUFDLE1BQU0sRUFDL0UsbUJBQW1CLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLEVBQUUsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDO29CQUN0RSxLQUFLLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLEVBQy9FLGNBQWMsQ0FBQyxDQUFDLEVBQUUsY0FBYyxDQUFDLENBQUMsRUFBRSxjQUFjLENBQUMsS0FBSyxFQUFFLGNBQWMsQ0FBQyxNQUFNLEVBQy9FLGlCQUFpQixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLEVBQUUsMkJBQTJCLENBQVcsQ0FBQyxHQUFHO3dCQUN6RyxZQUFZLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLEVBQUUsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDO29CQUMvRCxJQUFJLENBQUMscUJBQXFCLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztpQkFDdEQ7YUFDSjtTQUVKO1FBRUQsT0FBTyxLQUFLLENBQUM7SUFDakIsQ0FBQztJQUVEOztPQUVHO0lBQ0sscUJBQXFCLENBQUMsT0FBZ0IsRUFBRSxLQUFVLEVBQUUsTUFBVztRQUNuRSxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLGlCQUFpQixFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ2hELE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFZLENBQUM7WUFDbEQsSUFBSSxVQUFVLENBQUMsUUFBUSxJQUFJLGlCQUFpQixFQUFFO2dCQUMxQyxtQkFBbUI7Z0JBQ25CLElBQUksU0FBUyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLEVBQUUsR0FBRyxDQUFXLENBQUM7Z0JBQ2xFLElBQUksU0FBUyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLEVBQUUsR0FBRyxDQUFXLENBQUM7Z0JBQ2xFLDhCQUE4QjtnQkFDOUIsS0FBSyxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsVUFBVSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBRSxTQUFTLEVBQy9ELFNBQVMsR0FBRyxZQUFZLEdBQUMsQ0FBQyxFQUFFLFNBQVMsR0FBRyxhQUFhLEdBQUMsQ0FBQyxFQUFFLFlBQVksRUFBRSxhQUFhLEVBQUUsUUFBUSxDQUFDLENBQUM7YUFDdkc7U0FDSjtJQUNMLENBQUM7SUFDRDs7T0FFRztJQUNLLGFBQWEsQ0FBQyxRQUFnQjtRQUNsQyxJQUFJLE1BQU0sR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2pDLE9BQU87WUFDSCxLQUFLLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNqRCxHQUFHLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQy9ELFNBQVMsRUFBRSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEdBQUcsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUM7U0FDN0YsQ0FBQTtJQUNMLENBQUM7SUFFRDs7T0FFRztJQUNLLGlCQUFpQixDQUFDLE1BQWUsRUFBRSxRQUFnQixFQUFFLFFBQVEsR0FBRyxJQUFJO1FBQ3hFLElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxhQUFhLENBQUMsbUJBQW1CLFFBQVEsWUFBWSxDQUFDLENBQUM7UUFDMUUsSUFBSSxLQUFLLEVBQUU7WUFDUCxJQUFJLFFBQVEsSUFBSSxLQUFLLENBQUMsV0FBVyxFQUFFO2dCQUMvQixPQUFPLFVBQVUsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7YUFDeEM7aUJBQU07Z0JBQ0gsT0FBTyxLQUFLLENBQUMsV0FBVyxDQUFDO2FBQzVCO1NBQ0o7SUFDTCxDQUFDO0lBRUQ7O09BRUc7SUFDSyxVQUFVLENBQUMsRUFBVSxFQUFFLEtBQWEsRUFBRSxLQUFhLEVBQUUsV0FBb0IsRUFBRSxXQUFvQixFQUFFLFNBQW9CO1FBQ3pILElBQUksSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNoRixJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2YsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNuQixJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7UUFDOUIscUNBQXFDO1FBQ3JDLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztRQUN4QyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7UUFDeEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDO1FBQ2pDLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFRDs7T0FFRztJQUNLLG9CQUFvQixDQUFDLEtBQVU7UUFDbkMsSUFBSSxLQUFLLEdBQUcsS0FBSyxDQUFDLGFBQWEsRUFBRSxDQUFDLHFCQUFxQixFQUFFLENBQUM7UUFDMUQsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxHQUFHLEtBQUssQ0FBQztRQUN0RCxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDLEdBQUcsU0FBUyxDQUFDO1FBQzVELEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLFNBQVMsQ0FBQztRQUM5RCxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDLEdBQUcsU0FBUyxDQUFDO1FBRTVELEtBQUssR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDMUMsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLGlCQUFpQixDQUFDLEdBQUcsS0FBSyxDQUFDO1FBQzFELEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsR0FBRyxTQUFTLENBQUM7UUFDeEQsS0FBSyxDQUFDLGFBQWEsRUFBRSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFcEQsS0FBSyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMxQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDLEdBQUcsYUFBYSxDQUFDO1FBQ2hFLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLGFBQWEsQ0FBQztRQUNsRSxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDO1FBQ3ZGLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxtQkFBbUIsQ0FBQztRQUMvRixLQUFLLENBQUMsYUFBYSxFQUFFLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUVwRCxJQUFJLEtBQUssR0FBRyxLQUFLLENBQUMsYUFBYSxFQUFFLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztRQUN4RCxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDLEdBQUcsTUFBTSxDQUFDO1FBQ3hELEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUMxRCxDQUFDO0lBQ0Q7O09BRUc7SUFDSyxnQkFBZ0IsQ0FBQyxLQUFlO1FBQ3BDLEtBQUssTUFBTSxRQUFRLElBQUksS0FBSyxFQUFFO1lBQzFCLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUM5QyxJQUFJLElBQUksR0FBRyxHQUFHLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztZQUNwQyxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3ZDLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7WUFFNUIsT0FBTyxLQUFLLElBQUksSUFBSSxFQUFFO2dCQUNsQixJQUFJLEtBQUssQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLEVBQUU7b0JBQzdELElBQUksSUFBSSxHQUFHLE1BQU0sR0FBRyxHQUFHLEdBQUcsS0FBSyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO29CQUN4RSxJQUFJLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEVBQUUsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO2lCQUNwRztnQkFDRCxLQUFLLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQzthQUM3QjtTQUNKO0lBQ0wsQ0FBQztDQUNKO0FBSUQsTUFBTSxDQUFDLGVBQWUsQ0FBQyxHQUFHLGFBQWEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IE5PWlpMRV9XSURUSCA9IDU7XG5jb25zdCBOT1paTEVfSEVJR0hUID0gNTtcbmNvbnN0IFNURU5DSUxfUEFUSCA9IFwiL210cC9zdGVuY2lscy9cIlxuY29uc3QgU1RFTkNJTF9MSVNUID0gWydhZ2l0YXRvcnMueG1sJywgJ2FwcGFyYXR1c19lbGVtZW50cy54bWwnLCAnYWdpdGF0b3JzLnhtbCcsICdjZW50cmlmdWdlcy54bWwnLCAnY29tcHJlc3NvcnMueG1sJyxcbiAgICAnY29tcHJlc3NvcnNfaXNvLnhtbCcsICdjcnVzaGVyc19ncmluZGluZy54bWwnLCAnZHJpZXJzLnhtbCcsICdlbmdpbmVzLnhtbCcsICdmZWVkZXJzLnhtbCcsICdmaWx0ZXJzLnhtbCcsICdmaXR0aW5ncy54bWwnLFxuICAgICdmbG93X3NlbnNvcnMueG1sJywgJ2hlYXRfZXhjaGFuZ2Vycy54bWwnLCAnaW5zdHJ1bWVudHMueG1sJywgJ21pc2MueG1sJywgJ21peGVycy54bWwnLCAncGlwaW5nLnhtbCcsICdmZWVkZXJzLnhtbCcsICdmZWVkZXJzLnhtbCcsXG4gICAgJ3B1bXBzLnhtbCcsICdwdW1wc19kaW4ueG1sJywgJ3B1bXBzX2lzby54bWwnLCAnc2VwYXJhdG9ycy54bWwnLCAnc2hhcGluZ19tYWNoaW5lcy54bWwnLCAndmFsdmVzLnhtbCcsICd2ZXNzZWxzLnhtbCddO1xuXG4vKipcbiAqIFV0aWxpdHkgY2xhc3MgZm9yIGVhc2llciB3b3JraW5nIHdpdGggcG9pbnRzXG4gKi9cbmludGVyZmFjZSBteFBvaW50IHtcbiAgICB4OiBudW1iZXI7XG4gICAgeTogbnVtYmVyO1xufVxuLyoqXG4gKiBBIE10cEZpbGVMb2FkZXIgaGFuZGxlcyBsb2FkaW5nIGEgbXRwIGZpbGUgZnJvbSB0aGUgZ2l2ZW4gbGluaywgXG4gKiBwYXJzaW5nIGl0IGludG8gYW4gbXhncmFwaCBncmFwaCBvYmplY3QgYW5kIHJldHJpbmcgaXQuXG4gKi9cbmNsYXNzIE1wdEZpbGVMb2FkZXIge1xuICAgIHByaXZhdGUgbXhncmFwaDogYW55O1xuICAgIHByaXZhdGUgY29udGFpbmVyOiBIVE1MRWxlbWVudDtcbiAgICBwcml2YXRlIHNoYXBlTWFwOiB7W2tleTogc3RyaW5nXTogc3RyaW5nfTtcbiAgICAvKipcbiAgICAgKiAgSW50aWFsaXplcyB0aGUgTXRwRmlsZUxvYWRlciB3aXRoIHRoZSBteGdyYXBoIG5hbWVzcGFjZVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG14R3JhcGhOYW1lc3BhY2U6IGFueSwgY29udGFpbmVyOiBIVE1MRWxlbWVudCwgc2hhcGVNYXApIHtcbiAgICAgICAgdGhpcy5teGdyYXBoID0gbXhHcmFwaE5hbWVzcGFjZTtcbiAgICAgICAgdGhpcy5teGdyYXBoLm14UG9pbnQuZnJvbVN0cmluZyA9ICh2YWx1ZTogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB0b2tlbnMgPSB2YWx1ZS5zcGxpdChcIixcIik7XG4gICAgICAgICAgICBpZiAodG9rZW5zLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBcIldlIG5lZWQgdHdvIHBvaW50cyB0byBjcmVhdGUgYSBteFBvaW50XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXcgdGhpcy5teGdyYXBoLm14UG9pbnQocGFyc2VGbG9hdCh0b2tlbnNbMF0pLCBwYXJzZUZsb2F0KHRva2Vuc1sxXSkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgICAgICAvLyBsb2FkIGFsbCB0aGUgc3RlbmNpbHNcbiAgICAgICAgdGhpcy5sb2FkU3RlbmNpbEZpbGVzKFNURU5DSUxfTElTVC5tYXAoKGVsKSA9PiB7cmV0dXJuIFNURU5DSUxfUEFUSCArIGVsfSkpO1xuICAgICAgICB0aGlzLnNoYXBlTWFwID0gc2hhcGVNYXA7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGxvYWRGaWxlKGZpbGVQYXRoOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChmaWxlUGF0aCk7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZVRleHQgPSBhd2FpdCByZXNwb25zZS50ZXh0KCk7XG4gICAgICAgICAgICBjb25zdCB4bWxEYXRhID0gbmV3IERPTVBhcnNlcigpLnBhcnNlRnJvbVN0cmluZyhyZXNwb25zZVRleHQsIFwidGV4dC94bWxcIik7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZU10cFhtbCh4bWxEYXRhKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkZhaWxlZCB0byBsb2FkIE1UUFwiKVxuICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgcGFyc2VNdHBYbWwoZmlsZTogRG9jdW1lbnQpOiBhbnkge1xuICAgICAgICAvLyB3ZSBuZWVkIHRvIGl0ZXJhdGUgdGhyb3VnaCB0aGUgZmlsZSBhbmQgZmluZCBhIEluc3RhbmNlSGllcmFyY2h5IHdpdGggdGhlIG5hbWUgSE1JXG4gICAgICAgIGNvbnN0IGhtaURpYWdyYW0gPSBmaWxlLnF1ZXJ5U2VsZWN0b3IoJ0luc3RhbmNlSGllcmFyY2h5W05hbWU9XCJITUlcIl0gSW50ZXJuYWxFbGVtZW50W05hbWU9XCJWaXN1X01haW5cIl0nKTtcblxuICAgICAgICBpZiAoIWhtaURpYWdyYW0pIHtcbiAgICAgICAgICAgIHRocm93IFwiTm8gSE1JIGZvdW5kXCI7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzdGFydCBjcmVhdGluZyB0aGUgZGlhZ3JhbVxuICAgICAgICBsZXQgZ3JhcGggPSBuZXcgdGhpcy5teGdyYXBoLm14R3JhcGgodGhpcy5jb250YWluZXIpO1xuICAgICAgICBncmFwaC5mb2xkaW5nRW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICAvLyBBbGxvdyBwYW5uaW5nIHVzaW5nIHRoZSByaWdodCBjbGljayBidXR0aW9uXG4gICAgICAgIGdyYXBoLnNldFBhbm5pbmcodHJ1ZSk7XG4gICAgICAgIC8vIGVuYWJsZSB0aGUgZGlzcGxheSBvZiB0b29sdGlwc1xuICAgICAgICBncmFwaC5zZXRUb29sdGlwcyh0cnVlKTtcbiAgICAgICAgLy8gZGlzYWJsZSBuZXcgY29ubmVjdGlvbnMgYW5kIGNsb25pbmcgY2VsbHMsIGFzIHdlbGwgYXMgZHJhZyBhbmQgZHJvcCBvdXRzaWRlXG4gICAgICAgIGdyYXBoLnNldENvbm5lY3RhYmxlKGZhbHNlKTtcbiAgICAgICAgZ3JhcGguc2V0Q2VsbHNDbG9uZWFibGUoZmFsc2UpO1xuICAgICAgICBncmFwaC5zZXRDZWxsc0RlbGV0YWJsZShmYWxzZSk7XG4gICAgICAgIGdyYXBoLnNldERyb3BFbmFibGVkKGZhbHNlKTtcbiAgICAgICAgZ3JhcGguc2V0U3BsaXRFbmFibGVkKGZhbHNlKTtcblxuICAgICAgICB0aGlzLmRlY2xhcmVNeEdyYXBoU3R5bGVzKGdyYXBoKTtcbiAgICAgICAgbGV0IHBhcmVudCA9IGdyYXBoLmdldERlZmF1bHRQYXJlbnQoKTtcbiAgICAgICAgLy8gYWRkIHRoZSB2aXN1YWxpemF0aW9uXG4gICAgICAgIC8vcGFyZW50ID0gZ3JhcGguaW5zZXJ0VmVydGV4KHBhcmVudCwgbnVsbCwgbnVsbCwgMCwgMCwgdGhpcy5nZXRBdHRyaWJ1dGVWYWx1ZShobWlEaWFncmFtLCBcIldpZHRoXCIpLFxuICAgICAgICAvLyAgICB0aGlzLmdldEF0dHJpYnV0ZVZhbHVlKGhtaURpYWdyYW0sIFwiSGVpZ2h0XCIpLCAncGFyZW50Jyk7XG5cblxuICAgICAgICBncmFwaC5nZXRNb2RlbCgpLnByZWZpeCA9IFwiYXV0b0dlbmVyYXRlZFwiO1xuXG4gICAgICAgIC8vIGl0ZXJhdGUgdGhyb3VnaCB0aGUgaW50ZXJuYWwgZWxlbWVudHMgb2YgdGhlIGRpYWdyYW0gYW5kIGFkZCB0aGVtIHRvIHRoZSBkaWFncmFtXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaG1pRGlhZ3JhbSEuY2hpbGRFbGVtZW50Q291bnQ7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IGhtaURpYWdyYW0hLmNoaWxkcmVuW2ldIGFzIEVsZW1lbnQ7XG4gICAgICAgICAgICBpZiAoZWxlbWVudC5ub2RlTmFtZSA9PSBcIkludGVybmFsRWxlbWVudFwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZ2V0QXR0cmlidXRlVmFsdWUoZWxlbWVudCwgXCJFZGdlcGF0aFwiLCBmYWxzZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlcmUgaXMgYSBhdHRyaWJ1dGUgd2l0aCBhbiBlZGdlIHBhdGgsIGFzc3VtZSBpdCdzIGEgbGluZVxuICAgICAgICAgICAgICAgICAgICAvLyBmaXJzdCBmaW5kIHRoZSBpbnRlcm5hbCBlbGVtZW50cywgbW9zdCBsaWtlbHkgTm96emxlc1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZUludGVybmFsTm96emxlcyhlbGVtZW50LCBncmFwaCwgcGFyZW50KTtcbiAgICAgICAgICAgICAgICAgICAgLy8gbm93IGFkZCB0aGUgcGlwZSBlbGVtZW50XG4gICAgICAgICAgICAgICAgICAgIGxldCBlZGdlUGF0aCA9IHRoaXMuZ2V0QXR0cmlidXRlVmFsdWUoZWxlbWVudCwgXCJFZGdlcGF0aFwiLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBwb2ludHMgPSB0aGlzLnBhcnNlRWRnZVBhdGgoZWRnZVBhdGggYXMgc3RyaW5nKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGVkZ2UgPSB0aGlzLmNyZWF0ZVBpcGUoZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJJRFwiKSEsIGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiTmFtZVwiKSEsIFwicGlwZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzLnN0YXJ0LCBwb2ludHMuZW5kLCBwb2ludHMud2F5cG9pbnRzKTtcblxuICAgICAgICAgICAgICAgICAgICBncmFwaC5hZGRFZGdlKGVkZ2UsIHBhcmVudCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmdldEF0dHJpYnV0ZVZhbHVlKGVsZW1lbnQsIFwiZUNsYXNzQ2xhc3NpZmljYXRpb25DbGFzc1wiKSkge1xuICAgICAgICAgICAgICAgICAgICAgLy8gd2UgaGF2ZSBhIGVDbGFzc0NsYXNzaWZpY2F0aW9uQ2xhc3MsIHNvIHRoaXMgaXMgbW9zdCBsaWtlbHkgYSBkaWFncmFtIGVsZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgbGV0IHBhcnNlZFBvc2l0aW9uID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgeDogdGhpcy5nZXRBdHRyaWJ1dGVWYWx1ZShlbGVtZW50LCBcIlhcIikgYXMgbnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgeTogdGhpcy5nZXRBdHRyaWJ1dGVWYWx1ZShlbGVtZW50LCBcIllcIikgYXMgbnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHRoaXMuZ2V0QXR0cmlidXRlVmFsdWUoZWxlbWVudCwgXCJXaWR0aFwiKSBhcyBudW1iZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IHRoaXMuZ2V0QXR0cmlidXRlVmFsdWUoZWxlbWVudCwgXCJIZWlnaHRcIikgYXMgbnVtYmVyXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIC8vIHdlIGNyZWF0ZSB0aGUgcGFyZW50IGZvciB0aGlzIGVsZW1lbnQgZmlyc3QuIHRoaXMgaXMgdXNlZCBhcyBhbiBjb250YWluZXIgZm9yIGFsbCB0aGUgY29tcG9uZW50c1xuICAgICAgICAgICAgICAgICAgICBsZXQgZWxlbWVudFBhcmVudCA9IGdyYXBoLmluc2VydFZlcnRleChwYXJlbnQsIGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiSURcIiksIGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiTmFtZVwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlZFBvc2l0aW9uLngsIHBhcnNlZFBvc2l0aW9uLnksIHBhcnNlZFBvc2l0aW9uLndpZHRoLCBwYXJzZWRQb3NpdGlvbi5oZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgICAgICBgcGFyZW50O3JvdGF0aW9uPSR7dGhpcy5nZXRBdHRyaWJ1dGVWYWx1ZShlbGVtZW50LCBcIlJvdGF0aW9uXCIpfWApO1xuICAgICAgICAgICAgICAgICAgICBncmFwaC5pbnNlcnRWZXJ0ZXgocGFyZW50LCBlbGVtZW50LmdldEF0dHJpYnV0ZShcIklEXCIpLCBlbGVtZW50LmdldEF0dHJpYnV0ZShcIk5hbWVcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJzZWRQb3NpdGlvbi54LCBwYXJzZWRQb3NpdGlvbi55LCBwYXJzZWRQb3NpdGlvbi53aWR0aCwgcGFyc2VkUG9zaXRpb24uaGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgICAgYGVsZW1lbnQ7c2hhcGU9JHt0aGlzLnNoYXBlTWFwW3RoaXMuZ2V0QXR0cmlidXRlVmFsdWUoZWxlbWVudCwgXCJlQ2xhc3NDbGFzc2lmaWNhdGlvbkNsYXNzXCIpIGFzIHN0cmluZ119O2ArXG4gICAgICAgICAgICAgICAgICAgICAgICBgcm90YXRpb249JHt0aGlzLmdldEF0dHJpYnV0ZVZhbHVlKGVsZW1lbnQsIFwiUm90YXRpb25cIil9YCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlSW50ZXJuYWxOb3p6bGVzKGVsZW1lbnQsIGdyYXBoLCBwYXJlbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGdyYXBoO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgbm96emxlcyBmb3IgdGhlIGdpdmVuIGVsZW1lbnRcbiAgICAgKi9cbiAgICBwcml2YXRlIGhhbmRsZUludGVybmFsTm96emxlcyhlbGVtZW50OiBFbGVtZW50LCBncmFwaDogYW55LCBwYXJlbnQ6IGFueSkge1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGVsZW1lbnQuY2hpbGRFbGVtZW50Q291bnQ7IGorKykge1xuICAgICAgICAgICAgY29uc3Qgc3ViRWxlbWVudCA9IGVsZW1lbnQuY2hpbGRyZW5bal0gYXMgRWxlbWVudDtcbiAgICAgICAgICAgIGlmIChzdWJFbGVtZW50Lm5vZGVOYW1lID09IFwiSW50ZXJuYWxFbGVtZW50XCIpIHtcbiAgICAgICAgICAgICAgICAvLyBmaW5kIHRoZSB4IGFuZCB5XG4gICAgICAgICAgICAgICAgbGV0IHhQb3NpdGlvbiA9IHRoaXMuZ2V0QXR0cmlidXRlVmFsdWUoc3ViRWxlbWVudCwgXCJYXCIpIGFzIG51bWJlcjtcbiAgICAgICAgICAgICAgICBsZXQgeVBvc2l0aW9uID0gdGhpcy5nZXRBdHRyaWJ1dGVWYWx1ZShzdWJFbGVtZW50LCBcIllcIikgYXMgbnVtYmVyO1xuICAgICAgICAgICAgICAgIC8vIGFkZCB0aGUgbm96emxlIHRvIHRoZSBncmFwaFxuICAgICAgICAgICAgICAgIGdyYXBoLmluc2VydFZlcnRleChwYXJlbnQsIHN1YkVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiSURcIiksIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgeFBvc2l0aW9uIC0gTk9aWkxFX1dJRFRILzIsIHlQb3NpdGlvbiAtIE5PWlpMRV9IRUlHSFQvMiwgTk9aWkxFX1dJRFRILCBOT1paTEVfSEVJR0hULCBcIm5venpsZVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyBhIGxpc3Qgb2YgcG9pbnRzIGludG8gYSBzdGFydCwgZW5kIGFuZCBpbnRlcm1pZGlhdGUgcG9pbnRzXG4gICAgICovXG4gICAgcHJpdmF0ZSBwYXJzZUVkZ2VQYXRoKGVkZ2VQYXRoOiBzdHJpbmcpOiB7IHN0YXJ0OiBteFBvaW50LCBlbmQ6IG14UG9pbnQsIHdheXBvaW50czogbXhQb2ludFtdIH0ge1xuICAgICAgICBsZXQgdG9rZW5zID0gZWRnZVBhdGguc3BsaXQoXCI7XCIpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc3RhcnQ6IHRoaXMubXhncmFwaC5teFBvaW50LmZyb21TdHJpbmcodG9rZW5zWzBdKSxcbiAgICAgICAgICAgIGVuZDogdGhpcy5teGdyYXBoLm14UG9pbnQuZnJvbVN0cmluZyh0b2tlbnNbdG9rZW5zLmxlbmd0aCAtIDFdKSxcbiAgICAgICAgICAgIHdheXBvaW50czogdG9rZW5zLnNsaWNlKDEsIC0xKS5tYXAoKGVsKSA9PiB7IHJldHVybiB0aGlzLm14Z3JhcGgubXhQb2ludC5mcm9tU3RyaW5nKGVsKSB9KVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogWE1MIHBhcnNpbmcgZnVjbnRpb24sIGhlbHBpbmcgZ2V0dGluZyB0aGUgVmFsdWUgdGFnIG9mIGEgQXR0cmlidXRlIHRhZyBpZGVudGlmaWVkIGJ5IHRoZSBhdHRyTmFtZVxuICAgICAqL1xuICAgIHByaXZhdGUgZ2V0QXR0cmlidXRlVmFsdWUocGFyZW50OiBFbGVtZW50LCBhdHRyTmFtZTogc3RyaW5nLCBhc051bWJlciA9IHRydWUpIHtcbiAgICAgICAgbGV0IHZhbHVlID0gcGFyZW50LnF1ZXJ5U2VsZWN0b3IoYEF0dHJpYnV0ZVtOYW1lPVwiJHthdHRyTmFtZX1cIl0gPiBWYWx1ZWApO1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChhc051bWJlciAmJiB2YWx1ZS50ZXh0Q29udGVudCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUZsb2F0KHZhbHVlLnRleHRDb250ZW50KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnRleHRDb250ZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHBpcGUgd2l0aCB0aGUgZ2l2ZW4gYXR0cmlidXRlc1xuICAgICAqL1xuICAgIHByaXZhdGUgY3JlYXRlUGlwZShpZDogc3RyaW5nLCB2YWx1ZTogc3RyaW5nLCBzdHlsZTogc3RyaW5nLCBzb3VyY2VQb2ludDogbXhQb2ludCwgdGFyZ2V0UG9pbnQ6IG14UG9pbnQsIHdheXBvaW50czogbXhQb2ludFtdKSB7XG4gICAgICAgIGxldCBlZGdlID0gbmV3IHRoaXMubXhncmFwaC5teENlbGwodmFsdWUsIG5ldyB0aGlzLm14Z3JhcGgubXhHZW9tZXRyeSgpLCBzdHlsZSk7XG4gICAgICAgIGVkZ2Uuc2V0SWQoaWQpO1xuICAgICAgICBlZGdlLnNldEVkZ2UodHJ1ZSk7XG4gICAgICAgIGVkZ2UuZ2VvbWV0cnkucmVsYXRpdmUgPSB0cnVlO1xuICAgICAgICAvLyBzZXQgdGhlIHN0YXJ0aW5nIGFuZCBlbmRpbmcgcG9pdG5zXG4gICAgICAgIGVkZ2UuZ2VvbWV0cnkuc291cmNlUG9pbnQgPSBzb3VyY2VQb2ludDtcbiAgICAgICAgZWRnZS5nZW9tZXRyeS50YXJnZXRQb2ludCA9IHRhcmdldFBvaW50O1xuICAgICAgICBlZGdlLmdlb21ldHJ5LnBvaW50cyA9IHdheXBvaW50cztcbiAgICAgICAgcmV0dXJuIGVkZ2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyB0aGUgZ2VuZXJpYyBzdHlsZXMgZm9yIGVsZW1lbnRzXG4gICAgICovXG4gICAgcHJpdmF0ZSBkZWNsYXJlTXhHcmFwaFN0eWxlcyhncmFwaDogYW55KSB7XG4gICAgICAgIHZhciBzdHlsZSA9IGdyYXBoLmdldFN0eWxlc2hlZXQoKS5nZXREZWZhdWx0VmVydGV4U3R5bGUoKTtcbiAgICAgICAgc3R5bGVbdGhpcy5teGdyYXBoLm14Q29uc3RhbnRzLlNUWUxFX1JPVU5ERURdID0gZmFsc2U7XG4gICAgICAgIHN0eWxlW3RoaXMubXhncmFwaC5teENvbnN0YW50cy5TVFlMRV9GT05UQ09MT1JdID0gJyMxZDFiMWInO1xuICAgICAgICBzdHlsZVt0aGlzLm14Z3JhcGgubXhDb25zdGFudHMuU1RZTEVfU1RST0tFQ09MT1JdID0gJyM5NjczQTYnO1xuICAgICAgICBzdHlsZVt0aGlzLm14Z3JhcGgubXhDb25zdGFudHMuU1RZTEVfRklMTENPTE9SXSA9ICcjZjNmNGY5JztcblxuICAgICAgICBzdHlsZSA9IHRoaXMubXhncmFwaC5teFV0aWxzLmNsb25lKHN0eWxlKTtcbiAgICAgICAgc3R5bGVbdGhpcy5teGdyYXBoLm14Q29uc3RhbnRzLlNUWUxFX1NUUk9LRUNPTE9SXSA9ICdyZWQnO1xuICAgICAgICBzdHlsZVt0aGlzLm14Z3JhcGgubXhDb25zdGFudHMuU1RZTEVfU0hBUEVdID0gXCJlbGxpcHNlXCI7XG4gICAgICAgIGdyYXBoLmdldFN0eWxlc2hlZXQoKS5wdXRDZWxsU3R5bGUoJ25venpsZScsIHN0eWxlKTtcblxuICAgICAgICBzdHlsZSA9IHRoaXMubXhncmFwaC5teFV0aWxzLmNsb25lKHN0eWxlKTtcbiAgICAgICAgc3R5bGVbdGhpcy5teGdyYXBoLm14Q29uc3RhbnRzLlNUWUxFX0ZJTExDT0xPUl0gPSAndHJhbnNwYXJlbnQnO1xuICAgICAgICBzdHlsZVt0aGlzLm14Z3JhcGgubXhDb25zdGFudHMuU1RZTEVfU1RST0tFQ09MT1JdID0gJ3RyYW5zcGFyZW50JztcbiAgICAgICAgc3R5bGVbdGhpcy5teGdyYXBoLm14Q29uc3RhbnRzLlNUWUxFX1NIQVBFXSA9IHRoaXMubXhncmFwaC5teENvbnN0YW50cy5TSEFQRV9SRUNUQU5HTEU7XG4gICAgICAgIHN0eWxlW3RoaXMubXhncmFwaC5teENvbnN0YW50cy5TVFlMRV9QRVJJTUVURVJdID0gdGhpcy5teGdyYXBoLm14Q29uc3RhbnRzLlBFUklNRVRFUl9SRUNUQU5HTEU7XG4gICAgICAgIGdyYXBoLmdldFN0eWxlc2hlZXQoKS5wdXRDZWxsU3R5bGUoJ3BhcmVudCcsIHN0eWxlKTtcblxuICAgICAgICB2YXIgc3R5bGUgPSBncmFwaC5nZXRTdHlsZXNoZWV0KCkuZ2V0RGVmYXVsdEVkZ2VTdHlsZSgpO1xuICAgICAgICBzdHlsZVt0aGlzLm14Z3JhcGgubXhDb25zdGFudHMuU1RZTEVfRU5EQVJST1ddID0gJ25vbmUnO1xuICAgICAgICBzdHlsZVt0aGlzLm14Z3JhcGgubXhDb25zdGFudHMuU1RZTEVfU1RST0tFV0lEVEhdID0gMjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTG9hZHMgdGhlIHN0ZW5jaWwgZmlsZXMgZm9yIHBpZCBkaWFncmFtc1xuICAgICAqL1xuICAgIHByaXZhdGUgbG9hZFN0ZW5jaWxGaWxlcyhmaWxlczogc3RyaW5nW10pIHtcbiAgICAgICAgZm9yIChjb25zdCBmaWxlUGF0aCBvZiBmaWxlcykge1xuICAgICAgICAgICAgdmFyIHJlcSA9IHRoaXMubXhncmFwaC5teFV0aWxzLmxvYWQoZmlsZVBhdGgpO1xuICAgICAgICAgICAgdmFyIHJvb3QgPSByZXEuZ2V0RG9jdW1lbnRFbGVtZW50KCk7XG4gICAgICAgICAgICB2YXIgcHJlZml4ID0gcm9vdC5nZXRBdHRyaWJ1dGUoXCJuYW1lXCIpO1xuICAgICAgICAgICAgdmFyIHNoYXBlID0gcm9vdC5maXJzdENoaWxkO1xuXG4gICAgICAgICAgICB3aGlsZSAoc2hhcGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmIChzaGFwZS5ub2RlVHlwZSA9PSB0aGlzLm14Z3JhcGgubXhDb25zdGFudHMuTk9ERVRZUEVfRUxFTUVOVCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbmFtZSA9IHByZWZpeCArICcuJyArIHNoYXBlLmdldEF0dHJpYnV0ZSgnbmFtZScpLnJlcGxhY2UoLyAvZywgJ18nKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5teGdyYXBoLm14U3RlbmNpbFJlZ2lzdHJ5LmFkZFN0ZW5jaWwobmFtZS50b0xvd2VyQ2FzZSgpLCBuZXcgdGhpcy5teGdyYXBoLm14U3RlbmNpbChzaGFwZSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzaGFwZSA9IHNoYXBlLm5leHRTaWJsaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuaW50ZXJmYWNlIFdpbmRvdyB7XG4gICAgTXB0RmlsZUxvYWRlcjogdHlwZW9mIE1wdEZpbGVMb2FkZXJcbn1cbndpbmRvd1tcIk1wdEZpbGVMb2FkZXJcIl0gPSBNcHRGaWxlTG9hZGVyOyJdfQ==", "Type" : "BMTypescriptHost", "Visible" : true, "Width" : 154, "Z-index" : 10, "__TypeDisplayName" : "TypeScript Object" }, "Widgets" : [ ] }, { "Properties" : { "Area" : "UI", "CursorPosition" : 0, "DefaultTextboxFocusStyle" : "DefaultFocusStyle", "DisplayName" : "textbox-9", "Height" : 24, "Id" : "textbox-9", "InnerShadow" : true, "Label" : "", "LabelAlignment" : "left", "Left" : 475, "MaskInputCharacters" : false, "PlaceholderText" : "", "ReadOnly" : false, "ResponsiveLayout" : false, "ShowDataLoading" : true, "Style" : "DefaultTextBoxStyle", "TabSequence" : 0, "Text" : "/mtp/Manifest.am", "TextAlign" : "left", "TextboxLabelStyle" : "DefaultWidgetLabelStyle", "ToolTipField" : "", "ToolTipStyle" : "DefaultTooltipStyle", "Top" : 10, "Type" : "textbox", "Visible" : true, "Width" : 200, "Z-index" : 10, "__TypeDisplayName" : "TextBox", "__supportsLabel" : true, "__supportsTooltip" : true }, "Widgets" : [ ] }, { "Properties" : { "Area" : "UI", "Code" : "\n\n/**\n * $Id: mxPidValves.js,v 1.5 2013/10/22 12:55:55 mate Exp $\n * Copyright (c) 2006-2013, JGraph Ltd\n */\nself.execute = function () {\n    //**********************************************************************************************************************************************************\n    //Valve\n    //**********************************************************************************************************************************************************\n    /**\n     * Extends mxShape.\n     */\n    function mxShapePidValve(bounds, fill, stroke, strokewidth) {\n        mxShape.call(this);\n        this.bounds = bounds;\n        this.fill = fill;\n        this.stroke = stroke;\n        this.strokewidth = (strokewidth != null) ? strokewidth : 1;\n    };\n\n    /**\n     * Extends mxShape.\n     */\n    mxUtils.extend(mxShapePidValve, mxShape);\n\n    mxShapePidValve.prototype.cst = {\n        SHAPE_VALVE: 'mxgraph.pid2valves.valve',\n        //states\n        DEFAULT_STATE: 'defState',\n        CLOSED: 'closed',\n        OPEN: 'open',\n        //actuators\n        ACTUATOR: 'actuator',\n        MANUAL: 'man',\n        DIAPHRAGM: 'diaph',\n        BALANCED_DIAPHRAGM: 'balDiaph',\n        MOTOR: 'motor',\n        NONE: 'none',\n        SPRING: 'spring',\n        PILOT: 'pilot',\n        POWERED: 'powered',\n        SOLENOID: 'solenoid',\n        SOLENOID_MANUAL_RESET: 'solenoidManRes',\n        SINGLE_ACTING: 'singActing',\n        DOUBLE_ACTING: 'dblActing',\n        PILOT_CYLINDER: 'pilotCyl',\n        DIGITAL: 'digital',\n        WEIGHT: 'weight',\n        KEY: 'key',\n        ELECTRO_HYDRAULIC: 'elHyd',\n        //types\n        VALVE_TYPE: 'valveType',\n        BUTTERFLY: 'butterfly',\n        CHECK: 'check',\n        GATE: 'gate',\n        GLOBE: 'globe',\n        NEEDLE: 'needle',\n        PLUG: 'plug',\n        SELF_DRAINING: 'selfDrain',\n        ANGLE: 'angle',\n        ANGLE_GLOBE: 'angleGlobe',\n        THREE_WAY: 'threeWay',\n        ANGLE_BLOWDOWN: 'angBlow',\n        BALL: 'ball'\n    };\n\n    /**\n     * Function: paintVertexShape\n     * \n     * Paints the vertex shape.\n     */\n    mxShapePidValve.prototype.paintVertexShape = function (c, x, y, w, h) {\n        var valveType = mxUtils.getValue(this.style, mxShapePidValve.prototype.cst.VALVE_TYPE, 'gate');\n        var actuator = mxUtils.getValue(this.style, mxShapePidValve.prototype.cst.ACTUATOR, mxShapePidValve.prototype.cst.NONE);\n        var actH = 0;\n\n        if (actuator !== 'none') {\n            if (this.isAngleVariant(valveType)) {\n                actH = h * 0.3333;\n            }\n            else {\n                actH = h * 0.4;\n            }\n        }\n\n        c.translate(x, y);\n        c.setLineJoin('round');\n\n        this.background(c, x, y, w, h, valveType, actuator, actH);\n        c.setShadow(false);\n        this.foreground(c, x, y, w, h, valveType, actuator, actH);\n    };\n\n    mxShapePidValve.prototype.background = function (c, x, y, w, h, valveType, actuator, actH) {\n        //draw the actuator\n        if (actuator !== mxShapePidValve.prototype.cst.NONE) {\n            if (this.isAngleVariant(valveType)) {\n                this.drawActuatorBg(c, x, y, w, h / 1.2, actuator, actH);\n            }\n            else {\n                this.drawActuatorBg(c, x, y, w, h, actuator, actH);\n            }\n        }\n\n        //draw the valve body\n        if (this.isGateVariant(valveType)) {\n            this.drawGateVariantBg(c, 0, 0, w, h, valveType, actuator, actH);\n        }\n        else if (this.isAngleVariant(valveType)) {\n            this.drawAngleVariantBg(c, 0, 0, w, h, valveType, actuator, actH);\n        }\n        else if (valveType === mxShapePidValve.prototype.cst.BUTTERFLY) {\n            this.drawButterflyValve(c, 0, 0, w, h, actuator, actH);\n        }\n        else if (valveType === mxShapePidValve.prototype.cst.CHECK) {\n            this.drawCheckValve(c, 0, 0, w, h, actuator, actH);\n        }\n    };\n\n    mxShapePidValve.prototype.foreground = function (c, x, y, w, h, valveType, actuator, actH) {\n        var valveType = mxUtils.getValue(this.style, mxShapePidValve.prototype.cst.VALVE_TYPE, 'gate');\n\n        //draw the actuator\n        if (actuator !== mxShapePidValve.prototype.cst.NONE) {\n            if (this.isAngleVariant(valveType)) {\n                this.drawActuatorFg(c, x, y, w, h / 1.2, actuator, actH);\n            }\n            else {\n                this.drawActuatorFg(c, x, y, w, h, actuator, actH);\n            }\n        }\n\n        if (this.isGateVariant(valveType)) {\n            this.drawGateVariantFg(c, 0, 0, w, h, valveType, actuator, actH);\n        }\n        if (this.isAngleVariant(valveType)) {\n            this.drawAngleVariantFg(c, 0, 0, w, h, valveType, actuator, actH);\n        }\n    };\n\n    mxShapePidValve.prototype.drawActuatorBg = function (c, x, y, w, h, actuator) {\n        if (this.isSquareVariant(actuator)) {\n            c.translate(w * 0.325, 0);\n            this.drawSquareAct(c, w * 0.35, h * 0.7, actuator);\n            c.translate(- w * 0.325, 0);\n        }\n        else if (actuator === mxShapePidValve.prototype.cst.MANUAL) {\n            c.translate(w * 0.25, h * 0.15);\n            this.drawManAct(c, w * 0.5, h * 0.55);\n            c.translate(- w * 0.25, - h * 0.15);\n        }\n        else if (actuator === mxShapePidValve.prototype.cst.DIAPHRAGM) {\n            c.translate(w * 0.25, h * 0.1);\n            this.drawDiaphAct(c, w * 0.5, h * 0.6);\n            c.translate(- w * 0.25, - h * 0.1);\n        }\n        else if (actuator === mxShapePidValve.prototype.cst.BALANCED_DIAPHRAGM) {\n            c.translate(w * 0.25, h * 0.1);\n            this.drawBalDiaphActBg(c, w * 0.5, h * 0.6);\n            c.translate(- w * 0.25, - h * 0.1);\n        }\n        else if (actuator === mxShapePidValve.prototype.cst.MOTOR || actuator === mxShapePidValve.prototype.cst.ELECTRO_HYDRAULIC) {\n            c.translate(w * 0.325, 0);\n            this.drawCircleAct(c, w * 0.35, h * 0.7, actuator);\n            c.translate(- w * 0.325, 0);\n        }\n        else if (actuator === mxShapePidValve.prototype.cst.SPRING) {\n            c.translate(w * 0.36, 0);\n            this.drawSpringAct(c, w * 0.28, h * 0.7);\n            c.translate(- w * 0.36, 0);\n        }\n        else if (actuator === mxShapePidValve.prototype.cst.SOLENOID_MANUAL_RESET) {\n            c.translate(w * 0.325, 0);\n            this.drawSolenoidManResetAct(c, w * 0.575, h * 0.7);\n            c.translate(- w * 0.325, 0);\n        }\n        else if (actuator === mxShapePidValve.prototype.cst.SINGLE_ACTING) {\n            c.translate(w * 0.35, 0);\n            this.drawSingActingActBg(c, w * 0.65, h * 0.7);\n            c.translate(- w * 0.35, 0);\n        }\n        else if (actuator === mxShapePidValve.prototype.cst.DOUBLE_ACTING) {\n            c.translate(w * 0.35, 0);\n            this.drawDblActingActBg(c, w * 0.65, h * 0.7);\n            c.translate(- w * 0.35, 0);\n        }\n        else if (actuator === mxShapePidValve.prototype.cst.PILOT_CYLINDER) {\n            c.translate(w * 0.35, 0);\n            this.drawPilotCylinderActBg(c, w * 0.65, h * 0.7);\n            c.translate(- w * 0.35, 0);\n        }\n        else if (actuator === mxShapePidValve.prototype.cst.ANGLE_BLOWDOWN) {\n            c.translate(w * 0.5, h * 0.2);\n            this.drawAngleBlowdownAct(c, w * 0.4, h * 0.5);\n            c.translate(- w * 0.5, - h * 0.2);\n        }\n    };\n\n    mxShapePidValve.prototype.drawActuatorFg = function (c, x, y, w, h, actuator) {\n        if (actuator === mxShapePidValve.prototype.cst.BALANCED_DIAPHRAGM) {\n            c.translate(w * 0.25, h * 0.1);\n            this.drawBalDiaphActFg(c, w * 0.5, h * 0.6);\n            c.translate(- w * 0.25, - h * 0.1);\n        }\n        else if (actuator === mxShapePidValve.prototype.cst.SINGLE_ACTING ||\n            actuator === mxShapePidValve.prototype.cst.DOUBLE_ACTING ||\n            actuator === mxShapePidValve.prototype.cst.PILOT_CYLINDER) {\n            c.translate(w * 0.35, 0);\n            this.drawActingActFg(c, w * 0.65, h * 0.7);\n            c.translate(- w * 0.35, 0);\n        }\n    };\n\n    mxShapePidValve.prototype.drawManAct = function (c, w, h) {\n        c.begin();\n        c.moveTo(0, 0);\n        c.lineTo(w, 0);\n        c.moveTo(w * 0.5, 0);\n        c.lineTo(w * 0.5, h);\n        c.stroke();\n    };\n\n    mxShapePidValve.prototype.drawDiaphAct = function (c, w, h) {\n        c.begin();\n        c.moveTo(w * 0.5, h * 0.2);\n        c.lineTo(w * 0.5, h);\n        c.stroke();\n\n        c.begin();\n        c.moveTo(0, h * 0.2);\n        c.arcTo(w * 0.6, h * 0.4, 0, 0, 1, w, h * 0.2);\n        c.close();\n        c.fillAndStroke();\n    };\n\n    mxShapePidValve.prototype.drawBalDiaphActBg = function (c, w, h) {\n        c.ellipse(0, 0, w, h * 0.3);\n        c.fillAndStroke();\n\n        c.begin();\n        c.moveTo(w * 0.5, h * 0.3);\n        c.lineTo(w * 0.5, h);\n        c.stroke();\n    };\n\n    mxShapePidValve.prototype.drawBalDiaphActFg = function (c, w, h) {\n        c.begin();\n        c.moveTo(0, h * 0.15);\n        c.lineTo(w, h * 0.15);\n        c.stroke();\n    };\n\n    mxShapePidValve.prototype.drawCircleAct = function (c, w, h, actuator) {\n        c.ellipse(0, 0, w, h * 0.5);\n        c.fillAndStroke();\n\n        c.begin();\n        c.moveTo(w * 0.5, h * 0.5);\n        c.lineTo(w * 0.5, h);\n        c.stroke();\n\n        var m = '';\n\n        if (actuator === mxShapePidValve.prototype.cst.MOTOR) {\n            m = 'M';\n        }\n        else if (actuator === mxShapePidValve.prototype.cst.ELECTRO_HYDRAULIC) {\n            m = 'E/H';\n        }\n\n        c.setFontStyle(1);\n        c.setFontFamily('Helvetica');\n        c.setFontSize(Math.min(w, h) * 0.4);\n        c.text(w * 0.5, h * 0.25, 0, 0, m, mxConstants.ALIGN_CENTER, mxConstants.ALIGN_MIDDLE, 0, null, 0, 0, 0);\n    };\n\n    mxShapePidValve.prototype.drawSpringAct = function (c, w, h) {\n        c.begin();\n        c.moveTo(w * 0.5, 0);\n        c.lineTo(w * 0.5, h);\n        c.moveTo(w * 0.32, h * 0.16);\n        c.lineTo(w * 0.68, h * 0.08);\n        c.moveTo(w * 0.21, h * 0.32);\n        c.lineTo(w * 0.79, h * 0.20);\n        c.moveTo(w * 0.1, h * 0.52);\n        c.lineTo(w * 0.9, h * 0.36);\n        c.moveTo(0, h * 0.72);\n        c.lineTo(w, h * 0.5);\n        c.stroke();\n    };\n\n    mxShapePidValve.prototype.drawSolenoidManResetAct = function (c, w, h) {\n        c.rect(0, 0, w * 0.61, h * 0.46);\n        c.fillAndStroke();\n\n        c.begin();\n        c.moveTo(w * 0.56, h * 0.6);\n        c.lineTo(w * 0.78, h * 0.5);\n        c.lineTo(w, h * 0.6);\n        c.lineTo(w * 0.78, h * 0.7);\n        c.close();\n        c.fillAndStroke();\n\n        c.begin();\n        c.moveTo(w * 0.305, h * 0.46);\n        c.lineTo(w * 0.305, h);\n        c.moveTo(w * 0.305, h * 0.6);\n        c.lineTo(w * 0.56, h * 0.6);\n        c.stroke();\n\n        c.setFontStyle(1);\n        c.setFontFamily('Helvetica');\n        c.setFontSize(Math.min(w, h) * 0.4);\n        c.text(w * 0.305, h * 0.23, 0, 0, 'S', mxConstants.ALIGN_CENTER, mxConstants.ALIGN_MIDDLE, 0, null, 0, 0, 0);\n\n        c.setFontStyle(0);\n        c.setFontSize(Math.min(w, h) * 0.15);\n        c.text(w * 0.78, h * 0.6, 0, 0, 'R', mxConstants.ALIGN_CENTER, mxConstants.ALIGN_MIDDLE, 0, null, 0, 0, 0);\n    };\n\n    mxShapePidValve.prototype.drawSingActingActBg = function (c, w, h) {\n        c.rect(0, 0, w * 0.46, h * 0.46);\n        c.fillAndStroke();\n\n        c.begin();\n        c.moveTo(w * 0.23, h * 0.46);\n        c.lineTo(w * 0.23, h);\n        c.moveTo(w * 0.46, h * 0.23);\n        c.lineTo(w, h * 0.23);\n        c.moveTo(w * 0.77, h * 0.15);\n        c.lineTo(w * 0.69, h * 0.31);\n        c.moveTo(w * 0.82, h * 0.15);\n        c.lineTo(w * 0.74, h * 0.31);\n        c.stroke();\n    };\n\n    mxShapePidValve.prototype.drawActingActFg = function (c, w, h) {\n        c.begin();\n        c.moveTo(w * 0.23, h * 0.23);\n        c.lineTo(w * 0.23, h * 0.46);\n        c.moveTo(0, h * 0.23);\n        c.lineTo(w * 0.46, h * 0.23);\n        c.stroke();\n    };\n\n    mxShapePidValve.prototype.drawDblActingActBg = function (c, w, h) {\n        c.rect(0, 0, w * 0.46, h * 0.46);\n        c.fillAndStroke();\n\n        c.begin();\n        c.moveTo(w * 0.23, h * 0.46);\n        c.lineTo(w * 0.23, h);\n        c.moveTo(w * 0.46, h * 0.115);\n        c.lineTo(w, h * 0.115);\n        c.moveTo(w * 0.77, h * 0.035);\n        c.lineTo(w * 0.69, h * 0.195);\n        c.moveTo(w * 0.82, h * 0.035);\n        c.lineTo(w * 0.74, h * 0.195);\n        c.moveTo(w * 0.46, h * 0.345);\n        c.lineTo(w, h * 0.345);\n        c.moveTo(w * 0.77, h * 0.265);\n        c.lineTo(w * 0.69, h * 0.425);\n        c.moveTo(w * 0.82, h * 0.265);\n        c.lineTo(w * 0.74, h * 0.425);\n        c.stroke();\n    };\n\n    mxShapePidValve.prototype.drawPilotCylinderActBg = function (c, w, h) {\n        c.rect(0, 0, w * 0.46, h * 0.46);\n        c.fillAndStroke();\n\n        c.begin();\n        c.moveTo(w * 0.23, h * 0.46);\n        c.lineTo(w * 0.23, h);\n        c.moveTo(w * 0.46, h * 0.23);\n        c.lineTo(w * 0.77, h * 0.23);\n        c.stroke();\n\n        c.rect(w * 0.77, h * 0.115, w * 0.23, h * 0.23);\n        c.fillAndStroke();\n\n        c.setFontStyle(0);\n        c.setFontFamily('Helvetica');\n        c.setFontSize(Math.min(w, h) * 0.15);\n        c.text(w * 0.885, h * 0.23, 0, 0, 'P', mxConstants.ALIGN_CENTER, mxConstants.ALIGN_MIDDLE, 0, null, 0, 0, 0);\n    };\n\n    mxShapePidValve.prototype.drawAngleBlowdownAct = function (c, w, h) {\n        c.begin();\n        c.moveTo(w * 0.34, 0);\n        c.lineTo(w, h * 0.405);\n        c.moveTo(0, h);\n        c.lineTo(w * 0.665, h * 0.205);\n        c.stroke();\n    };\n\n    mxShapePidValve.prototype.drawSquareAct = function (c, w, h, actuator) {\n        c.rect(0, 0, w, h * 0.5);\n        c.fillAndStroke();\n\n        c.begin();\n        c.moveTo(w * 0.5, h * 0.5);\n        c.lineTo(w * 0.5, h);\n        c.stroke();\n\n        var m = '';\n\n        if (actuator === mxShapePidValve.prototype.cst.PILOT) {\n            m = 'P';\n        }\n        else if (actuator === mxShapePidValve.prototype.cst.SOLENOID) {\n            m = 'S';\n        }\n        else if (actuator === mxShapePidValve.prototype.cst.DIGITAL) {\n            m = 'D';\n        }\n        else if (actuator === mxShapePidValve.prototype.cst.WEIGHT) {\n            m = 'W';\n        }\n        else if (actuator === mxShapePidValve.prototype.cst.KEY) {\n            m = 'K';\n        }\n\n        c.setFontStyle(1);\n        c.setFontFamily('Helvetica');\n        c.setFontSize(Math.min(w, h) * 0.4);\n        c.text(w * 0.5, h * 0.25, 0, 0, m, mxConstants.ALIGN_CENTER, mxConstants.ALIGN_MIDDLE, 0, null, 0, 0, 0);\n    };\n\n    mxShapePidValve.prototype.drawGateVariantFg = function (c, x, y, w, h, valveType, actuator, actH) {\n        var defState = mxUtils.getValue(this.style, mxShapePidValve.prototype.cst.DEFAULT_STATE, 'open');\n        var fillColor = mxUtils.getValue(this.style, mxConstants.STYLE_FILLCOLOR, '#ffffff');\n        var strokeColor = mxUtils.getValue(this.style, mxConstants.STYLE_STROKECOLOR, '#000000');\n\n        if (valveType === mxShapePidValve.prototype.cst.BALL) {\n            c.ellipse(x + w * 0.3, y + actH + (h - actH) * 0.18, w * 0.4, (h - actH) * 0.64);\n            c.fillAndStroke();\n        }\n        else if (valveType === mxShapePidValve.prototype.cst.GLOBE) {\n            c.ellipse(x + w * 0.3, y + actH + (h - actH) * 0.18, w * 0.4, (h - actH) * 0.64);\n            c.setFillColor(strokeColor);\n            c.fillAndStroke();\n            c.setFillColor(fillColor);\n        }\n        else if (valveType === mxShapePidValve.prototype.cst.PLUG) {\n            this.drawPlug(c, x + w * 0.4, y + actH + (h - actH) * 0.25, w * 0.2, (h - actH) * 0.5);\n        }\n        else if (valveType === mxShapePidValve.prototype.cst.NEEDLE) {\n            this.drawNeedle(c, x + w * 0.45, y + actH + (h - actH) * 0.1, w * 0.1, (h - actH) * 0.9);\n        }\n        else if (valveType === mxShapePidValve.prototype.cst.SELF_DRAINING) {\n            this.drawDrain(c, x + w * 0.48, y + actH + (h - actH) * 0.5, w * 0.04, (h - actH) * 0.49);\n        }\n    };\n\n    mxShapePidValve.prototype.drawAngleVariantFg = function (c, x, y, w, h, valveType, actuator, actH) {\n        var defState = mxUtils.getValue(this.style, mxShapePidValve.prototype.cst.DEFAULT_STATE, 'open');\n        var fillColor = mxUtils.getValue(this.style, mxConstants.STYLE_FILLCOLOR, '#ffffff');\n        var strokeColor = mxUtils.getValue(this.style, mxConstants.STYLE_STROKECOLOR, '#000000');\n\n        if (valveType === mxShapePidValve.prototype.cst.ANGLE_GLOBE) {\n            if (actuator === 'none') {\n                c.ellipse(w * 0.34, h * 0.175, w * 0.32, h * 0.4);\n            }\n            else {\n                c.ellipse(w * 0.34, h * 0.45, w * 0.32, h * 0.2667);\n            }\n            c.setFillColor(strokeColor);\n            c.fillAndStroke();\n            c.setFillColor(fillColor);\n        }\n    };\n\n    mxShapePidValve.prototype.drawGateVariantBg = function (c, x, y, w, h, valveType, actuator, actH) {\n        if (valveType === mxShapePidValve.prototype.cst.GATE) {\n            this.drawGateValve(c, x, y + actH, w, h - actH);\n        }\n        else if (valveType === mxShapePidValve.prototype.cst.BALL || valveType === mxShapePidValve.prototype.cst.GLOBE) {\n            c.ellipse(x + w * 0.3, y + actH + (h - actH) * 0.18, w * 0.4, (h - actH) * 0.64);\n            c.fillAndStroke();\n            this.drawGateValve(c, x, y + actH, w, h - actH);\n        }\n        else if (valveType === mxShapePidValve.prototype.cst.PLUG) {\n            this.drawPlug(c, x + w * 0.4, y + actH + (h - actH) * 0.25, w * 0.2, (h - actH) * 0.5);\n            this.drawGateValve(c, x, y + actH, w, h - actH);\n        }\n        else if (valveType === mxShapePidValve.prototype.cst.NEEDLE) {\n            this.drawNeedle(c, x + w * 0.45, y + actH + (h - actH) * 0.1, w * 0.1, (h - actH) * 0.9);\n            this.drawGateValve(c, x, y + actH, w, h - actH);\n        }\n        else if (valveType === mxShapePidValve.prototype.cst.SELF_DRAINING) {\n            this.drawDrain(c, x + w * 0.48, y + actH + (h - actH) * 0.5, w * 0.04, (h - actH) * 0.49);\n            this.drawGateValve(c, x, y + actH, w, h - actH);\n        }\n    };\n\n    mxShapePidValve.prototype.drawAngleVariantBg = function (c, x, y, w, h, valveType, actuator, actH) {\n        if (valveType === mxShapePidValve.prototype.cst.ANGLE) {\n            this.drawAngleValve(c, w * 0.2, y + actH, w * 0.8, h - actH);\n        }\n        else if (valveType === mxShapePidValve.prototype.cst.ANGLE_GLOBE) {\n            this.drawAngleGlobeValveBg(c, w * 0.2, y + actH, w * 0.8, h - actH);\n        }\n        else if (valveType === mxShapePidValve.prototype.cst.THREE_WAY) {\n            this.drawThreeWayValve(c, 0, y + actH, w, h - actH);\n        }\n        else if (valveType === mxShapePidValve.prototype.cst.ANGLE_BLOWDOWN) {\n            this.drawAngleBlowdownValve(c, x, y + actH, w, h - actH);\n        }\n    };\n\n    mxShapePidValve.prototype.drawPlug = function (c, x, y, w, h) {\n        c.translate(x, y);\n        c.begin();\n        c.moveTo(0, h * 0.5);\n        c.lineTo(w * 0.5, 0);\n        c.lineTo(w, h * 0.5);\n        c.lineTo(w * 0.5, h);\n        c.close();\n        c.fillAndStroke();\n        c.translate(-x, -y);\n    };\n\n    mxShapePidValve.prototype.drawNeedle = function (c, x, y, w, h) {\n        var fillColor = mxUtils.getValue(this.style, mxConstants.STYLE_FILLCOLOR, '#ffffff');\n        var strokeColor = mxUtils.getValue(this.style, mxConstants.STYLE_STROKECOLOR, '#000000');\n\n        c.translate(x, y);\n        c.begin();\n        c.moveTo(0, 0);\n        c.lineTo(w, 0);\n        c.lineTo(w * 0.5, h);\n        c.close();\n        c.setFillColor(strokeColor);\n        c.fillAndStroke();\n        c.setFillColor(fillColor);\n        c.translate(-x, -y);\n    };\n\n    mxShapePidValve.prototype.drawDrain = function (c, x, y, w, h) {\n        var fillColor = mxUtils.getValue(this.style, mxConstants.STYLE_FILLCOLOR, '#ffffff');\n        var strokeColor = mxUtils.getValue(this.style, mxConstants.STYLE_STROKECOLOR, '#000000');\n\n        c.translate(x, y);\n        c.begin();\n        c.moveTo(w * 0.5, 0);\n        c.lineTo(w * 0.5, h * 0.96);\n        c.stroke();\n\n        c.begin();\n        c.moveTo(0, h * 0.9);\n        c.lineTo(w, h * 0.9);\n        c.lineTo(w * 0.5, h);\n        c.close();\n        c.setFillColor(strokeColor);\n        c.fillAndStroke();\n        c.setFillColor(fillColor);\n        c.translate(-x, -y);\n    };\n\n    mxShapePidValve.prototype.drawGateValve = function (c, x, y, w, h) {\n        var defState = mxUtils.getValue(this.style, mxShapePidValve.prototype.cst.DEFAULT_STATE, 'open');\n        var fillColor = mxUtils.getValue(this.style, mxConstants.STYLE_FILLCOLOR, '#ffffff');\n        var strokeColor = mxUtils.getValue(this.style, mxConstants.STYLE_STROKECOLOR, '#000000');\n\n        c.translate(x, y);\n        c.begin();\n        c.moveTo(0, 0);\n        c.lineTo(w * 0.5, h * 0.5);\n        c.lineTo(0, h);\n        c.close();\n        c.moveTo(w, 0);\n        c.lineTo(w * 0.5, h * 0.5);\n        c.lineTo(w, h);\n        c.close();\n\n        if (defState === mxShapePidValve.prototype.cst.CLOSED) {\n            c.setFillColor(strokeColor);\n            c.fillAndStroke();\n            c.setFillColor(fillColor);\n        }\n        else {\n            c.fillAndStroke();\n        }\n\n        c.translate(-x, -y);\n    };\n\n    mxShapePidValve.prototype.drawAngleValve = function (c, x, y, w, h) {\n        c.translate(x, y);\n\n        c.begin();\n        c.moveTo(w * 0.375, h * 0.375);\n        c.lineTo(w, 0);\n        c.lineTo(w, h * 0.75);\n        c.close();\n        c.moveTo(w * 0.375, h * 0.375);\n        c.lineTo(w * 0.75, h);\n        c.lineTo(0, h);\n        c.close();\n        c.fillAndStroke();\n\n        c.translate(-x, -y);\n    };\n\n    mxShapePidValve.prototype.drawAngleGlobeValveBg = function (c, x, y, w, h) {\n        c.translate(x, y);\n\n        c.ellipse(w * 0.175, h * 0.175, w * 0.4, h * 0.4);\n        c.fillAndStroke();\n        c.begin();\n        c.moveTo(w * 0.375, h * 0.375);\n        c.lineTo(w, 0);\n        c.lineTo(w, h * 0.75);\n        c.close();\n        c.moveTo(w * 0.375, h * 0.375);\n        c.lineTo(w * 0.75, h);\n        c.lineTo(0, h);\n        c.close();\n        c.fillAndStroke();\n        c.translate(-x, -y);\n    };\n\n    mxShapePidValve.prototype.drawAngleGlobeValveFg = function (c, x, y, w, h) {\n        c.translate(x, y);\n        c.ellipse(w * 0.275, h * 0.275, w * 0.2, h * 0.2);\n        c.fillAndStroke();\n        c.translate(-x, -y);\n    };\n\n    mxShapePidValve.prototype.drawThreeWayValve = function (c, x, y, w, h) {\n        c.translate(x, y);\n\n        c.begin();\n        c.moveTo(0, 0);\n        c.lineTo(w * 0.5, h * 0.375);\n        c.lineTo(0, h * 0.75);\n        c.close();\n\n        c.moveTo(w, 0);\n        c.lineTo(w * 0.5, h * 0.375);\n        c.lineTo(w, h * 0.75);\n        c.close();\n\n        c.moveTo(w * 0.5, h * 0.375);\n        c.lineTo(w * 0.8, h);\n        c.lineTo(w * 0.2, h);\n        c.close();\n        c.fillAndStroke();\n\n        c.translate(-x, -y);\n    };\n\n    mxShapePidValve.prototype.drawAngleBlowdownValve = function (c, x, y, w, h) {\n\n    };\n\n\n    mxShapePidValve.prototype.drawButterflyValve = function (c, x, y, w, h, actuator, actH) {\n        var fillColor = mxUtils.getValue(this.style, mxConstants.STYLE_FILLCOLOR, '#ffffff');\n        var strokeColor = mxUtils.getValue(this.style, mxConstants.STYLE_STROKECOLOR, '#000000');\n\n        var yv = y + actH;\n        var hv = h - actH;\n\n        c.translate(x, yv);\n        c.begin();\n        c.moveTo(0, 0);\n        c.lineTo(0, hv);\n        c.moveTo(w, 0);\n        c.lineTo(w, hv);\n\n        c.moveTo(w * 0.05, hv * 0.05);\n        c.lineTo(w * 0.95, hv * 0.95);\n\n        c.fillAndStroke();\n\n        c.ellipse(w * 0.4, hv * 0.33, w * 0.2, hv * 0.33);\n        c.fillAndStroke();\n\n        c.translate(-x, -y);\n    };\n\n    mxShapePidValve.prototype.drawCheckValve = function (c, x, y, w, h, actuator, actH) {\n        var fillColor = mxUtils.getValue(this.style, mxConstants.STYLE_FILLCOLOR, '#ffffff');\n        var strokeColor = mxUtils.getValue(this.style, mxConstants.STYLE_STROKECOLOR, '#000000');\n\n        var yv = y + actH;\n        var hv = h - actH;\n\n        c.translate(x, yv);\n        c.begin();\n        c.moveTo(0, 0);\n        c.lineTo(0, hv);\n        c.moveTo(w, 0);\n        c.lineTo(w, hv);\n        c.moveTo(w * 0.05, hv * 0.05);\n        c.lineTo(w * 0.95, hv * 0.95);\n        c.fillAndStroke();\n\n        c.begin();\n        c.moveTo(w * 0.8925, hv * 0.815);\n        c.lineTo(w * 0.957, hv * 0.955);\n        c.lineTo(w * 0.85, hv * 0.928);\n        c.close();\n        c.setFillColor(strokeColor);\n        c.fillAndStroke();\n        c.setFillColor(fillColor);\n\n        c.translate(-x, -y);\n    };\n\n    mxShapePidValve.prototype.isGateVariant = function (valveType) {\n        if (valveType === mxShapePidValve.prototype.cst.GATE ||\n            valveType === mxShapePidValve.prototype.cst.BALL ||\n            valveType === mxShapePidValve.prototype.cst.PLUG ||\n            valveType === mxShapePidValve.prototype.cst.NEEDLE ||\n            valveType === mxShapePidValve.prototype.cst.SELF_DRAINING ||\n            valveType === mxShapePidValve.prototype.cst.GLOBE) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n\n    mxShapePidValve.prototype.isAngleVariant = function (valveType) {\n        if (valveType === mxShapePidValve.prototype.cst.ANGLE ||\n            valveType === mxShapePidValve.prototype.cst.ANGLE_GLOBE ||\n            valveType === mxShapePidValve.prototype.cst.THREE_WAY ||\n            valveType === mxShapePidValve.prototype.cst.ANGLE_BLOWDOWN) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n\n    mxShapePidValve.prototype.isSquareVariant = function (actType) {\n        if (actType === mxShapePidValve.prototype.cst.PILOT ||\n            actType === mxShapePidValve.prototype.cst.SOLENOID ||\n            actType === mxShapePidValve.prototype.cst.POWERED ||\n            actType === mxShapePidValve.prototype.cst.DIGITAL ||\n            actType === mxShapePidValve.prototype.cst.WEIGHT ||\n            actType === mxShapePidValve.prototype.cst.KEY) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n\n    mxCellRenderer.registerShape(mxShapePidValve.prototype.cst.SHAPE_VALVE, mxShapePidValve);\n\n    //**********************************************************************************************************************************************************\n    //Integrated Block And Bleed Valve\n    //**********************************************************************************************************************************************************\n    /**\n    * Extends mxShape.\n    */\n    function mxShapePidIntBlockBleedValve(bounds, fill, stroke, strokewidth) {\n        mxShape.call(this);\n        this.bounds = bounds;\n        this.fill = fill;\n        this.stroke = stroke;\n        this.strokewidth = (strokewidth != null) ? strokewidth : 1;\n    };\n\n    /**\n    * Extends mxShapePidValve.\n    */\n    mxUtils.extend(mxShapePidIntBlockBleedValve, mxShapePidValve);\n\n    /**\n    * Function: paintVertexShape\n    * \n    * Paints the vertex shape.\n    */\n    mxShapePidIntBlockBleedValve.prototype.paintVertexShape = function (c, x, y, w, h) {\n        var actuator = mxUtils.getValue(this.style, mxShapePidIntBlockBleedValve.prototype.cst.ACTUATOR, mxShapePidIntBlockBleedValve.prototype.cst.NONE);\n        var actH = 0;\n\n        if (actuator !== 'none') {\n            actH = h * 0.2353;\n        }\n\n        c.translate(x, y);\n        c.setLineJoin('round');\n\n        this.background(c, x, y, w, h, actuator, actH);\n        c.setShadow(false);\n        this.foreground(c, x, y, w, h, actuator, actH);\n    };\n\n    mxShapePidIntBlockBleedValve.prototype.background = function (c, x, y, w, h, actuator, actH) {\n        //draw the actuator\n        if (actuator !== mxShapePidIntBlockBleedValve.prototype.cst.NONE) {\n            this.drawActuatorBg(c, x, y, w, h, actuator);\n        }\n\n        //draw the valve body\n        this.drawValveBg(c, 0, actH, w, h - actH);\n    };\n\n    mxShapePidIntBlockBleedValve.prototype.foreground = function (c, x, y, w, h, actuator, actH) {\n        //draw the actuator\n        if (actuator !== mxShapePidIntBlockBleedValve.prototype.cst.NONE) {\n            this.drawActuatorFg(c, x, y, w, h, actuator);\n        }\n    };\n\n    mxShapePidIntBlockBleedValve.prototype.drawValveBg = function (c, x, y, w, h) {\n        var fillColor = mxUtils.getValue(this.style, mxConstants.STYLE_FILLCOLOR, '#ffffff');\n        var strokeColor = mxUtils.getValue(this.style, mxConstants.STYLE_STROKECOLOR, '#000000');\n\n        c.translate(x, y);\n        c.begin();\n        c.moveTo(0, 0);\n        c.lineTo(w * 0.5, h * 0.23);\n        c.lineTo(0, h * 0.46);\n        c.close();\n        c.moveTo(w * 0.5, h * 0.23);\n        c.lineTo(w, 0);\n        c.lineTo(w, h * 0.46);\n        c.close();\n        c.fillAndStroke();\n\n        c.begin();\n        c.moveTo(w * 0.5, h * 0.23);\n        c.lineTo(w * 0.5, h * 0.5);\n        c.stroke();\n\n        c.setFillColor(strokeColor);\n        c.begin();\n        c.moveTo(w * 0.3, h * 0.5);\n        c.lineTo(w * 0.7, h * 0.5);\n        c.lineTo(w * 0.5, h * 0.75);\n        c.close();\n        c.fillAndStroke();\n\n        c.begin();\n        c.moveTo(w * 0.3, h);\n        c.lineTo(w * 0.5, h * 0.75);\n        c.lineTo(w * 0.7, h);\n        c.fillAndStroke();\n        c.setFillColor(fillColor);\n\n        c.translate(-x, -y);\n    };\n\n    mxShapePidIntBlockBleedValve.prototype.drawActuatorBg = function (c, x, y, w, h, actuator) {\n        if (this.isSquareVariant(actuator)) {\n            c.translate(w * 0.325, 0);\n            this.drawSquareAct(c, w * 0.35, h * 0.4112, actuator);\n            c.translate(- w * 0.325, 0);\n        }\n        else if (actuator === mxShapePidIntBlockBleedValve.prototype.cst.MANUAL) {\n            c.translate(w * 0.25, h * 0.0882);\n            this.drawManAct(c, w * 0.5, h * 0.323);\n            c.translate(- w * 0.25, - h * 0.0882);\n        }\n        else if (actuator === mxShapePidIntBlockBleedValve.prototype.cst.DIAPHRAGM) {\n            c.translate(w * 0.25, h * 0.0588);\n            this.drawDiaphAct(c, w * 0.5, h * 0.3524);\n            c.translate(- w * 0.25, - h * 0.0588);\n        }\n        else if (actuator === mxShapePidIntBlockBleedValve.prototype.cst.BALANCED_DIAPHRAGM) {\n            c.translate(w * 0.25, h * 0.0588);\n            this.drawBalDiaphActBg(c, w * 0.5, h * 0.3524);\n            c.translate(- w * 0.25, - h * 0.0588);\n        }\n        else if (actuator === mxShapePidIntBlockBleedValve.prototype.cst.MOTOR || actuator === mxShapePidIntBlockBleedValve.prototype.cst.ELECTRO_HYDRAULIC) {\n            c.translate(w * 0.325, 0);\n            this.drawCircleAct(c, w * 0.35, h * 0.4112, actuator);\n            c.translate(- w * 0.325, 0);\n        }\n        else if (actuator === mxShapePidIntBlockBleedValve.prototype.cst.SPRING) {\n            c.translate(w * 0.36, 0);\n            this.drawSpringAct(c, w * 0.28, h * 0.4112);\n            c.translate(- w * 0.36, 0);\n        }\n        else if (actuator === mxShapePidIntBlockBleedValve.prototype.cst.SOLENOID_MANUAL_RESET) {\n            c.translate(w * 0.325, 0);\n            this.drawSolenoidManResetAct(c, w * 0.575, h * 0.4112);\n            c.translate(- w * 0.325, 0);\n        }\n        else if (actuator === mxShapePidIntBlockBleedValve.prototype.cst.SINGLE_ACTING) {\n            c.translate(w * 0.35, 0);\n            this.drawSingActingActBg(c, w * 0.65, h * 0.4112);\n            c.translate(- w * 0.35, 0);\n        }\n        else if (actuator === mxShapePidIntBlockBleedValve.prototype.cst.DOUBLE_ACTING) {\n            c.translate(w * 0.35, 0);\n            this.drawDblActingActBg(c, w * 0.65, h * 0.4112);\n            c.translate(- w * 0.35, 0);\n        }\n        else if (actuator === mxShapePidIntBlockBleedValve.prototype.cst.PILOT_CYLINDER) {\n            c.translate(w * 0.35, 0);\n            this.drawPilotCylinderActBg(c, w * 0.65, h * 0.4112);\n            c.translate(- w * 0.35, 0);\n        }\n    };\n\n    mxShapePidIntBlockBleedValve.prototype.drawActuatorFg = function (c, x, y, w, h, actuator) {\n        if (actuator === mxShapePidIntBlockBleedValve.prototype.cst.BALANCED_DIAPHRAGM) {\n            c.translate(w * 0.25, h * 0.0588);\n            this.drawBalDiaphActFg(c, w * 0.5, h * 0.3524);\n            c.translate(- w * 0.25, - h * 0.0588);\n        }\n        else if (actuator === mxShapePidIntBlockBleedValve.prototype.cst.SINGLE_ACTING ||\n            actuator === mxShapePidIntBlockBleedValve.prototype.cst.DOUBLE_ACTING ||\n            actuator === mxShapePidIntBlockBleedValve.prototype.cst.PILOT_CYLINDER) {\n            c.translate(w * 0.35, 0);\n            this.drawActingActFg(c, w * 0.65, h * 0.4112);\n            c.translate(- w * 0.35, 0);\n        }\n    };\n\n    mxCellRenderer.registerShape('mxgraph.pid2valves.blockBleedValve', mxShapePidIntBlockBleedValve);\n\n    //**********************************************************************************************************************************************************\n    //Auto Recirculation Valve\n    //**********************************************************************************************************************************************************\n    /**\n     * Extends mxShape.\n     */\n    function mxShapePidAutoRecircValve(bounds, fill, stroke, strokewidth) {\n        mxShape.call(this);\n        this.bounds = bounds;\n        this.fill = fill;\n        this.stroke = stroke;\n        this.strokewidth = (strokewidth != null) ? strokewidth : 1;\n    };\n\n    /**\n     * Extends mxShape.\n     */\n    mxUtils.extend(mxShapePidAutoRecircValve, mxShape);\n\n\n    /**\n     * Function: paintVertexShape\n     * \n     * Paints the vertex shape.\n     */\n    mxShapePidAutoRecircValve.prototype.paintVertexShape = function (c, x, y, w, h) {\n        c.setLineJoin('round');\n        c.translate(x, y);\n\n        //background\n        c.rect(0, 0, w, h);\n        c.fillAndStroke();\n        c.setShadow(false);\n\n        //foreground\n        c.begin();\n        c.moveTo(w * 0.08, h * 0.08);\n        c.lineTo(w * 0.08, h * 0.92);\n        c.moveTo(w * 0.92, h * 0.08);\n        c.lineTo(w * 0.92, h * 0.92);\n        c.moveTo(w * 0.12, h * 0.122);\n        c.lineTo(w * 0.8738, h * 0.8837);\n\n        c.moveTo(w * 0.5, 0);\n        c.lineTo(w * 0.55, h * 0.05);\n        c.lineTo(w * 0.45, h * 0.15);\n        c.lineTo(w * 0.55, h * 0.25);\n        c.lineTo(w * 0.45, h * 0.35);\n        c.lineTo(w * 0.55, h * 0.45);\n        c.lineTo(w * 0.49, h * 0.5);\n        c.stroke();\n\n        var fillColor = mxUtils.getValue(this.style, mxConstants.STYLE_FILLCOLOR, '#ffffff');\n        var strokeColor = mxUtils.getValue(this.style, mxConstants.STYLE_STROKECOLOR, '#000000');\n\n        c.begin();\n        c.moveTo(w * 0.8257, h * 0.7695);\n        c.lineTo(w * 0.8797, h * 0.888);\n        c.lineTo(w * 0.79, h * 0.8651);\n        c.close();\n        c.setFillColor(strokeColor);\n        c.fillAndStroke();\n        c.setFillColor(fillColor);\n    };\n\n    mxCellRenderer.registerShape('mxgraph.pid2valves.autoRecircValve', mxShapePidAutoRecircValve);\n    /**\n     * $Id: mxPidInstruments.js,v 1.4 2014/01/21 13:10:17 gaudenz Exp $\n     * Copyright (c) 2006-2013, JGraph Ltd\n     */\n\n    //**********************************************************************************************************************************************************\n    //Discrete Instrument\n    //**********************************************************************************************************************************************************\n    /**\n     * Extends mxShape.\n     */\n    function mxShapePidDiscInst(bounds, fill, stroke, strokewidth) {\n        mxShape.call(this);\n        this.bounds = bounds;\n        this.fill = fill;\n        this.stroke = stroke;\n        this.strokewidth = (strokewidth != null) ? strokewidth : 1;\n    };\n\n    /**\n     * Extends mxShape.\n     */\n    mxUtils.extend(mxShapePidDiscInst, mxShape);\n\n    mxShapePidDiscInst.prototype.cst = {\n        SHAPE_DISC_INST: 'mxgraph.pid2inst.discInst',\n        MOUNTING: 'mounting',\n        FIELD: 'field',\n        ROOM: 'room',\n        INACCESSIBLE: 'inaccessible',\n        LOCAL: 'local'\n    };\n\n    /**\n     * Function: paintVertexShape\n     * \n     * Paints the vertex shape.\n     */\n    mxShapePidDiscInst.prototype.paintVertexShape = function (c, x, y, w, h) {\n        c.translate(x, y);\n        this.background(c, x, y, w, h);\n        c.setShadow(false);\n        this.foreground(c, x, y, w, h);\n    };\n\n    mxShapePidDiscInst.prototype.background = function (c, x, y, w, h) {\n        c.ellipse(0, 0, w, h);\n        c.fillAndStroke();\n    };\n\n    mxShapePidDiscInst.prototype.foreground = function (c, x, y, w, h) {\n        var mounting = mxUtils.getValue(this.style, mxShapePidDiscInst.prototype.cst.MOUNTING, 'field');\n\n        if (mounting === mxShapePidDiscInst.prototype.cst.ROOM) {\n            c.begin();\n            c.moveTo(0, h * 0.5);\n            c.lineTo(w, h * 0.5);\n            c.stroke();\n        }\n        else if (mounting === mxShapePidDiscInst.prototype.cst.INACCESSIBLE) {\n            c.setDashed(true);\n            c.begin();\n            c.moveTo(0, h * 0.5);\n            c.lineTo(w, h * 0.5);\n            c.stroke();\n        }\n        else if (mounting === mxShapePidDiscInst.prototype.cst.LOCAL) {\n            c.begin();\n            c.moveTo(w * 0.005, h * 0.48);\n            c.lineTo(w * 0.995, h * 0.48);\n            c.moveTo(w * 0.005, h * 0.52);\n            c.lineTo(w * 0.995, h * 0.52);\n            c.stroke();\n        }\n    };\n\n    mxCellRenderer.registerShape(mxShapePidDiscInst.prototype.cst.SHAPE_DISC_INST, mxShapePidDiscInst);\n\n    mxShapePidDiscInst.prototype.constraints = [\n        new mxConnectionConstraint(new mxPoint(0.5, 0), true),\n        new mxConnectionConstraint(new mxPoint(0.5, 1), true),\n        new mxConnectionConstraint(new mxPoint(0, 0.5), true),\n        new mxConnectionConstraint(new mxPoint(1, 0.5), true),\n        new mxConnectionConstraint(new mxPoint(0.145, 0.145), false),\n        new mxConnectionConstraint(new mxPoint(0.145, 0.855), false),\n        new mxConnectionConstraint(new mxPoint(0.855, 0.145), false),\n        new mxConnectionConstraint(new mxPoint(0.855, 0.855), false)\n    ];\n\n    //**********************************************************************************************************************************************************\n    //Shared Control/Display\n    //**********************************************************************************************************************************************************\n    /**\n    * Extends mxShape.\n    */\n    function mxShapePidSharedCont(bounds, fill, stroke, strokewidth) {\n        mxShape.call(this);\n        this.bounds = bounds;\n        this.fill = fill;\n        this.stroke = stroke;\n        this.strokewidth = (strokewidth != null) ? strokewidth : 1;\n    };\n\n    /**\n    * Extends mxShape.\n    */\n    mxUtils.extend(mxShapePidSharedCont, mxShape);\n\n    mxShapePidSharedCont.prototype.cst = {\n        SHAPE_SHARED_CONT: 'mxgraph.pid2inst.sharedCont',\n        MOUNTING: 'mounting',\n        FIELD: 'field',\n        ROOM: 'room',\n        INACCESSIBLE: 'inaccessible',\n        LOCAL: 'local'\n    };\n\n    /**\n    * Function: paintVertexShape\n    * \n    * Paints the vertex shape.\n    */\n    mxShapePidSharedCont.prototype.paintVertexShape = function (c, x, y, w, h) {\n        c.translate(x, y);\n        this.background(c, x, y, w, h);\n        c.setShadow(false);\n        this.foreground(c, x, y, w, h);\n    };\n\n    mxShapePidSharedCont.prototype.background = function (c, x, y, w, h) {\n        c.rect(0, 0, w, h);\n        c.fillAndStroke();\n    };\n\n    mxShapePidSharedCont.prototype.foreground = function (c, x, y, w, h) {\n        var mounting = mxUtils.getValue(this.style, mxShapePidSharedCont.prototype.cst.MOUNTING, 'field');\n\n        c.ellipse(0, 0, w, h);\n        c.fillAndStroke();\n\n        if (mounting === mxShapePidSharedCont.prototype.cst.ROOM) {\n            c.begin();\n            c.moveTo(0, h * 0.5);\n            c.lineTo(w, h * 0.5);\n            c.stroke();\n        }\n        else if (mounting === mxShapePidSharedCont.prototype.cst.INACCESSIBLE) {\n            c.setDashed(true);\n            c.begin();\n            c.moveTo(0, h * 0.5);\n            c.lineTo(w, h * 0.5);\n            c.stroke();\n        }\n        else if (mounting === mxShapePidDiscInst.prototype.cst.LOCAL) {\n            c.begin();\n            c.moveTo(w * 0.005, h * 0.48);\n            c.lineTo(w * 0.995, h * 0.48);\n            c.moveTo(w * 0.005, h * 0.52);\n            c.lineTo(w * 0.995, h * 0.52);\n            c.stroke();\n        }\n    };\n\n    mxCellRenderer.registerShape(mxShapePidSharedCont.prototype.cst.SHAPE_SHARED_CONT, mxShapePidSharedCont);\n\n    mxShapePidSharedCont.prototype.constraints = [\n        new mxConnectionConstraint(new mxPoint(0.5, 0), true),\n        new mxConnectionConstraint(new mxPoint(0.5, 1), true),\n        new mxConnectionConstraint(new mxPoint(0, 0.5), true),\n        new mxConnectionConstraint(new mxPoint(1, 0.5), true),\n        new mxConnectionConstraint(new mxPoint(0, 0), false),\n        new mxConnectionConstraint(new mxPoint(0, 1), false),\n        new mxConnectionConstraint(new mxPoint(1, 0), false),\n        new mxConnectionConstraint(new mxPoint(1, 1), false)\n    ];\n\n    //**********************************************************************************************************************************************************\n    //Computer Function\n    //**********************************************************************************************************************************************************\n    /**\n    * Extends mxShape.\n    */\n    function mxShapePidCompFunc(bounds, fill, stroke, strokewidth) {\n        mxShape.call(this);\n        this.bounds = bounds;\n        this.fill = fill;\n        this.stroke = stroke;\n        this.strokewidth = (strokewidth != null) ? strokewidth : 1;\n    };\n\n    /**\n    * Extends mxShape.\n    */\n    mxUtils.extend(mxShapePidCompFunc, mxShape);\n\n    mxShapePidCompFunc.prototype.cst = {\n        SHAPE_COMP_FUNC: 'mxgraph.pid2inst.compFunc',\n        MOUNTING: 'mounting',\n        FIELD: 'field',\n        ROOM: 'room',\n        INACCESSIBLE: 'inaccessible',\n        LOCAL: 'local'\n    };\n\n    /**\n    * Function: paintVertexShape\n    * \n    * Paints the vertex shape.\n    */\n    mxShapePidCompFunc.prototype.paintVertexShape = function (c, x, y, w, h) {\n        c.translate(x, y);\n        this.background(c, x, y, w, h);\n        c.setShadow(false);\n        this.foreground(c, x, y, w, h);\n    };\n\n    mxShapePidCompFunc.prototype.background = function (c, x, y, w, h) {\n        c.begin();\n        c.moveTo(0, h * 0.5);\n        c.lineTo(w * 0.25, 0);\n        c.lineTo(w * 0.75, 0);\n        c.lineTo(w, h * 0.5);\n        c.lineTo(w * 0.75, h);\n        c.lineTo(w * 0.25, h);\n        c.close();\n        c.fillAndStroke();\n    };\n\n    mxShapePidCompFunc.prototype.foreground = function (c, x, y, w, h) {\n        var mounting = mxUtils.getValue(this.style, mxShapePidCompFunc.prototype.cst.MOUNTING, 'field');\n\n        if (mounting === mxShapePidCompFunc.prototype.cst.ROOM) {\n            c.begin();\n            c.moveTo(0, h * 0.5);\n            c.lineTo(w, h * 0.5);\n            c.stroke();\n        }\n        else if (mounting === mxShapePidCompFunc.prototype.cst.INACCESSIBLE) {\n            c.setDashed(true);\n            c.begin();\n            c.moveTo(0, h * 0.5);\n            c.lineTo(w, h * 0.5);\n            c.stroke();\n        }\n        else if (mounting === mxShapePidDiscInst.prototype.cst.LOCAL) {\n            c.begin();\n            c.moveTo(w * 0.01, h * 0.48);\n            c.lineTo(w * 0.99, h * 0.48);\n            c.moveTo(w * 0.01, h * 0.52);\n            c.lineTo(w * 0.99, h * 0.52);\n            c.stroke();\n        }\n    };\n\n    mxCellRenderer.registerShape(mxShapePidCompFunc.prototype.cst.SHAPE_COMP_FUNC, mxShapePidCompFunc);\n\n    mxShapePidCompFunc.prototype.constraints = [\n        new mxConnectionConstraint(new mxPoint(0.5, 0), true),\n        new mxConnectionConstraint(new mxPoint(0.5, 1), true),\n        new mxConnectionConstraint(new mxPoint(0, 0.5), true),\n        new mxConnectionConstraint(new mxPoint(1, 0.5), true),\n        new mxConnectionConstraint(new mxPoint(0.25, 0), false),\n        new mxConnectionConstraint(new mxPoint(0.75, 0), false),\n        new mxConnectionConstraint(new mxPoint(0.25, 1), false),\n        new mxConnectionConstraint(new mxPoint(0.75, 1), false)\n    ];\n\n    //**********************************************************************************************************************************************************\n    //Computer Function\n    //**********************************************************************************************************************************************************\n    /**\n    * Extends mxShape.\n    */\n    function mxShapePidProgLogCont(bounds, fill, stroke, strokewidth) {\n        mxShape.call(this);\n        this.bounds = bounds;\n        this.fill = fill;\n        this.stroke = stroke;\n        this.strokewidth = (strokewidth != null) ? strokewidth : 1;\n    };\n\n    /**\n    * Extends mxShape.\n    */\n    mxUtils.extend(mxShapePidProgLogCont, mxShape);\n\n    mxShapePidProgLogCont.prototype.cst = {\n        SHAPE_PROG_LOG_CONT: 'mxgraph.pid2inst.progLogCont',\n        MOUNTING: 'mounting',\n        FIELD: 'field',\n        ROOM: 'room',\n        INACCESSIBLE: 'inaccessible',\n        LOCAL: 'local'\n    };\n\n    /**\n    * Function: paintVertexShape\n    * \n    * Paints the vertex shape.\n    */\n    mxShapePidProgLogCont.prototype.paintVertexShape = function (c, x, y, w, h) {\n        c.translate(x, y);\n        this.background(c, x, y, w, h);\n        c.setShadow(false);\n        this.foreground(c, x, y, w, h);\n    };\n\n    mxShapePidProgLogCont.prototype.background = function (c, x, y, w, h) {\n        c.rect(0, 0, w, h);\n        c.fillAndStroke();\n    };\n\n    mxShapePidProgLogCont.prototype.foreground = function (c, x, y, w, h) {\n        var mounting = mxUtils.getValue(this.style, mxShapePidProgLogCont.prototype.cst.MOUNTING, 'field');\n\n        c.begin();\n        c.moveTo(0, h * 0.5);\n        c.lineTo(w * 0.5, 0);\n        c.lineTo(w, h * 0.5);\n        c.lineTo(w * 0.5, h);\n        c.close();\n        c.stroke();\n\n        if (mounting === mxShapePidProgLogCont.prototype.cst.ROOM) {\n            c.begin();\n            c.moveTo(0, h * 0.5);\n            c.lineTo(w, h * 0.5);\n            c.stroke();\n        }\n        else if (mounting === mxShapePidProgLogCont.prototype.cst.INACCESSIBLE) {\n            c.setDashed(true);\n            c.begin();\n            c.moveTo(0, h * 0.5);\n            c.lineTo(w, h * 0.5);\n            c.stroke();\n        }\n        else if (mounting === mxShapePidDiscInst.prototype.cst.LOCAL) {\n            c.begin();\n            c.moveTo(w * 0.02, h * 0.48);\n            c.lineTo(w * 0.98, h * 0.48);\n            c.moveTo(w * 0.02, h * 0.52);\n            c.lineTo(w * 0.98, h * 0.52);\n            c.stroke();\n        }\n    };\n\n    mxCellRenderer.registerShape(mxShapePidProgLogCont.prototype.cst.SHAPE_PROG_LOG_CONT, mxShapePidProgLogCont);\n\n    mxShapePidProgLogCont.prototype.constraints = [\n        new mxConnectionConstraint(new mxPoint(0.5, 0), true),\n        new mxConnectionConstraint(new mxPoint(0.5, 1), true),\n        new mxConnectionConstraint(new mxPoint(0, 0.5), true),\n        new mxConnectionConstraint(new mxPoint(1, 0.5), true),\n        new mxConnectionConstraint(new mxPoint(0, 0), false),\n        new mxConnectionConstraint(new mxPoint(0, 1), false),\n        new mxConnectionConstraint(new mxPoint(1, 0), false),\n        new mxConnectionConstraint(new mxPoint(1, 1), false)\n    ];\n\n    //**********************************************************************************************************************************************************\n    //Indicator\n    //**********************************************************************************************************************************************************\n    /**\n    * Extends mxShape.\n    */\n    function mxShapePidIndicator(bounds, fill, stroke, strokewidth) {\n        mxShape.call(this);\n        this.bounds = bounds;\n        this.fill = fill;\n        this.stroke = stroke;\n        this.strokewidth = (strokewidth != null) ? strokewidth : 1;\n    };\n\n    /**\n    * Extends mxShape.\n    */\n    mxUtils.extend(mxShapePidIndicator, mxShape);\n\n    mxShapePidIndicator.prototype.cst = {\n        SHAPE_INDICATOR: 'mxgraph.pid2inst.indicator',\n        MOUNTING: 'mounting',\n        FIELD: 'field',\n        ROOM: 'room',\n        INACCESSIBLE: 'inaccessible',\n        LOCAL: 'local',\n        IND_TYPE: 'indType',\n        INSTRUMENT: 'inst',\n        CONTROL: 'ctrl',\n        FUNCTION: 'func',\n        PLC: 'plc'\n    };\n\n    /**\n    * Function: paintVertexShape\n    * \n    * Paints the vertex shape.\n    */\n    mxShapePidIndicator.prototype.paintVertexShape = function (c, x, y, w, h) {\n        c.translate(x, y);\n        this.background(c, x, y, w, h);\n        c.setShadow(false);\n        this.foreground(c, x, y, w, h);\n    };\n\n    mxShapePidIndicator.prototype.background = function (c, x, y, w, h) {\n        var type = mxUtils.getValue(this.style, mxShapePidIndicator.prototype.cst.IND_TYPE, 'inst');\n\n        c.begin();\n        c.moveTo(w * 0.5, w);\n        c.lineTo(w * 0.5, h);\n        c.stroke();\n\n        if (type === mxShapePidIndicator.prototype.cst.INSTRUMENT) {\n            c.ellipse(0, 0, w, w);\n            c.fillAndStroke();\n        }\n        else if (type === mxShapePidIndicator.prototype.cst.CONTROL) {\n            c.rect(0, 0, w, w);\n            c.fillAndStroke();\n        }\n        else if (type === mxShapePidIndicator.prototype.cst.FUNCTION) {\n            c.begin();\n            c.moveTo(0, w * 0.5);\n            c.lineTo(w * 0.25, 0);\n            c.lineTo(w * 0.75, 0);\n            c.lineTo(w, w * 0.5);\n            c.lineTo(w * 0.75, w);\n            c.lineTo(w * 0.25, w);\n            c.close();\n            c.fillAndStroke();\n        }\n        else if (type === mxShapePidIndicator.prototype.cst.PLC) {\n            c.rect(0, 0, w, w);\n            c.fillAndStroke();\n        }\n    };\n\n    mxShapePidIndicator.prototype.foreground = function (c, x, y, w, h) {\n        var mounting = mxUtils.getValue(this.style, mxShapePidIndicator.prototype.cst.MOUNTING, 'field');\n        var type = mxUtils.getValue(this.style, mxShapePidIndicator.prototype.cst.IND_TYPE, 'inst');\n\n        if (type === mxShapePidIndicator.prototype.cst.CONTROL) {\n            c.ellipse(0, 0, w, w);\n            c.stroke();\n        }\n        else if (type === mxShapePidIndicator.prototype.cst.PLC) {\n            c.begin();\n            c.moveTo(0, w * 0.5);\n            c.lineTo(w * 0.5, 0);\n            c.lineTo(w, w * 0.5);\n            c.lineTo(w * 0.5, w);\n            c.close();\n            c.stroke();\n        }\n\n        if (mounting === mxShapePidIndicator.prototype.cst.ROOM) {\n            c.begin();\n            c.moveTo(0, w * 0.5);\n            c.lineTo(w, w * 0.5);\n            c.stroke();\n        }\n        else if (mounting === mxShapePidIndicator.prototype.cst.INACCESSIBLE) {\n            c.setDashed(true);\n            c.begin();\n            c.moveTo(0, w * 0.5);\n            c.lineTo(w, w * 0.5);\n            c.stroke();\n        }\n        else if (mounting === mxShapePidIndicator.prototype.cst.LOCAL) {\n            c.begin();\n            c.moveTo(w * 0.005, w * 0.48);\n            c.lineTo(w * 0.995, w * 0.48);\n            c.moveTo(w * 0.005, w * 0.52);\n            c.lineTo(w * 0.995, w * 0.52);\n            c.stroke();\n        }\n    };\n\n    mxCellRenderer.registerShape(mxShapePidIndicator.prototype.cst.SHAPE_INDICATOR, mxShapePidIndicator);\n\n    mxShapePidIndicator.prototype.constraints = [new mxConnectionConstraint(new mxPoint(0.5, 1), true)];\n\n    //**********************************************************************************************************************************************************\n    //Logic\n    //**********************************************************************************************************************************************************\n    /**\n    * Extends mxShape.\n    */\n    function mxShapePidLogic(bounds, fill, stroke, strokewidth) {\n        mxShape.call(this);\n        this.bounds = bounds;\n        this.fill = fill;\n        this.stroke = stroke;\n        this.strokewidth = (strokewidth != null) ? strokewidth : 1;\n    };\n\n    /**\n    * Extends mxShape.\n    */\n    mxUtils.extend(mxShapePidLogic, mxShape);\n\n    mxShapePidLogic.prototype.cst = {\n        SHAPE_LOGIC: 'mxgraph.pid2inst.logic',\n        MOUNTING: 'mounting',\n        FIELD: 'field',\n        ROOM: 'room',\n        INACCESSIBLE: 'inaccessible',\n        LOCAL: 'local'\n    };\n\n    /**\n    * Function: paintVertexShape\n    * \n    * Paints the vertex shape.\n    */\n    mxShapePidLogic.prototype.paintVertexShape = function (c, x, y, w, h) {\n        c.translate(x, y);\n        this.background(c, x, y, w, h);\n        c.setShadow(false);\n        this.foreground(c, x, y, w, h);\n    };\n\n    mxShapePidLogic.prototype.background = function (c, x, y, w, h) {\n        c.begin();\n        c.moveTo(0, h * 0.5);\n        c.lineTo(w * 0.5, 0);\n        c.lineTo(w, h * 0.5);\n        c.lineTo(w * 0.5, h);\n        c.close();\n        c.fillAndStroke();\n    };\n\n    mxShapePidLogic.prototype.foreground = function (c, x, y, w, h) {\n        var mounting = mxUtils.getValue(this.style, mxShapePidLogic.prototype.cst.MOUNTING, 'field');\n\n        if (mounting === mxShapePidLogic.prototype.cst.ROOM) {\n            c.begin();\n            c.moveTo(0, h * 0.5);\n            c.lineTo(w, h * 0.5);\n            c.stroke();\n        }\n        else if (mounting === mxShapePidLogic.prototype.cst.INACCESSIBLE) {\n            c.setDashed(true);\n            c.begin();\n            c.moveTo(0, h * 0.5);\n            c.lineTo(w, h * 0.5);\n            c.stroke();\n        }\n        else if (mounting === mxShapePidLogic.prototype.cst.LOCAL) {\n            c.begin();\n            c.moveTo(w * 0.02, h * 0.48);\n            c.lineTo(w * 0.98, h * 0.48);\n            c.moveTo(w * 0.02, h * 0.52);\n            c.lineTo(w * 0.98, h * 0.52);\n            c.stroke();\n        }\n    };\n\n    mxCellRenderer.registerShape(mxShapePidLogic.prototype.cst.SHAPE_LOGIC, mxShapePidLogic);\n\n    mxShapePidLogic.prototype.constraints = [\n        new mxConnectionConstraint(new mxPoint(0.5, 0), true),\n        new mxConnectionConstraint(new mxPoint(0.5, 1), true),\n        new mxConnectionConstraint(new mxPoint(0, 0.5), true),\n        new mxConnectionConstraint(new mxPoint(1, 0.5), true),\n        new mxConnectionConstraint(new mxPoint(0.25, 0.25), false),\n        new mxConnectionConstraint(new mxPoint(0.25, 0.75), false),\n        new mxConnectionConstraint(new mxPoint(0.75, 0.25), false),\n        new mxConnectionConstraint(new mxPoint(0.75, 0.75), false)\n    ];\n}", "ColumnPosition" : 31, "DirectLinkUUID" : "", "DisplayName" : "BMCodeHost-11", "Exports" : "interface shapeCatalogue extends TWRuntimeWidget {execute(); \t    \t/**\t    \t * Should be invoked to dispatch an event to the Thingworx runtime, causing all actions bound to that event to execute.\n\t    \t * @param event - The name of the event to dispatch.\n\t    \t */\n\t\t\tdispatchEvent(event: string): void;\n\t    \t/**\n\t    \t * Invoked after any property has been updated as a result of a binding.\n\t    \t * This method will be invoked after the specific ..DidUpdateToValue method is invoked.\n\t    \t * Scripts can override this method to react to all property updates.\n\t    \t * @param event - The name of the event to dispatch.\n\t    \t */\n\t\t\tpropertyDidUpdateToValue(property: string, value: any | undefined): void;\n\t    \t/**\n\t    \t * Finds and returns the widget with the given name in the current mashup.\n\t    \t * @param name - The DisplayName of the widget to find.\n\t    \t * @return - The widget object if it was found, undefined otherwise.\n\t    \t */\n\t\t\twidgetNamed(name: string): TWRuntimeWidget | undefined;\n\t    \t/**\n\t    \t * Sends a property update to the given widget as if it came from a binding.\n\t    \t * Supported properties may be updated this way even if they are not bound to anything in the composer.\n\t    \t * @param widget - The widget object whose property should be updated.\n\t    \t * @param args - An object containing additional arguments. This object must have the following properties:\n\t    \t *\t\t\t\t\tforProperty {String} - The name of the property to update.\n\t    \t *\t\t\t\t\tvalue {AnyObject} - The value to which that property should update.\n\t    \t */\n\t\t\tdispatchPropertyUpdateToWidget(widget: any, args: SelfDispatchPropertyUpdateToWidgetArgs): void;\n\t    \t/**\n\t    \t * May be overriden by scripts that create an UI. This method receives the script's container as its parameter.\n\t    \t * It is the script's responsibility to add their content to the supplied container.\n\t    \t * @param container - The container in which the UI elements should be added.\n\t    \t */\n\t\t\trenderWithContainer(container: $): void;\n\t\t}\n", "FullScreen" : false, "Height" : 46, "Id" : "BMCodeHost-11", "Left" : 400, "ResponsiveLayout" : false, "RuntimeProperties" : "[{\"name\":\"execute\",\"dataType\":\"STRING\",\"type\":\"service\"}]", "Scope" : "local", "ScrollPosition" : 322, "ShowDataLoading" : true, "Title" : "shapeCatalogue", "Top" : 35, "Type" : "BMCodeHost", "Visible" : true, "Width" : 169, "Z-index" : 10, "__TypeDisplayName" : "Object" }, "Widgets" : [ ] }, { "Properties" : { "Area" : "UI", "Code" : "// defines the internal structure of a JSON mtp file\ninterface Point {\n    x: number;\n    y: number;\n}\n\ninterface Shape {\n    width: number;\n    height: number;\n    rotation: number;\n    shape: string;\n}\n\ninterface GenericMptElement {\n    id: string;\n    name: string;\n}\n\ninterface PositionableElement extends Point {\n    // empty\n}\n\ninterface Nozzle extends GenericMptElement, PositionableElement {\n    externalConnectorId: string;\n}\n\ninterface VisualObject extends Point, Shape {\n    viewType: string;\n    eClassVersion: string;\n    eClassClassification: string;\n    eClassIrdi: string;\n    refId: string;\n    nozzles: Nozzle[];\n    subElement: Shape;\n}\n\ninterface PipeDefinition extends GenericMptElement {\n    source: Point | Nozzle;\n    target: Point | Nozzle;\n    waypoints: Point[];\n    nozzles: Nozzle[];\n}\n\ninterface CommunicationInterface extends GenericMptElement {\n    identifier: string;\n    namespace: string;\n    access: string;\n}\ninterface CommunicationObject extends GenericMptElement {\n    description: string;\n    interfaces: CommunicationInterface[];\n}\n\ninterface InteractibleElement {\n    obj: VisualObject;\n    communication: CommunicationObject;\n}\n\ninterface HmiDiagram {\n    width: number;\n    height: number;\n    elements: InteractibleElement[];\n    pipes: PipeDefinition[];\n}", "ColumnPosition" : 1, "DirectLinkUUID" : "", "DisplayName" : "BMTypescriptHost-12", "Exports" : "interface mtpJsonDef extends TWRuntimeWidget {\t    \t/**\t    \t * Should be invoked to dispatch an event to the Thingworx runtime, causing all actions bound to that event to execute.\n\t    \t * @param event - The name of the event to dispatch.\n\t    \t */\n\t\t\tdispatchEvent(event: string): void;\n\t    \t/**\n\t    \t * Invoked after any property has been updated as a result of a binding.\n\t    \t * This method will be invoked after the specific ..DidUpdateToValue method is invoked.\n\t    \t * Scripts can override this method to react to all property updates.\n\t    \t * @param event - The name of the event to dispatch.\n\t    \t */\n\t\t\tpropertyDidUpdateToValue(property: string, value: any | undefined): void;\n\t    \t/**\n\t    \t * Finds and returns the widget with the given name in the current mashup.\n\t    \t * @param name - The DisplayName of the widget to find.\n\t    \t * @return - The widget object if it was found, undefined otherwise.\n\t    \t */\n\t\t\twidgetNamed(name: string): TWRuntimeWidget | undefined;\n\t    \t/**\n\t    \t * Sends a property update to the given widget as if it came from a binding.\n\t    \t * Supported properties may be updated this way even if they are not bound to anything in the composer.\n\t    \t * @param widget - The widget object whose property should be updated.\n\t    \t * @param args - An object containing additional arguments. This object must have the following properties:\n\t    \t *\t\t\t\t\tforProperty {String} - The name of the property to update.\n\t    \t *\t\t\t\t\tvalue {AnyObject} - The value to which that property should update.\n\t    \t */\n\t\t\tdispatchPropertyUpdateToWidget(widget: any, args: SelfDispatchPropertyUpdateToWidgetArgs): void;\n\t    \t/**\n\t    \t * May be overriden by scripts that create an UI. This method receives the script's container as its parameter.\n\t    \t * It is the script's responsibility to add their content to the supplied container.\n\t    \t * @param container - The container in which the UI elements should be added.\n\t    \t */\n\t\t\trenderWithContainer(container: $): void;\n\t\t}\n", "FullScreen" : false, "Height" : 48, "Id" : "BMTypescriptHost-12", "Left" : 835, "ResponsiveLayout" : false, "RuntimeProperties" : "[]", "Scope" : "local", "ScrollPosition" : 13, "ShowDataLoading" : true, "Title" : "mtpJsonDef", "Top" : 20, "TranspiledCode" : "\"use strict\";\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIjUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8vIGRlZmluZXMgdGhlIGludGVybmFsIHN0cnVjdHVyZSBvZiBhIEpTT04gbXRwIGZpbGVcbmludGVyZmFjZSBQb2ludCB7XG4gICAgeDogbnVtYmVyO1xuICAgIHk6IG51bWJlcjtcbn1cblxuaW50ZXJmYWNlIFNoYXBlIHtcbiAgICB3aWR0aDogbnVtYmVyO1xuICAgIGhlaWdodDogbnVtYmVyO1xuICAgIHJvdGF0aW9uOiBudW1iZXI7XG4gICAgc2hhcGU6IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIEdlbmVyaWNNcHRFbGVtZW50IHtcbiAgICBpZDogc3RyaW5nO1xuICAgIG5hbWU6IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIFBvc2l0aW9uYWJsZUVsZW1lbnQgZXh0ZW5kcyBQb2ludCB7XG4gICAgLy8gZW1wdHlcbn1cblxuaW50ZXJmYWNlIE5venpsZSBleHRlbmRzIEdlbmVyaWNNcHRFbGVtZW50LCBQb3NpdGlvbmFibGVFbGVtZW50IHtcbiAgICBleHRlcm5hbENvbm5lY3RvcklkOiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBWaXN1YWxPYmplY3QgZXh0ZW5kcyBQb2ludCwgU2hhcGUge1xuICAgIHZpZXdUeXBlOiBzdHJpbmc7XG4gICAgZUNsYXNzVmVyc2lvbjogc3RyaW5nO1xuICAgIGVDbGFzc0NsYXNzaWZpY2F0aW9uOiBzdHJpbmc7XG4gICAgZUNsYXNzSXJkaTogc3RyaW5nO1xuICAgIHJlZklkOiBzdHJpbmc7XG4gICAgbm96emxlczogTm96emxlW107XG4gICAgc3ViRWxlbWVudDogU2hhcGU7XG59XG5cbmludGVyZmFjZSBQaXBlRGVmaW5pdGlvbiBleHRlbmRzIEdlbmVyaWNNcHRFbGVtZW50IHtcbiAgICBzb3VyY2U6IFBvaW50IHwgTm96emxlO1xuICAgIHRhcmdldDogUG9pbnQgfCBOb3p6bGU7XG4gICAgd2F5cG9pbnRzOiBQb2ludFtdO1xuICAgIG5venpsZXM6IE5venpsZVtdO1xufVxuXG5pbnRlcmZhY2UgQ29tbXVuaWNhdGlvbkludGVyZmFjZSBleHRlbmRzIEdlbmVyaWNNcHRFbGVtZW50IHtcbiAgICBpZGVudGlmaWVyOiBzdHJpbmc7XG4gICAgbmFtZXNwYWNlOiBzdHJpbmc7XG4gICAgYWNjZXNzOiBzdHJpbmc7XG59XG5pbnRlcmZhY2UgQ29tbXVuaWNhdGlvbk9iamVjdCBleHRlbmRzIEdlbmVyaWNNcHRFbGVtZW50IHtcbiAgICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICAgIGludGVyZmFjZXM6IENvbW11bmljYXRpb25JbnRlcmZhY2VbXTtcbn1cblxuaW50ZXJmYWNlIEludGVyYWN0aWJsZUVsZW1lbnQge1xuICAgIG9iajogVmlzdWFsT2JqZWN0O1xuICAgIGNvbW11bmljYXRpb246IENvbW11bmljYXRpb25PYmplY3Q7XG59XG5cbmludGVyZmFjZSBIbWlEaWFncmFtIHtcbiAgICB3aWR0aDogbnVtYmVyO1xuICAgIGhlaWdodDogbnVtYmVyO1xuICAgIGVsZW1lbnRzOiBJbnRlcmFjdGlibGVFbGVtZW50W107XG4gICAgcGlwZXM6IFBpcGVEZWZpbml0aW9uW107XG59Il19", "Type" : "BMTypescriptHost", "Visible" : true, "Width" : 128, "Z-index" : 10, "__TypeDisplayName" : "TypeScript Object" }, "Widgets" : [ ] } ] } ] }, { "Properties" : { "AnimateExpandCollapse" : true, "Area" : "UI", "BGImageRepeat" : "no-repeat", "BGImageSize" : "auto", "DisplayName" : "Row 1", "ExpandCollapseTabLocation" : "outside", "Expanded" : true, "Id" : "container-3", "MinHeight" : 0, "MinWidth" : 0, "Overlay" : false, "OverlayIsTransparent" : false, "ResponsiveLayout" : true, "ShowDataLoading" : true, "ShowExpandCollapseTab" : false, "Style" : "DefaultContainerStyle", "TabCollapseStyle" : "DefaultTabCollapseStyle", "TabExpandStyle" : "DefaultTabExpandStyle", "TabHeight" : 36, "TabLocation" : "center", "TabOffset" : 0, "TabWidth" : 36, "Type" : "container", "Visible" : true, "Z-index" : 10, "__TypeDisplayName" : "Container" }, "Widgets" : [ { "Properties" : { "Area" : "UI", "AutoFit" : false, "AutoLayout" : "None", "DisplayName" : "mtpHMIDiagdam", "EdgeStyle" : "None", "Height" : 800, "Id" : "mxdiagram-4", "JSONArrayGraphCells" : "{}", "Left" : 495, "ResponsiveLayout" : true, "ShowDataLoading" : true, "ShowOutline" : false, "ShowTools" : true, "Top" : 85, "Type" : "mxdiagram", "ValueDiagram" : { }, "Visible" : true, "Width" : 640, "XMLDiagram" : "{}", "Z-index" : 10, "__TypeDisplayName" : "mxGraph Diagram" }, "Widgets" : [ ] } ] } ] } ] }, "mashupType" : "mashup" }]]></mashupContent>
			<preview/>
			<ConfigurationChanges>
				<ConfigurationChange changeAction="CREATE" changeReason="" timestamp="2019-07-18T11:37:25.959+03:00" user="Administrator"/>
			</ConfigurationChanges>
		</Mashup>
	</Mashups>
	<ScriptFunctionLibraries/>
	<Projects>
		<Project dependsOn="" description="" documentationContent="" homeMashup="" lastModifiedDate="2019-07-18T11:36:29.965+03:00" name="MTP" packageVersion="1.0.0" projectName="MTP" tags="">
			<Owner name="Administrator" type="User"/>
			<avatar/>
			<DesignTimePermissions>
				<Create/>
				<Read/>
				<Update/>
				<Delete/>
				<Metadata/>
			</DesignTimePermissions>
			<RunTimePermissions/>
			<VisibilityPermissions>
				<Visibility/>
			</VisibilityPermissions>
			<ConfigurationTableDefinitions/>
			<ConfigurationTables/>
			<ConfigurationChanges>
				<ConfigurationChange changeAction="CREATE" changeReason="" timestamp="2019-07-18T11:36:29.964+03:00" user="Administrator"/>
			</ConfigurationChanges>
		</Project>
	</Projects>
	<Users/>
	<DirectoryServices/>
	<Widgets/>
	<MediaEntities/>
	<Groups/>
	<PersistenceProviders/>
	<NotificationContents/>
	<ModelTags/>
	<LocalizationTables/>
	<Dashboards/>
	<StyleThemes/>
	<DataAnalysisDefinitions/>
	<DataShapes>
		<DataShape baseDataShape="" description="" documentationContent="" homeMashup="" lastModifiedDate="2019-08-08T16:47:53.899+03:00" name="MXgraph.ShapeList.DataShape" projectName="MTP" tags="">
			<Owner name="Administrator" type="User"/>
			<avatar/>
			<DesignTimePermissions>
				<Create/>
				<Read/>
				<Update/>
				<Delete/>
				<Metadata/>
			</DesignTimePermissions>
			<RunTimePermissions/>
			<VisibilityPermissions>
				<Visibility/>
			</VisibilityPermissions>
			<ConfigurationTableDefinitions/>
			<ConfigurationTables/>
			<FieldDefinitions>
				<FieldDefinition aspect.friendlyName="Shape Name (long)" aspect.isPrimaryKey="false" baseType="STRING" description="use this for mapping" name="LongShapeName" ordinal="2"/>
				<FieldDefinition aspect.friendlyName="Shape Category" aspect.isPrimaryKey="false" baseType="STRING" description="example: mxgraph.pid.agitators" name="ShapeCategory" ordinal="3"/>
				<FieldDefinition aspect.friendlyName="Shape Name (short)" aspect.isPrimaryKey="false" baseType="STRING" description="example: Agitator, Stirrer. This is formatted in the Shape Name (long)" name="ShortShapeName" ordinal="1"/>
			</FieldDefinitions>
			<ConfigurationChanges>
				<ConfigurationChange changeAction="CREATE" changeReason="header : name : updated&#10;" timestamp="2019-08-08T14:24:33.252+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="fields : ShortShapeName : added, LongShapeName : added, ShapeCategory : added&#10;" timestamp="2019-08-08T14:26:44.198+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="fields : ShortShapeName : updated, LongShapeName : updated, ShapeCategory : updated&#10;" timestamp="2019-08-08T14:28:03.966+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="header : projectName : updated&#10;" timestamp="2019-08-08T16:47:53.899+03:00" user="Administrator"/>
			</ConfigurationChanges>
		</DataShape>
		<DataShape baseDataShape="" description="" documentationContent="" homeMashup="" lastModifiedDate="2019-07-18T11:36:40.671+03:00" name="MtpGeneratedModelDataShape" projectName="MTP" tags="">
			<Owner name="Administrator" type="User"/>
			<avatar/>
			<DesignTimePermissions>
				<Create/>
				<Read/>
				<Update/>
				<Delete/>
				<Metadata/>
			</DesignTimePermissions>
			<RunTimePermissions/>
			<VisibilityPermissions>
				<Visibility/>
			</VisibilityPermissions>
			<ConfigurationTableDefinitions/>
			<ConfigurationTables/>
			<FieldDefinitions>
				<FieldDefinition baseType="STRING" description="" name="graph" ordinal="1"/>
				<FieldDefinition baseType="STRING" description="" name="mtpJson" ordinal="2"/>
				<FieldDefinition baseType="STRING" description="" name="prefix" ordinal="3"/>
			</FieldDefinitions>
			<ConfigurationChanges>
				<ConfigurationChange changeAction="CREATE" changeReason="" timestamp="2019-07-18T11:36:40.671+03:00" user="Administrator"/>
			</ConfigurationChanges>
		</DataShape>
		<DataShape baseDataShape="" description="" documentationContent="" homeMashup="" lastModifiedDate="2019-07-18T11:36:36.467+03:00" name="MtpEclassMxGraphMapping" projectName="MTP" tags="">
			<Owner name="Administrator" type="User"/>
			<avatar/>
			<DesignTimePermissions>
				<Create/>
				<Read/>
				<Update/>
				<Delete/>
				<Metadata/>
			</DesignTimePermissions>
			<RunTimePermissions/>
			<VisibilityPermissions>
				<Visibility/>
			</VisibilityPermissions>
			<ConfigurationTableDefinitions/>
			<ConfigurationTables/>
			<FieldDefinitions>
				<FieldDefinition baseType="STRING" description="" name="eclass" ordinal="1"/>
				<FieldDefinition baseType="STRING" description="" name="mxgraphShape" ordinal="2"/>
			</FieldDefinitions>
			<ConfigurationChanges>
				<ConfigurationChange changeAction="CREATE" changeReason="" timestamp="2019-07-18T11:36:36.467+03:00" user="Administrator"/>
			</ConfigurationChanges>
		</DataShape>
		<DataShape baseDataShape="" description="" documentationContent="" homeMashup="" lastModifiedDate="2019-07-18T11:36:44.991+03:00" name="MtpPropertyValue" projectName="MTP" tags="">
			<Owner name="Administrator" type="User"/>
			<avatar/>
			<DesignTimePermissions>
				<Create/>
				<Read/>
				<Update/>
				<Delete/>
				<Metadata/>
			</DesignTimePermissions>
			<RunTimePermissions/>
			<VisibilityPermissions>
				<Visibility/>
			</VisibilityPermissions>
			<ConfigurationTableDefinitions/>
			<ConfigurationTables/>
			<FieldDefinitions>
				<FieldDefinition baseType="STRING" description="" name="elementId" ordinal="1"/>
				<FieldDefinition baseType="BASETYPENAME" description="" name="value" ordinal="2"/>
			</FieldDefinitions>
			<ConfigurationChanges>
				<ConfigurationChange changeAction="CREATE" changeReason="" timestamp="2019-07-18T11:36:44.991+03:00" user="Administrator"/>
			</ConfigurationChanges>
		</DataShape>
	</DataShapes>
	<Things>
		<Thing description="" documentationContent="" effectiveThingPackage="ConfiguredThing" enabled="true" homeMashup="" identifier="" lastModifiedDate="2019-08-14T14:56:55.444+03:00" name="MtpThingModelOptions" projectName="MTP" published="false" tags="" thingTemplate="GenericThing" valueStream="">
			<Owner name="Administrator" type="User"/>
			<avatar/>
			<DesignTimePermissions>
				<Create/>
				<Read/>
				<Update/>
				<Delete/>
				<Metadata/>
			</DesignTimePermissions>
			<RunTimePermissions/>
			<VisibilityPermissions>
				<Visibility/>
			</VisibilityPermissions>
			<ConfigurationTableDefinitions/>
			<ConfigurationTables/>
			<ThingShape>
				<PropertyDefinitions>
					<PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeType="VALUE" aspect.dataShape="MtpGeneratedModelDataShape" aspect.isLogged="false" aspect.isPersistent="true" aspect.isReadOnly="false" baseType="INFOTABLE" category="" description="" isLocalOnly="false" name="MtpSavedModules" ordinal="1"/>
				</PropertyDefinitions>
				<ServiceDefinitions>
					<ServiceDefinition aspect.isAsync="false" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="CollectDataForMtp">
						<ResultType aspect.dataShape="MtpPropertyValue" baseType="INFOTABLE" description="" name="result" ordinal="0"/>
						<ParameterDefinitions>
							<FieldDefinition baseType="STRING" description="" name="jsonMtp" ordinal="1"/>
							<FieldDefinition baseType="STRING" description="" name="prefix" ordinal="2"/>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="JsonMtpToThingModel">
						<ResultType aspect.dataShape="RootEntityList" baseType="INFOTABLE" description="" name="result" ordinal="0"/>
						<ParameterDefinitions>
							<FieldDefinition aspect.thingTemplate="IndustrialGateway" baseType="THINGNAME" description="" name="industrialGateway" ordinal="5"/>
							<FieldDefinition baseType="STRING" description="" name="jsonMtp" ordinal="1"/>
							<FieldDefinition baseType="STRING" description="" name="prefix" ordinal="2"/>
							<FieldDefinition aspect.tagType="ModelTags" baseType="TAGS" description="" name="tags" ordinal="3"/>
							<FieldDefinition baseType="THINGTEMPLATENAME" description="" name="template" ordinal="4"/>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="SaveMtpModule">
						<ResultType baseType="NOTHING" description="" name="result" ordinal="0"/>
						<ParameterDefinitions>
							<FieldDefinition baseType="STRING" description="" name="mtpJson" ordinal="3"/>
							<FieldDefinition baseType="STRING" description="" name="mxGraph" ordinal="2"/>
							<FieldDefinition baseType="STRING" description="" name="prefix" ordinal="1"/>
						</ParameterDefinitions>
					</ServiceDefinition>
				</ServiceDefinitions>
				<EventDefinitions/>
				<ServiceMappings/>
				<ServiceImplementations>
					<ServiceImplementation description="" handlerName="Script" name="CollectDataForMtp">
						<ConfigurationTables>
							<ConfigurationTable description="Script" isMultiRow="false" name="Script" ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA["use strict"; function isNozzle(object) { return 'type' in object && object.type == ElementType.NOZZLE; } var ElementType; (function (ElementType) { ElementType["PIPE"] = "Pipe"; ElementType["NOZZLE"] = "Nozzle"; ElementType["VISUAL_ELEMENT"] = "VisualElement"; ElementType["COMMUNICATION_INTERFACE"] = "CommunicationInterface"; ElementType["COMMUNICATION_OBJECT"] = "CommunicationObject"; })(ElementType || (ElementType = {})); var diagram = JSON.parse(jsonMtp); var loggerPrefix = me.name + "::CollectDataForMtp:: "; var result = DataShapes["MtpPropertyValue"].CreateValues(); for (var _i = 0, _a = diagram.elements; _i < _a.length; _i++) { var element = _a[_i]; if (!element.communication) { continue; } var thingName = prefix + "-" + element.communication.name + "-" + element.obj.eClassClassification + "-" + element.communication.id + "-Thing"; if (!Things[thingName]) { continue; } // iterate through the interfaces array, create and set properties for (var _b = 0, _c = element.communication.interfaces; _b < _c.length; _b++) { var property = _c[_b]; if (Things[thingName][property.name] != undefined) { result.AddRow({ elementId: property.id, value: Things[thingName][property.name] }); } } }]]></code>
									</Row>
									<Row>
										<code><![CDATA[// defines the internal structure of a JSON mtp file interface IPoint { x: number; y: number; } function isNozzle(object: IPoint | Nozzle): object is Nozzle { return 'type' in object && object.type == ElementType.NOZZLE; } interface Shape extends IPoint { width: number; height: number; rotation: number; }  enum ElementType { PIPE = "Pipe", NOZZLE = "Nozzle", VISUAL_ELEMENT = "VisualElement", COMMUNICATION_INTERFACE = "CommunicationInterface", COMMUNICATION_OBJECT = "CommunicationObject" } interface GenericMptElement { id: string; name: string; type: ElementType; } interface PositionableElement extends IPoint { // empty } interface Nozzle extends GenericMptElement, PositionableElement { externalConnectorId: string; baseClass: string; } interface VisualObject extends Shape, GenericMptElement { viewType: string; eClassVersion: string; eClassClassification: string; eClassIrdi: string; refId: string; nozzles: Nozzle[]; subElement?: Shape; } interface PipeDefinition extends GenericMptElement { source: IPoint | Nozzle; target: IPoint | Nozzle; waypoints: IPoint[]; nozzles: Nozzle[]; } interface CommunicationInterface extends GenericMptElement { identifier: string; namespace: string; access: string; endpoint: string; } interface CommunicationObject extends GenericMptElement { description: string; interfaces: CommunicationInterface[]; } interface InteractibleElement { obj: VisualObject; communication?: CommunicationObject; } interface HmiDiagram { width: number; height: number; elements: InteractibleElement[]; pipes: PipeDefinition[]; } let diagram = JSON.parse(jsonMtp) as HmiDiagram; const loggerPrefix = me.name + "::CollectDataForMtp:: "; var result = DataShapes["MtpPropertyValue"].CreateValues(); for (const element of diagram.elements) { if (!element.communication) { continue; } let thingName = `${prefix}-${element.communication.name}-${element.obj.eClassClassification}-${element.communication.id}-Thing`; if(!Things[thingName]) { continue; } // iterate through the interfaces array, create and set properties for (const property of element.communication.interfaces) { if(Things[thingName][property.name]!= undefined) { result.AddRow({ elementId: property.id, value: Things[thingName][property.name] }) } } }]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description="" handlerName="Script" name="JsonMtpToThingModel">
						<ConfigurationTables>
							<ConfigurationTable description="Script" isMultiRow="false" name="Script" ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[function isNozzle(object) { return 'type' in object && object.type == ElementType.NOZZLE; } var ElementType; (function (ElementType) { ElementType["PIPE"] = "Pipe"; ElementType["NOZZLE"] = "Nozzle"; ElementType["VISUAL_ELEMENT"] = "VisualElement"; ElementType["COMMUNICATION_INTERFACE"] = "CommunicationInterface"; ElementType["COMMUNICATION_OBJECT"] = "CommunicationObject"; })(ElementType || (ElementType = {})); var diagram = JSON.parse(jsonMtp); var result = DataShapes["RootEntityList"].CreateValues(); var loggerPrefix = me.name + "::NameJsonMtpToThingModel:: "; for (var _i = 0, _a = diagram.elements; _i < _a.length; _i++) { var element = _a[_i]; if (!element.communication) { continue; } var thingName = prefix + "-" + element.communication.name + "-" + element.obj.eClassClassification + "-" + element.communication.id + "-Thing"; logger.info(loggerPrefix + "Creating mtp thing for " + thingName); try { // attempt to create the thing. Resources.EntityServices.CreateThing({ description: "MTP generated " + element.communication.id, thingTemplateName: template, name: thingName, tags: tags }); // add the generic shape to the thing Resources.EntityServices.AddShapeToThing({ name: thingName, thingShapeName: "MTPGenericThingShape" }); // add the industrial shape to the thing Resources.EntityServices.AddShapeToThing({ name: thingName, thingShapeName: "IndustrialThingShape" }); Things[thingName].EnableThing(); Things[thingName].RestartThing(); // set the generic properties Things[thingName]["visualId"] = element.obj.id; Things[thingName]["eClassClassification"] = element.obj.eClassClassification; Things[thingName]["communicationDescription"] = element.communication.description; Things[thingName]["communicationName"] = element.communication.name; Things[thingName]["communicationId"] = element.communication.id; Things[thingName]["visualName"] = element.obj.name; Things[thingName]["IndustrialThing"] = industrialGateway; // iterate through the interfaces array, create and set properties for (var _b = 0, _c = element.communication.interfaces; _b < _c.length; _b++) { var attr = _c[_b]; Things[thingName].AddPropertyDefinition({ description: attr.id, type: "NUMBER", name: attr.name, category: "MtpGenerated", persistent: false, remote: true, remoteBindingAspects: { "industrialDataType": "Word", "tagAddress": attr.identifier, "scanRate": 1000, "tagType": "Static", "startType": "useDefaultValue", "source": "", "dataShape": "" } }); } result.AddRow({ name: thingName, description: "MTP generated " + element.communication.id }); } catch (ex) { Resources.EntityServices.DeleteThing({ name: thingName }); logger.error(loggerPrefix + ": Failed to create thing " + thingName + " because " + ex); throw ex; } } ]]></code>
									</Row>
									<Row>
										<code><![CDATA[// defines the internal structure of a JSON mtp file interface IPoint { x: number; y: number; } function isNozzle(object: IPoint | Nozzle): object is Nozzle { return 'type' in object && object.type == ElementType.NOZZLE; } interface Shape extends IPoint { width: number; height: number; rotation: number; } enum ElementType { PIPE = "Pipe", NOZZLE = "Nozzle", VISUAL_ELEMENT = "VisualElement", COMMUNICATION_INTERFACE = "CommunicationInterface", COMMUNICATION_OBJECT = "CommunicationObject" } interface GenericMptElement { id: string; name: string; type: ElementType; } interface PositionableElement extends IPoint { // empty } interface Nozzle extends GenericMptElement, PositionableElement { externalConnectorId: string; baseClass: string; } interface VisualObject extends Shape, GenericMptElement { viewType: string; eClassVersion: string; eClassClassification: string; eClassIrdi: string; refId: string; nozzles: Nozzle[]; subElement?: Shape; } interface PipeDefinition extends GenericMptElement { source: IPoint | Nozzle; target: IPoint | Nozzle; waypoints: IPoint[]; nozzles: Nozzle[]; } interface CommunicationInterface extends GenericMptElement { identifier: string; namespace: string; access: string; endpoint: string; } interface CommunicationObject extends GenericMptElement { description: string; interfaces: CommunicationInterface[]; } interface InteractibleElement { obj: VisualObject; communication?: CommunicationObject; } interface HmiDiagram { width: number; height: number; elements: InteractibleElement[]; pipes: PipeDefinition[]; } let diagram = JSON.parse(jsonMtp) as HmiDiagram; var result = DataShapes["RootEntityList"].CreateValues(); const loggerPrefix = me.name + "::NameJsonMtpToThingModel:: "; for (const element of diagram.elements) { if (!element.communication) { continue; } let thingName = `${prefix}-${element.communication.name}-${element.obj.eClassClassification}-${element.communication.id}-Thing`; logger.info(loggerPrefix + "Creating mtp thing for " + thingName); try { // attempt to create the thing. Resources.EntityServices.CreateThing({ description: "MTP generated " + element.communication.id, thingTemplateName: template, name: thingName, tags: tags }); // add the generic shape to the thing Resources.EntityServices.AddShapeToThing({ name: thingName, thingShapeName: "MTPGenericThingShape" }); // add the industrial shape to the thing Resources.EntityServices.AddShapeToThing({ name: thingName, thingShapeName: "IndustrialThingShape" }); Things[thingName].EnableThing(); Things[thingName].RestartThing(); // set the generic properties Things[thingName]["visualId"] = element.obj.id; Things[thingName]["eClassClassification"] = element.obj.eClassClassification; Things[thingName]["communicationDescription"] = element.communication.description; Things[thingName]["communicationName"] = element.communication.name; Things[thingName]["communicationId"] = element.communication.id; Things[thingName]["visualName"] = element.obj.name; Things[thingName]["IndustrialThing"] = industrialGateway; // iterate through the interfaces array, create and set properties for (let attr of element.communication.interfaces) { Things[thingName].AddPropertyDefinition({ description: attr.id, type: "NUMBER", name: attr.name, category: "MtpGenerated", persistent: false, remote: true, remoteBindingAspects: { "industrialDataType": "Word", "tagAddress": attr.identifier, "scanRate": 1000, "tagType": "Static", "startType": "useDefaultValue", "source": "", "dataShape": "" } }); } result.AddRow({ name: thingName, description: "MTP generated " + element.communication.id }) } catch (ex) { Resources.EntityServices.DeleteThing({ name: thingName }); logger.error(`${loggerPrefix}: Failed to create thing ${thingName} because ${ex}`); throw ex; } }]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description="" handlerName="Script" name="SaveMtpModule">
						<ConfigurationTables>
							<ConfigurationTable description="Script" isMultiRow="false" name="Script" ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[me.MtpSavedModules.AddRow({ graph: mxGraph, mtpJson: mtpJson, prefix: prefix })]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
				</ServiceImplementations>
				<Subscriptions/>
			</ThingShape>
			<PropertyBindings/>
			<RemotePropertyBindings/>
			<RemoteServiceBindings/>
			<RemoteEventBindings/>
			<AlertConfigurations>
				<AlertDefinitions name="MtpSavedModules"/>
			</AlertConfigurations>
			<ImplementedShapes/>
			<ThingProperties>
				<MtpSavedModules>
					<Value>
						<infoTable>
							<DataShape>
								<FieldDefinitions>
									<FieldDefinition baseType="STRING" description="" name="graph" ordinal="1"/>
									<FieldDefinition baseType="STRING" description="" name="mtpJson" ordinal="2"/>
									<FieldDefinition baseType="STRING" description="" name="prefix" ordinal="3"/>
								</FieldDefinitions>
							</DataShape>
							<Rows/>
						</infoTable>
					</Value>
					<Timestamp>2018-08-21T15:29:17.151+03:00</Timestamp>
					<Quality>GOOD</Quality>
				</MtpSavedModules>
			</ThingProperties>
			<ConfigurationChanges>
				<ConfigurationChange changeAction="CREATE" changeReason="" timestamp="2019-07-18T11:37:10.451+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : JsonMtpToThingModel : service updated&#10;" timestamp="2019-08-14T14:56:55.441+03:00" user="Administrator"/>
			</ConfigurationChanges>
		</Thing>
		<Thing description="" documentationContent="" effectiveThingPackage="FileRepositoryThing" enabled="true" homeMashup="" identifier="" lastModifiedDate="2019-07-18T11:37:02.331+03:00" name="MtpFileRepository" projectName="MTP" published="false" tags="" thingTemplate="FileRepository" valueStream="">
			<Owner name="Administrator" type="User"/>
			<avatar/>
			<DesignTimePermissions>
				<Create/>
				<Read/>
				<Update/>
				<Delete/>
				<Metadata/>
			</DesignTimePermissions>
			<RunTimePermissions/>
			<VisibilityPermissions>
				<Visibility/>
			</VisibilityPermissions>
			<ConfigurationTableDefinitions/>
			<ConfigurationTables/>
			<ThingShape>
				<PropertyDefinitions/>
				<ServiceDefinitions/>
				<EventDefinitions/>
				<ServiceMappings/>
				<ServiceImplementations/>
				<Subscriptions/>
			</ThingShape>
			<PropertyBindings/>
			<RemotePropertyBindings/>
			<RemoteServiceBindings/>
			<RemoteEventBindings/>
			<AlertConfigurations/>
			<ImplementedShapes/>
			<ThingProperties/>
			<ConfigurationChanges>
				<ConfigurationChange changeAction="CREATE" changeReason="" timestamp="2019-07-18T11:37:02.330+03:00" user="Administrator"/>
			</ConfigurationChanges>
		</Thing>
		<Thing description="" documentationContent="" effectiveThingPackage="ConfiguredThing" enabled="true" homeMashup="" identifier="" lastModifiedDate="2019-08-21T11:43:26.328+03:00" name="MtpMxgraphUtilities" projectName="MTP" published="false" tags="" thingTemplate="GenericThing" valueStream="">
			<Owner name="Administrator" type="User"/>
			<avatar/>
			<DesignTimePermissions>
				<Create/>
				<Read/>
				<Update/>
				<Delete/>
				<Metadata/>
			</DesignTimePermissions>
			<RunTimePermissions/>
			<VisibilityPermissions>
				<Visibility/>
			</VisibilityPermissions>
			<ConfigurationTableDefinitions/>
			<ConfigurationTables/>
			<ThingShape>
				<PropertyDefinitions>
					<PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeType="VALUE" aspect.dataShape="MtpEclassMxGraphMapping" aspect.isLogged="false" aspect.isPersistent="true" aspect.isReadOnly="false" baseType="INFOTABLE" category="" description="" isLocalOnly="false" name="mapping" ordinal="1"/>
				</PropertyDefinitions>
				<ServiceDefinitions>
					<ServiceDefinition aspect.isAsync="false" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="ConvertPhoenixXAMLToStencilV2">
						<ResultType baseType="XML" description="" name="result" ordinal="0"/>
						<ParameterDefinitions/>
					</ServiceDefinition>
				</ServiceDefinitions>
				<EventDefinitions/>
				<ServiceMappings/>
				<ServiceImplementations>
					<ServiceImplementation description="" handlerName="Script" name="ConvertPhoenixXAMLToStencilV2">
						<ConfigurationTables>
							<ConfigurationTable description="" isMultiRow="false" name="Script" ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[ var result = <shapes name = "mxgraph.custom.shapes"/>; var av = new Namespace("http://schemas.microsoft.com/winfx/2006/xaml/presentation"); var tdg =  Things["MtpFileRepository"].LoadXML({ 	path: "ToolBoxItems.xaml" /* STRING */ }); //we replace all the {av:StaticResource ToolBoxItemLineColor} with black for each (var node in tdg..*.(@Fill=="{av:StaticResource ToolBoxItemLineColor}")) { 	node.@Fill="black"; } for each (var node in tdg..*.(@Stroke=="{av:StaticResource ToolBoxItemLineColor}")) { 	node.@Stroke="black"; } for each (var node in tdg..*.(@StrokeThickness=="{av:StaticResource ToolBoxItemLineThickness}")) { 	node.@StrokeThickness="1"; } for each (var tbdg in tdg..*::ToolBoxDataItem) { 	var newShapeNode = <shape name={tbdg.@Name} h={tbdg.@DefaultHeight} w={tbdg.@DefaultWidth} strokewidth="inherit"/>; 	//The MXgraph format contains connections, foreground and background nodes. We create them ahead of time, and based on the content of the ToolboxItems.xaml, we add nodes to each of them 	var Shape_Connections = <connections/>; 	var Shape_Foreground = <foreground/>; 	//we will NOT use any background item since in the XAML file there is no difference between background and foreground 	var Shape_Background = <background/>; 	//we populate the Connectors. They do not require any drawing. 	for each (var ConnectorData in tbdg..*::ConnectorData) 	{	var RelativePosition = ConnectorData.@RelativePosition;	//assuming the first position is X and the second is Y	var x=RelativePosition.split(",")[0];	var y=RelativePosition.split(",")[1];	Shape_Connections.appendChild(<constraint x={x} y={y}/>); 	} 	//for some reason children() and * return lots of null names.  	//all the geometrical drawing elements apparently need to be decimal, so therefore we round them 	for each (var DrawingElement in tbdg..*::Canvas.elements()) 	{		//the localName contains only the node name, without the namespace	switch (DrawingElement.localName())	{	case "Ellipse":	//check if canvas top and left are there	if (DrawingElement.@av::["Canvas.Top"].toString().length>0 && DrawingElement.@av::["Canvas.Left"].toString().length>0)	{	var w=parseFloat(DrawingElement.@Width);	var h=parseFloat(DrawingElement.@Height);	var xxx=parseFloat(DrawingElement.@av::["Canvas.Left"]);	var yyy=parseFloat(DrawingElement.@av::["Canvas.Top"]);	Shape_Foreground.appendChild(<ellipse w={w} h={h} x={xxx} y={yyy}/>);	}	else {		Shape_Foreground.appendChild(<ellipse w={DrawingElement.@Width} h={DrawingElement.@Height}/>);	}	var stroketype;	if (DrawingElement.@Fill.toString().length>0) {stroketype=<fillstroke/>; Shape_Foreground.appendChild(<fillcolor color={DrawingElement.@Fill}/>)} else {stroketype = <stroke/>}	if (DrawingElement.@Stroke.toString().length>0) Shape_Foreground.appendChild(<strokecolor color={DrawingElement.@Stroke}/>);	Shape_Foreground.appendChild(stroketype);		break;	case "Line":	var Path = <path/>;	//since the MXGraph stencil format does not allow line with from/to coordinates, as the Toolbox.xaml, we must create 2 nodes per each line. One move and another line	Path.appendChild(<move x={Math.round(DrawingElement.@X1)} y={Math.round(DrawingElement.@Y1)} />);	Path.appendChild(<line x={Math.round(DrawingElement.@X2)} y={Math.round(DrawingElement.@Y2)} />);	//Path.appendChild(<close/>);	Shape_Foreground.appendChild(Path);	if (DrawingElement.@Fill.toString().length>0) Shape_Foreground.appendChild(<fillcolor color={DrawingElement.@Fill}/>);	if (DrawingElement.@Stroke.toString().length>0) Shape_Foreground.appendChild(<strokecolor color={DrawingElement.@Stroke}/>);	Shape_Foreground.appendChild(<stroke/>);	break;	case "Polyline":	var PathElement = <path/>//Polyline contains a line like "0,5 0,35 25,20 40,12.5 40,27.5 25,20 0,5"	var PolylinePairs = DrawingElement.@Points.split(" ");	//the first thing required in the path geometry is to move the cursor to the start position	PathElement.appendChild(<move x={Math.round(PolylinePairs[0].split(",")[0])} y={Math.round(PolylinePairs[0].split(",")[1])} />);	for (var y=1;y< PolylinePairs.length;y++)	{	PathElement.appendChild(<line x={Math.round(PolylinePairs[y].split(",")[0])} y={Math.round(PolylinePairs[y].split(",")[1])} />);	}	//PathElement.appendChild(<close/>);	Shape_Foreground.appendChild(PathElement);	//appending a stroke to force the draw	Shape_Foreground.appendChild(<stroke/>);	break;	case "Rectangle":	//in some cases Top or Left is not specified. In those cases we consider it 0;	var X,Y;		if (DrawingElement.@av::["Canvas.Top"].toString().length==0) Y=0; else Y=DrawingElement.@av::["Canvas.Top"];	if (DrawingElement.@av::["Canvas.Left"].toString().length==0) X=0; else X=DrawingElement.@av::["Canvas.Left"];		var RectangleElement = <rect x={X} y={Y} w={DrawingElement.@Width} h={DrawingElement.@Height}/>;	Shape_Foreground.appendChild(RectangleElement);	Shape_Foreground.appendChild(<stroke/>);	break;	case "Path":	//the av.Path is a collection of PathFigure	var Path = <path/>;	//We're testing 4 exceptions to the rule that the node only contains PathFigures	//Exception 1: We check if there is just a PathGeometry with the Figures attribute set. That attribute contains a mini language that can be used to draw elements instead of a more strict defined 					XML structure.	var FiguresAttribute = DrawingElement.av::["Path.Data"].av::PathGeometry.@Figures;	if (FiguresAttribute.toString().length!=0) 	{	var str_FA = FiguresAttribute.toString();	var arr_Values = str_FA.split(" ");	//the first 3 values are M 20 20, which corresponds to Move, x,y	Path.appendChild(<move x={arr_Values[1]} y={arr_Values[2]}/>);;	for (var L=4; L<arr_Values.length;L=L+2)	{	Path.appendChild(<line x={arr_Values[L]} y={arr_Values[L+1]}/>);	}	Path.appendChild(<close/>);	}		//Exception 2: there is a GeometryGroup that can hold in our case only a RectangleGeometry (item named Messpunkt as an example)	if (DrawingElement.av::["Path.Data"].av::GeometryGroup.elements().length()>0)	{		for each(var GeometricElement in DrawingElement.av::["Path.Data"].av::GeometryGroup.children())	{	if (GeometricElement.localName()=="RectangleGeometry")	{	var arr_RectangleCoordinates = GeometricElement.@Rect.split(",");	Shape_Foreground.appendChild(<rect x={arr_RectangleCoordinates[0]} y={arr_RectangleCoordinates[1]} w={arr_RectangleCoordinates[2]} h={arr_RectangleCoordinates[3]}/>);	Shape_Foreground.appendChild(<stroke/>);	}		}	}	//Exception 3: there is an EllipseGeometry directly in the Path.data (item named Pumpe as an example)	if (DrawingElement.av::["Path.Data"].elements().length()>0)	{	for each(var GeometricElement in DrawingElement.av::["Path.Data"].children())	{	if (GeometricElement.localName()=="EllipseGeometry")	{	var ell_RX,ell_RY, ell_CX, ell_CY;	ell_RX = 2*GeometricElement.@RadiusX;	ell_RY = 2*GeometricElement.@RadiusY;	ell_CY= GeometricElement.@Center.split(",")[0]-ell_RY/2;	ell_CX =GeometricElement.@Center.split(",")[1]-ell_RX/2;	Shape_Foreground.appendChild(<ellipse x={ell_CX} y={ell_CY} w={ell_RX} h={ell_RY}/>);	if (DrawingElement.@Fill.toString().length>0) Shape_Foreground.appendChild(<fillcolor color={DrawingElement.@Fill}/>);	if (DrawingElement.@Stroke.toString().length>0) Shape_Foreground.appendChild(<strokecolor color={DrawingElement.@Stroke}/>);	Shape_Foreground.appendChild(<stroke/>);	}	}	}	//Exception 4: there is an Data attribute directly under the av:Path node that contains a line description	if (DrawingElement.@Data.length()>0)	{	var str_Data = DrawingElement.@Data;	var arr_Values = str_Data.split(" ");	//the first 3 values are M 20,20, which corresponds to Move, x,y	Path.appendChild(<move x={arr_Values[1].split(",")[0]} y={arr_Values[1].split(",")[1]}/>);;	for (var L=3; L<arr_Values.length;L++)	{	Path.appendChild(<line x={arr_Values[L].split(",")[0]} y={arr_Values[L].split(",")[1]}/>);	}	//Path.appendChild(<close/>);	}	//Exceptions were treated above, and now we will assume we will encounter only PathFigures	for each (var PathFigure in DrawingElement..av::PathFigureCollection.elements().elements())	{			//the Node name can be PathFigure.Segments, PolyLineSegment or ArcSegment; depending on the type, we will draw a specific subpath	var startPoint = PathFigure.parent().@StartPoint.split(",");	switch (PathFigure.localName()) {	case "PolyLineSegment":	//The PathFigure contains now the PolyLine Segment		Path.appendChild(<move x={startPoint[0]} y={startPoint[1]}/>);	//for each pair of PolyLine segments we add a line	var PolyLinePairs  = PathFigure.@Points.split(" ");	for (var z=0;z<PolyLinePairs.length;z++)	{	Path.appendChild(<line x={Math.round(PolyLinePairs[z].split(",")[0])} y={Math.round(PolyLinePairs[z].split(",")[1])}/>);	}	//Path.appendChild(<close/>);	break;	case "PathFigure.Segments":	//The PathFigure contains now the PathFigure.Segments	Path.appendChild(<move x={startPoint[0]} y={startPoint[1]}/>);	for each (var Segment in PathFigure..av::PathSegmentCollection.elements())	{		switch (Segment.localName()){	case "LineSegment":	Path.appendChild(<line x={Segment.@Point.split(",")[0]} y={Segment.@Point.split(",")[1]}/>);	break;	case "ArcSegment":	var RX, RY, X, Y;	RX=Segment.@Size.split(",")[0];	RY=Segment.@Size.split(",")[1];	X=Segment.@Point.split(",")[0];	Y=Segment.@Point.split(",")[1];	SweepDirection = Segment.@SweepDirection=="Clockwise"?1:0;	Path.appendChild(<arc rx={RX} ry={RY} sweep-flag={SweepDirection} x={X} y={Y}/>);	break;	default:	}	}	if (PathFigure.parent().@IsClosed=="True") Path.appendChild(<close/>);		break;		default:		}			}	if (Path.elements().length()>0)	{	Shape_Foreground.appendChild(Path);	Shape_Foreground.appendChild(<stroke/>);	}	break;	default:		}		 	} 	newShapeNode.appendChild(Shape_Connections); 	newShapeNode.appendChild(Shape_Background); 	newShapeNode.appendChild(Shape_Foreground); 	result.*::shapes += newShapeNode; 	//result.* } ]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
				</ServiceImplementations>
				<Subscriptions/>
			</ThingShape>
			<PropertyBindings/>
			<RemotePropertyBindings/>
			<RemoteServiceBindings/>
			<RemoteEventBindings/>
			<AlertConfigurations>
				<AlertDefinitions name="mapping"/>
			</AlertConfigurations>
			<ImplementedShapes/>
			<ThingProperties>
				<mapping>
					<Value>
						<infoTable>
							<DataShape>
								<FieldDefinitions>
									<FieldDefinition baseType="STRING" description="" name="eclass" ordinal="1"/>
									<FieldDefinition baseType="STRING" description="" name="mxgraphShape" ordinal="2"/>
								</FieldDefinitions>
							</DataShape>
							<Rows>
								<Row>
									<eclass><![CDATA[27209090]]></eclass>
									<mxgraphShape><![CDATA[mxgraph.custom.shapes.messgerät]]></mxgraphShape>
								</Row>
								<Row>
									<eclass><![CDATA[36410190]]></eclass>
									<mxgraphShape><![CDATA[mxgraph.custom.shapes.pumpe]]></mxgraphShape>
								</Row>
								<Row>
									<eclass><![CDATA[37010201]]></eclass>
									<mxgraphShape><![CDATA[mxgraph.custom.shapes.ventil]]></mxgraphShape>
								</Row>
								<Row>
									<eclass><![CDATA[37011190]]></eclass>
									<mxgraphShape><![CDATA[mxgraph.custom.shapes.druckminderer]]></mxgraphShape>
								</Row>
								<Row>
									<eclass><![CDATA[27029090]]></eclass>
									<mxgraphShape><![CDATA[mxgraph.custom.shapes.motor]]></mxgraphShape>
								</Row>
								<Row>
									<eclass><![CDATA[36020190]]></eclass>
									<mxgraphShape><![CDATA[mxgraph.custom.shapes.rührreaktor]]></mxgraphShape>
								</Row>
								<Row>
									<eclass><![CDATA[MTPDataObjectSUCLib/DataAssembly/StrView]]></eclass>
									<mxgraphShape><![CDATA[mxgraph.custom.shapes.input]]></mxgraphShape>
								</Row>
							</Rows>
						</infoTable>
					</Value>
					<Timestamp>2019-08-12T13:23:27.345+03:00</Timestamp>
					<Quality>GOOD</Quality>
				</mapping>
			</ThingProperties>
			<ConfigurationChanges>
				<ConfigurationChange changeAction="CREATE" changeReason="" timestamp="2019-07-18T11:37:06.425+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service added&#10;" timestamp="2019-07-19T14:51:02.430+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T14:51:42.502+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T14:59:56.903+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T15:01:32.599+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T15:02:11.577+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T15:02:28.990+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T15:04:06.691+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T15:05:19.921+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T15:21:07.924+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T15:22:22.438+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T15:22:27.331+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T15:31:28.369+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T15:31:44.154+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T15:32:19.981+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T15:32:56.125+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T15:33:24.533+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T15:33:51.679+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T15:34:17.976+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T15:34:37.812+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T15:35:25.746+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T15:39:59.262+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T15:40:58.098+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T15:41:11.343+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T15:41:36.817+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T15:42:36.973+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T15:43:04.212+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T15:44:01.902+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T15:52:24.091+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T15:52:40.236+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T15:53:48.018+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T15:54:44.190+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T15:55:13.583+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T15:55:27.675+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T15:57:13.263+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T15:59:52.071+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T16:02:43.847+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T16:03:51.285+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T16:07:07.542+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T16:07:45.697+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T16:07:59.652+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T16:11:23.647+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T16:12:52.377+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T16:13:39.180+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T16:17:59.402+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T16:18:13.461+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T16:18:27.161+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T16:24:52.899+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T16:33:38.830+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T16:35:04.872+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T16:35:31.596+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T16:35:56.162+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T16:37:20.212+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T16:37:34.845+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T16:38:05.949+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T16:38:56.308+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T16:39:20.125+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T16:40:44.711+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T16:41:43.642+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T16:42:14.488+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T16:46:07.642+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T16:46:21.205+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T16:49:00.666+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T16:50:43.118+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T16:52:00.306+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T16:53:05.166+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T16:54:50.447+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T16:55:53.020+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T16:56:19.611+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T16:57:39.121+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T17:04:12.086+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T17:06:30.185+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T17:18:00.844+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T17:18:12.690+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T17:19:34.664+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T17:23:02.848+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T17:23:10.991+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T17:25:16.197+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T17:35:07.850+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T18:22:56.602+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T18:24:07.911+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T18:25:11.057+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T18:27:46.136+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T18:33:45.320+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T18:34:26.849+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T18:34:41.377+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T18:35:10.789+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T18:35:47.444+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T18:36:30.650+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T18:37:16.601+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T18:37:54.645+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T18:38:40.392+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T18:39:05.568+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T18:39:50.733+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T18:40:40.863+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T18:50:58.062+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T18:51:35.116+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T18:54:23.653+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T18:55:03.645+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T18:55:49.035+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T18:57:22.624+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T18:58:46.593+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T18:59:42.673+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-19T19:00:12.800+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-22T13:45:06.360+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-22T13:45:25.463+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-22T13:45:41.896+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-22T14:05:59.603+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-22T14:07:02.809+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-22T14:09:28.759+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-22T14:10:00.484+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-22T14:11:19.790+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-22T14:11:40.978+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-22T14:12:04.167+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-22T14:12:36.368+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-22T14:12:50.431+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-22T14:20:28.101+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-22T14:21:41.490+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-22T14:21:52.736+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-22T14:23:00.378+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-22T14:33:54.654+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-22T14:34:11.265+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-22T14:35:14.141+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-22T15:05:54.454+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-22T16:12:37.030+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-22T16:13:54.759+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-22T16:15:20.462+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-22T16:27:35.894+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-22T16:28:14.797+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-22T16:29:40.472+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-22T16:36:55.482+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-22T16:37:13.180+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-22T16:40:06.642+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-22T16:44:38.726+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-22T18:08:27.763+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-23T13:04:34.533+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-23T13:08:03.263+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-23T13:10:03.635+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-23T13:10:36.446+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-23T13:11:09.380+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-23T13:11:50.314+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-23T13:54:18.579+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-23T13:55:51.758+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-23T18:41:49.072+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-23T18:42:02.763+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-23T18:48:09.905+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-23T18:50:36.785+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-23T19:12:38.316+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-23T19:13:23.852+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-24T09:52:24.202+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : dasdasd : service added&#10;" timestamp="2019-07-24T09:53:06.448+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-24T14:23:47.875+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-24T14:36:30.061+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;dasdasd : service deleted&#10;" timestamp="2019-07-24T16:15:41.961+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-24T16:28:34.110+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-24T16:38:12.750+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-24T16:39:52.895+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-24T16:45:49.018+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service updated&#10;" timestamp="2019-07-24T17:10:28.932+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service added&#10;" timestamp="2019-07-24T17:53:06.861+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-07-24T17:54:26.083+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-07-24T17:54:59.428+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-07-24T18:03:13.671+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-07-24T18:05:30.964+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-07-24T18:07:28.086+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-07-24T18:08:30.755+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-07-24T18:10:24.038+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-07-24T18:37:30.996+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;asdas : service added&#10;" timestamp="2019-07-25T11:37:29.762+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : asdas : service updated&#10;" timestamp="2019-07-25T11:52:43.544+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : asdas : service updated&#10;" timestamp="2019-07-25T11:53:33.664+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : asdas : output updated&#10;" timestamp="2019-07-25T12:06:43.791+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : asdas : service updated&#10;" timestamp="2019-07-25T14:00:04.569+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-07-25T14:42:45.035+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-07-25T18:06:42.043+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-07-26T14:35:29.311+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-07-26T14:40:17.726+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-07-26T14:41:03.099+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-07-26T14:56:22.425+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-07-26T14:57:00.180+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-07-26T15:04:30.033+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-07-26T15:23:18.044+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-07-26T15:23:48.299+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-07-26T15:24:15.276+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-07-26T15:24:38.028+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-07-26T15:25:21.504+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-07-26T15:26:38.202+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-07-26T15:27:57.535+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-07-26T15:28:31.110+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-07-26T15:30:47.868+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-07-26T15:37:03.782+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-07-26T15:37:53.699+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-07-26T15:57:23.132+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-07-26T16:01:28.793+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-07-26T16:02:01.199+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-07-26T16:02:23.379+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-07-26T16:02:36.539+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-07-26T16:03:03.001+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-07-26T16:03:56.144+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-07-26T16:07:33.336+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-07-26T16:11:44.144+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-07-26T16:15:17.617+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-07-26T16:27:50.940+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-07-26T16:29:55.855+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-07-26T16:33:26.340+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-07-26T16:35:09.362+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-07-26T16:35:55.179+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : asdas : service updated, service deleted&#10;" timestamp="2019-08-06T17:13:22.982+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-08-06T17:22:02.031+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-08-06T17:23:13.505+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-08-07T15:16:33.555+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-08-07T15:17:38.640+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-08-07T15:37:01.123+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-08-07T15:41:55.240+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-08-07T15:45:13.333+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-08-07T15:47:14.924+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-08-07T15:47:36.077+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-08-07T15:58:59.868+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-08-07T16:06:12.192+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-08-07T16:25:39.738+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-08-07T16:26:24.913+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-08-07T16:33:48.113+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-08-07T16:35:51.180+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-08-07T16:36:39.816+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-08-07T16:39:56.449+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-08-07T16:43:37.988+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-08-07T16:46:16.555+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-08-07T16:47:15.357+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-08-07T16:48:29.418+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-08-07T16:53:55.021+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-08-07T16:54:53.554+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-08-07T16:56:17.168+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-08-07T16:58:28.196+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-08-07T16:59:04.352+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-08-07T17:01:11.051+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-08-07T17:02:50.381+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-08-07T17:27:36.633+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-08-07T17:30:50.256+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-08-07T17:35:05.905+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-08-07T18:08:52.702+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-08-07T18:11:15.023+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-08-07T18:12:19.949+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-08-07T18:14:00.454+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencilV2 : service updated&#10;" timestamp="2019-08-07T18:19:28.105+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : ConvertPhoenixXAMLToStencil : service deleted&#10;" timestamp="2019-08-07T18:29:50.462+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : test : service added&#10;" timestamp="2019-08-08T16:20:32.554+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="properties : s : added&#10;" timestamp="2019-08-12T11:45:25.694+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="properties : s : removed&#10;services : test : service deleted&#10;" timestamp="2019-08-12T13:07:45.552+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : GeneratePDF : service added&#10;" timestamp="2019-08-20T16:11:39.722+03:00" user="Administrator"/>
				<ConfigurationChange changeAction="MODIFY" changeReason="services : GeneratePDF : service deleted&#10;" timestamp="2019-08-21T11:43:26.324+03:00" user="Administrator"/>
			</ConfigurationChanges>
		</Thing>
	</Things>
	<Logs/>
	<Authenticators/>
	<ThingPackages/>
	<NotificationDefinitions/>
	<ApplicationKeys/>
	<StateDefinitions/>
	<ThingTemplates/>
	<ExtensionPackages/>
	<Organizations/>
	<Menus/>
	<Resources/>
	<DataTags/>
	<ThingShapes>
		<ThingShape className="" description="" documentationContent="" homeMashup="" lastModifiedDate="2019-07-18T11:36:53.062+03:00" name="MTPGenericThingShape" projectName="MTP" tags="">
			<PropertyDefinitions>
				<PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeType="VALUE" aspect.isLogged="false" aspect.isPersistent="false" aspect.isReadOnly="false" baseType="STRING" category="" description="" isLocalOnly="false" name="communicationDescription" ordinal="5"/>
				<PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeType="VALUE" aspect.isLogged="false" aspect.isPersistent="false" aspect.isReadOnly="false" baseType="STRING" category="" description="" isLocalOnly="false" name="communicationId" ordinal="3"/>
				<PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeType="VALUE" aspect.isLogged="false" aspect.isPersistent="false" aspect.isReadOnly="false" baseType="STRING" category="" description="" isLocalOnly="false" name="communicationName" ordinal="4"/>
				<PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeType="VALUE" aspect.isLogged="false" aspect.isPersistent="false" aspect.isReadOnly="false" baseType="STRING" category="" description="" isLocalOnly="false" name="eClassClassification" ordinal="6"/>
				<PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeType="VALUE" aspect.isLogged="false" aspect.isPersistent="false" aspect.isReadOnly="false" baseType="STRING" category="" description="" isLocalOnly="false" name="visualId" ordinal="1"/>
				<PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeType="VALUE" aspect.isLogged="false" aspect.isPersistent="true" aspect.isReadOnly="false" baseType="STRING" category="" description="" isLocalOnly="false" name="visualName" ordinal="2"/>
			</PropertyDefinitions>
			<ServiceDefinitions/>
			<EventDefinitions/>
			<ServiceMappings/>
			<ServiceImplementations/>
			<Subscriptions/>
			<Owner name="Administrator" type="User"/>
			<avatar/>
			<DesignTimePermissions>
				<Create/>
				<Read/>
				<Update/>
				<Delete/>
				<Metadata/>
			</DesignTimePermissions>
			<RunTimePermissions/>
			<VisibilityPermissions>
				<Visibility/>
			</VisibilityPermissions>
			<ConfigurationTableDefinitions/>
			<ConfigurationTables/>
			<PropertyBindings/>
			<RemotePropertyBindings/>
			<RemoteServiceBindings/>
			<RemoteEventBindings/>
			<AlertConfigurations>
				<AlertDefinitions name="communicationDescription"/>
				<AlertDefinitions name="communicationId"/>
				<AlertDefinitions name="communicationName"/>
				<AlertDefinitions name="eClassClassification"/>
				<AlertDefinitions name="visualId"/>
				<AlertDefinitions name="visualName"/>
			</AlertConfigurations>
			<InstanceRunTimePermissions/>
			<ConfigurationChanges>
				<ConfigurationChange changeAction="CREATE" changeReason="" timestamp="2019-07-18T11:36:53.061+03:00" user="Administrator"/>
			</ConfigurationChanges>
		</ThingShape>
	</ThingShapes>
	<Subsystems/>
</Entities>